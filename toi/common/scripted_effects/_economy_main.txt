
#Base Scripts
	advance_time = {
		random_country = {
			if = {
				limit = {
					check_variable = { global.month > 11 }
				}
				set_variable = { global.month = 0 }
				add_to_variable = { global.years_passed = 1 }
			}
			clear_array = global.econ_gp_list_array
			#add_to_array = { global.econ_gp_list_array = ENG }
			add_to_array = { global.econ_gp_list_array = USA }
			add_to_array = { global.econ_gp_list_array = BRA }
			add_to_array = { global.econ_gp_list_array = MEX }
			add_to_array = { global.econ_gp_list_array = COL }
			add_to_array = { global.econ_gp_list_array = VEN }
			add_to_array = { global.econ_gp_list_array = CAN }
			add_to_array = { global.econ_gp_list_array = CHL }
			add_to_array = { global.econ_gp_list_array = BOL }
			add_to_array = { global.econ_gp_list_array = PRU }
			add_to_array = { global.econ_gp_list_array = ARG }
			add_to_array = { global.econ_gp_list_array = BUE }
			add_to_array = { global.econ_gp_list_array = HBC }
			add_to_array = { global.econ_gp_list_array = URG }
			add_to_array = { global.econ_gp_list_array = PAR }
			#
			add_to_array = { global.econ_gp_list_array = ECU }
			add_to_array = { global.econ_gp_list_array = PRR }
			#
			add_to_array = { global.econ_gp_list_array = UTA }
			add_to_array = { global.econ_gp_list_array = NVS }
			add_to_array = { global.econ_gp_list_array = VAN }
			add_to_array = { global.econ_gp_list_array = BRK }
			add_to_array = { global.econ_gp_list_array = NFL }
			add_to_array = { global.econ_gp_list_array = BCO }
			add_to_array = { global.econ_gp_list_array = QCI }
			add_to_array = { global.econ_gp_list_array = NWT }
			##
			add_to_array = { global.econ_gp_list_array = GUA }
			add_to_array = { global.econ_gp_list_array = HON }
			add_to_array = { global.econ_gp_list_array = NIC }
			add_to_array = { global.econ_gp_list_array = COS }
			add_to_array = { global.econ_gp_list_array = ELS }
			add_to_array = { global.econ_gp_list_array = DOM }
			add_to_array = { global.econ_gp_list_array = HAI }
			##
			##Primitives
			add_to_array = { global.econ_gp_list_array = SIX }
			add_to_array = { global.econ_gp_list_array = CHY }
			add_to_array = { global.econ_gp_list_array = COM }
			add_to_array = { global.econ_gp_list_array = SHO }
			add_to_array = { global.econ_gp_list_array = APA }
			add_to_array = { global.econ_gp_list_array = CRW }
			add_to_array = { global.econ_gp_list_array = BFT }
			add_to_array = { global.econ_gp_list_array = NAV }
			add_to_array = { global.econ_gp_list_array = NEZ }
			add_to_array = { global.econ_gp_list_array = SEM }

			clear_array = global.econ_order_array
			clear_array = global.econ_value_array
			
			for_each_scope_loop = {
				array = global.econ_gp_list_array

				for_each_loop = {
					array = global.econ_value_array
					index = ii
					value = vv
					break = bb

					if = {
						limit = {
							check_variable = { vv < industrial_power }
						}
						add_to_array = { 
							array = global.econ_value_array
							value = industrial_power
							index = ii
						}
						add_to_array = { 
							array = global.econ_order_array 
							value = THIS
							index = ii
						}
						set_temp_variable = { bb = 1 }
					}
				}
				if = {
					limit = {
						check_variable = { bb = 0 }
					}
					add_to_array = { global.econ_value_array = industrial_power }
					add_to_array = { global.econ_order_array = THIS }
				}

			}

			#Reset
				#Reset Trade Stuff
					#Sorted least to greatest
					clear_array = global.life_goods_global_trade_price_array
					clear_array = global.life_goods_global_trade_country_array

					set_variable = { global.life_goods_global_trade_amount = 0 }
					set_variable = { global.life_goods_global_trade_value = 0 }
					set_variable = { global.life_goods_global_trade_actual_value = 0 }

					clear_array = global.everyday_goods_global_trade_price_array
					clear_array = global.everyday_goods_global_trade_country_array

					set_variable = { global.everyday_goods_global_trade_amount = 0 }
					set_variable = { global.everyday_goods_global_trade_value = 0 }
					set_variable = { global.everyday_goods_global_trade_actual_value = 0 }

					clear_array = global.luxury_goods_global_trade_price_array
					clear_array = global.luxury_goods_global_trade_country_array

					set_variable = { global.luxury_goods_global_trade_amount = 0 }
					set_variable = { global.luxury_goods_global_trade_value = 0 }
					set_variable = { global.luxury_goods_global_trade_actual_value = 0 }

					clear_array = global.services_global_trade_price_array
					clear_array = global.services_global_trade_country_array

					set_variable = { global.services_global_trade_amount = 0 }
					set_variable = { global.services_global_trade_value = 0 }
					set_variable = { global.services_global_trade_actual_value = 0 }

					clear_array = global.raw_goods_global_trade_price_array
					clear_array = global.raw_goods_global_trade_country_array

					set_variable = { global.raw_goods_global_trade_amount = 0 }
					set_variable = { global.raw_goods_global_trade_value = 0 }
					set_variable = { global.raw_goods_global_trade_actual_value = 0 }

					clear_array = global.industrial_goods_global_trade_price_array
					clear_array = global.industrial_goods_global_trade_country_array

					set_variable = { global.industrial_goods_global_trade_amount = 0 }
					set_variable = { global.industrial_goods_global_trade_value = 0 }
					set_variable = { global.industrial_goods_global_trade_actual_value = 0 }
				#
				#Goods
					set_variable = { global.life_goods_supply = 0 }
					set_variable = { global.life_goods_produced_amount = 0 }

					set_variable = { global.everyday_goods_supply = 0 }
					set_variable = { global.everyday_goods_produced_amount = 0 }

					set_variable = { global.luxury_goods_supply = 0 }
					set_variable = { global.luxury_goods_produced_amount = 0 }

					set_variable = { global.services_supply = 0 }
					set_variable = { global.services_produced_amount = 0 }

					set_variable = { global.raw_goods_supply = 0 }
					set_variable = { global.raw_goods_produced_amount = 0 }

					set_variable = { global.industrial_goods_supply = 0 }
					set_variable = { global.industrial_goods_produced_amount = 0 }

					set_variable = { global.life_goods_need = 0 }
					set_variable = { global.everyday_goods_need = 0 }
					set_variable = { global.luxury_goods_need = 0 }
					set_variable = { global.services_need = 0 }
					set_variable = { global.raw_goods_need = 0 }
					set_variable = { global.industrial_goods_need = 0 }

					set_variable = { global.life_goods_demand = 0 }
					set_variable = { global.everyday_goods_demand = 0 }
					set_variable = { global.luxury_goods_demand = 0 }
					set_variable = { global.services_demand = 0 }
					set_variable = { global.raw_goods_demand = 0 }
					set_variable = { global.industrial_goods_demand = 0 }
				#
				set_variable = { global.total_money = 0 }
			#
		}
		for_each_scope_loop = {
			array = global.econ_order_array
			#Reset
				#Reset State Trade Stuff
					#Sorted least to greatest
					clear_array = life_goods_trade_price_array
					clear_array = life_goods_trade_state_array

					set_variable = { life_goods_trade_amount = 0 }
					set_variable = { life_goods_trade_value = 0 }
					
					clear_array = everyday_goods_trade_price_array
					clear_array = everyday_goods_trade_state_array

					set_variable = { everyday_goods_trade_amount = 0 }
					set_variable = { everyday_goods_trade_value = 0 }
					
					clear_array = luxury_goods_trade_price_array
					clear_array = luxury_goods_trade_state_array

					set_variable = { luxury_goods_trade_amount = 0 }
					set_variable = { luxury_goods_trade_value = 0 }
					
					clear_array = services_trade_price_array
					clear_array = services_trade_state_array

					set_variable = { services_trade_amount = 0 }
					set_variable = { services_trade_value = 0 }
					
					clear_array = raw_goods_trade_price_array
					clear_array = raw_goods_trade_state_array

					set_variable = { raw_goods_trade_amount = 0 }
					set_variable = { raw_goods_trade_value = 0 }
					
					clear_array = industrial_goods_trade_price_array
					clear_array = industrial_goods_trade_state_array

					set_variable = { industrial_goods_trade_amount = 0 }
					set_variable = { industrial_goods_trade_value = 0 }
				#
				#Reset Global Trade Stuff
					set_variable = { life_goods_global_trade_amount = 0 } #Positive: Goods Bought / Negative: Goods Sold - Note, this only applies in this effect. It's always positive elsewhere.
					set_variable = { life_goods_global_trade_value = 0 } #Positive: Amount Recieved / Negative: Amount Paid
					set_variable = { life_goods_global_trade_actual_value = 0 }

					set_variable = { everyday_goods_global_trade_amount = 0 }
					set_variable = { everyday_goods_global_trade_value = 0 }
					set_variable = { everyday_goods_global_trade_actual_value = 0 }

					set_variable = { luxury_goods_global_trade_amount = 0 }
					set_variable = { luxury_goods_global_trade_value = 0 }
					set_variable = { luxury_goods_global_trade_actual_value = 0 }

					set_variable = { services_global_trade_amount = 0 }
					set_variable = { services_global_trade_value = 0 }
					set_variable = { services_global_trade_actual_value = 0 }

					set_variable = { raw_goods_global_trade_amount = 0 }
					set_variable = { raw_goods_global_trade_value = 0 }
					set_variable = { raw_goods_global_trade_actual_value = 0 }

					set_variable = { industrial_goods_global_trade_amount = 0 }
					set_variable = { industrial_goods_global_trade_value = 0 }
					set_variable = { industrial_goods_global_trade_actual_value = 0 }
				#
				set_variable = { life_goods_base_price = 0 }
				set_variable = { life_goods_price = 0 }

				set_variable = { everyday_goods_base_price = 0 }
				set_variable = { everyday_goods_price = 0 }
				
				set_variable = { luxury_goods_base_price = 0 }
				set_variable = { luxury_goods_price = 0 }
				
				set_variable = { services_base_price = 0 }
				set_variable = { services_price = 0 }
				
				set_variable = { raw_goods_base_price = 0 }
				set_variable = { raw_goods_price = 0 }
				
				set_variable = { industrial_goods_base_price = 0 }
				set_variable = { industrial_goods_price = 0 }

				reset_supply = yes
				reset_demand = yes
			#
			set_variable = { actual_revenue = 0 }
			set_variable = { actual_income_tax_revenue = 0 }
			set_variable = { actual_spending = 0 }
			set_variable = { actual_infrastructure_spending = 0 }
			set_variable = { actual_construction_spending = 0 }
			set_variable = { actual_industrial_spending = 0 }

			set_variable = { gdp_amount = 0 }
			set_variable = { gdp_amount_this_year = 0 }
			set_variable = { gdp_amount_last_year = 0 }

			every_controlled_state = {
				#Pops/Govt get paid
					set_variable = { pops_spending = 0 }
					set_variable = { pops_goods_spending = 0 }

					add_to_variable = { pops_money = pops_earnings }
					#Upper Strata
					set_temp_variable = { tax_temp = aristocrats_earnings }
					add_to_temp_variable = { tax_temp = capitalists_earnings }
					multiply_temp_variable = { tax_temp = PREV.income_tax_upper_strata_percentage }
					divide_temp_variable = { tax_temp = 100 }
					subtract_from_variable = { pops_money = tax_temp }
					add_to_variable = { pops_spending = tax_temp }
					add_to_variable = { PREV.treasury = tax_temp }
					add_to_variable = { PREV.actual_income_tax_revenue = tax_temp }

					#Middle Strata
					set_temp_variable = { tax_temp = artisans_earnings }
					add_to_temp_variable = { tax_temp = professionals_earnings }
					add_to_temp_variable = { tax_temp = specialists_earnings }
					multiply_temp_variable = { tax_temp = PREV.income_tax_middle_strata_percentage }
					divide_temp_variable = { tax_temp = 100 }
					subtract_from_variable = { pops_money = tax_temp }
					add_to_variable = { pops_spending = tax_temp }
					add_to_variable = { PREV.treasury = tax_temp }
					add_to_variable = { PREV.actual_income_tax_revenue = tax_temp }

					#Lower Strata
					set_temp_variable = { tax_temp = rgos_earnings }
					add_to_temp_variable = { tax_temp = craftsmen_earnings }
					add_to_temp_variable = { tax_temp = clerks_earnings }
					multiply_temp_variable = { tax_temp = PREV.income_tax_lower_strata_percentage }
					divide_temp_variable = { tax_temp = 100 }
					subtract_from_variable = { pops_money = tax_temp }
					add_to_variable = { pops_spending = tax_temp }
					add_to_variable = { PREV.treasury = tax_temp }
					add_to_variable = { PREV.actual_income_tax_revenue = tax_temp }
				#
				#Reset
					set_variable = { life_goods_trade_amount = 0 } #Positive: Goods Bought / Negative: Goods Sold - Note, this only applies in this effect. It's always positive elsewhere.
					set_variable = { life_goods_trade_value = 0 } #Positive: Amount Recieved / Negative: Amount Paid

					set_variable = { everyday_goods_trade_amount = 0 }
					set_variable = { everyday_goods_trade_value = 0 }
					
					set_variable = { luxury_goods_trade_amount = 0 }
					set_variable = { luxury_goods_trade_value = 0 }
					
					set_variable = { services_trade_amount = 0 }
					set_variable = { services_trade_value = 0 }
					
					set_variable = { raw_goods_trade_amount = 0 }
					set_variable = { raw_goods_trade_value = 0 }
					
					set_variable = { industrial_goods_trade_amount = 0 }
					set_variable = { industrial_goods_trade_value = 0 }

					set_variable = { pops_earnings = 0 }

					set_variable = { artisans_earnings = 0 }
					set_variable = { pops_artisans_everyday_goods_sold = 0 }
					set_variable = { pops_artisans_luxury_goods_sold = 0 }
					set_variable = { pops_artisans_industrial_goods_sold = 0 }

					#set_variable = { aristocrats_earnings = 0 }
					set_variable = { rgos_earnings = 0 }
					set_variable = { pops_rgos_life_goods_sold = 0 }
					set_variable = { pops_rgos_raw_goods_sold = 0 }

					set_variable = { pops_services_sold = 0 }

					set_variable = { craftsmen_earnings = 0 }
					set_variable = { specialists_earnings = 0 }
					set_variable = { clerks_earnings = 0 }
					set_variable = { professionals_earnings = 0 }
					set_variable = { capitalists_earnings = 0 }

					set_variable = { soldiers_earnings = 0 }
					set_variable = { officers_earnings = 0 }

					set_variable = { factory_earnings = 0 }
					set_variable = { factory_spending = 0 }
					set_variable = { factory_everyday_goods_sold = 0 }
					set_variable = { factory_luxury_goods_sold = 0 }
					set_variable = { factory_industrial_goods_sold = 0 }
				#
				
				set_variable = { infrastructure_max_level = PREV.infrastructure_max_level }

				###
				#set_variable = { pops_money = pops_amount }
				#divide_variable = { pops_money = 10 }
				#set_variable = { factory_money = factory_money_limit }
				###

				#Industrial Subsidies
					set_temp_variable = { raw_goods_temp = factory_raw_goods_need }
					multiply_temp_variable = { raw_goods_temp = raw_goods_price }
					set_temp_variable = { industrial_goods_temp = factory_industrial_goods_need }
					multiply_temp_variable = { industrial_goods_temp = industrial_goods_price }

					set_temp_variable = { industrial_spending_temp = raw_goods_temp }
					add_to_temp_variable = { industrial_spending_temp = industrial_goods_temp }
					multiply_temp_variable = { industrial_spending_temp = PREV.industrial_subsidy_percentage }
					divide_temp_variable = { industrial_spending_temp = 100 }
					add_to_variable = { factory_money = industrial_spending_temp }
					subtract_from_variable = { PREV.treasury = industrial_spending_temp }
					add_to_variable = { PREV.actual_industrial_spending = construction_funds_temp }
				#

				update_modifiers_state_effects = yes
				
				#Demand will be calculated from the purchasing power and needs of factories, governments, and pops. National demand will be an accumulation of state demand.
				calculate_demand = yes #Do first

				update_production_maintenance = yes #Do just after Demand

				calculate_supply = yes #Do just after Production

				#Reset Goods Fulfilled
					set_variable = { pops_life_goods_fulfilled_percentage = 0 }
					set_variable = { pops_everyday_goods_fulfilled_percentage = 0 }
					set_variable = { pops_luxury_goods_fulfilled_percentage = 0 }
					set_variable = { pops_services_fulfilled_percentage = 0 }

					set_variable = { pops_artisans_raw_goods_fulfilled_percentage = 0 }

					set_variable = { factory_raw_goods_fulfilled_percentage = 0 }
					set_variable = { factory_industrial_goods_fulfilled_percentage = 0 }

					set_variable = { infrastructure_industrial_goods_fulfilled_percentage = 0 }
				#

				#Infra gets its money
					add_to_variable = { pops_earnings = infrastructure_money }

					set_variable = { infrastructure_money = infrastructure_industrial_goods_demand }
					multiply_variable = { infrastructure_money = industrial_goods_price }

					set_temp_variable = { govt_payment_temp = PREV.infrastructure_subsidy_percentage }
					multiply_temp_variable = { govt_payment_temp = infrastructure_money }
					divide_temp_variable = { govt_payment_temp = 100 }

					set_temp_variable = { pop_payment_temp = infrastructure_money }
					subtract_from_temp_variable = { pop_payment_temp = govt_payment_temp }

					subtract_from_variable = { pops_money = pop_payment_temp }
					add_to_variable = { pops_spending = pop_payment_temp }
					subtract_from_variable = { PREV.treasury = govt_payment_temp }
					add_to_variable = { PREV.actual_infrastructure_spending = govt_payment_temp }

				#
				
				#Construction
					#Infrastructure
						if = {
							limit = {
								has_state_flag = infrastructure_construction_government_subsidized
							}
							set_temp_variable = { infra_construction_funds_temp = global.infrastructure_construction_base_speed }
							multiply_temp_variable = { infra_construction_funds_temp = industrial_goods_price }
							multiply_temp_variable = { infra_construction_funds_temp = PREV.construction_spending_percentage }
							divide_temp_variable = { infra_construction_funds_temp = 100 }
							subtract_from_temp_variable = { infra_construction_funds_temp = infrastructure_investment_money }
							if = {
								limit = {
									check_variable = { infra_construction_funds_temp > 0 }
								}
								add_to_variable = { infrastructure_construction_investment_money = infra_construction_funds_temp }
								subtract_from_variable = { PREV.treasury = infra_construction_funds_temp }
								add_to_variable = { PREV.actual_construction_spending = infra_construction_funds_temp }
							}
						}
					#
					#Everyday Goods Factory
						if = {
							limit = {
								has_state_flag = factory_everyday_goods_construction_government_subsidized
							}
							set_temp_variable = { construction_funds_temp = global.factory_everyday_goods_construction_base_speed }
							multiply_temp_variable = { construction_funds_temp = industrial_goods_price }
							multiply_temp_variable = { construction_funds_temp = PREV.construction_spending_percentage }
							divide_temp_variable = { construction_funds_temp = 100 }
							subtract_from_temp_variable = { construction_funds_temp = factory_everyday_goods_construction_investment_money }
							if = {
								limit = {
									check_variable = { construction_funds_temp > 0 }
								}
								add_to_variable = { factory_everyday_goods_construction_investment_money = construction_funds_temp }
								subtract_from_variable = { PREV.treasury = construction_funds_temp }
								add_to_variable = { PREV.actual_construction_spending = construction_funds_temp }
							}
						}
					#
					#Luxury Goods Factory
						if = {
							limit = {
								has_state_flag = factory_luxury_goods_construction_government_subsidized
							}
							set_temp_variable = { construction_funds_temp = global.factory_luxury_goods_construction_base_speed }
							multiply_temp_variable = { construction_funds_temp = industrial_goods_price }
							multiply_temp_variable = { construction_funds_temp = PREV.construction_spending_percentage }
							divide_temp_variable = { construction_funds_temp = 100 }
							subtract_from_temp_variable = { construction_funds_temp = factory_luxury_goods_construction_investment_money }
							if = {
								limit = {
									check_variable = { construction_funds_temp > 0 }
								}
								add_to_variable = { factory_luxury_goods_construction_investment_money = construction_funds_temp }
								subtract_from_variable = { PREV.treasury = construction_funds_temp }
								add_to_variable = { PREV.actual_construction_spending = construction_funds_temp }
							}
						}
					#
					#Industrial Goods Factory
						if = {
							limit = {
								has_state_flag = factory_industrial_goods_construction_government_subsidized
							}
							set_temp_variable = { construction_funds_temp = global.factory_industrial_goods_construction_base_speed }
							multiply_temp_variable = { construction_funds_temp = industrial_goods_price }
							multiply_temp_variable = { construction_funds_temp = PREV.construction_spending_percentage }
							divide_temp_variable = { construction_funds_temp = 100 }
							subtract_from_temp_variable = { construction_funds_temp = factory_industrial_goods_construction_investment_money }
							if = {
								limit = {
									check_variable = { construction_funds_temp > 0 }
								}
								add_to_variable = { factory_industrial_goods_construction_investment_money = construction_funds_temp }
								subtract_from_variable = { PREV.treasury = construction_funds_temp }
								add_to_variable = { PREV.actual_construction_spending = construction_funds_temp }
							}
						}
					#
				#

				#Minimum goods supply to be in a state
					#life_goods
						set_variable = { life_goods_supply_min = life_goods_supply } #Minimum number of goods the state will keep
						multiply_variable = { life_goods_supply_min = 0.2 }

						set_temp_variable = { demand_temp = life_goods_demand }
						divide_temp_variable = { demand_temp = 2 }
						if = {
							limit = {
								check_variable = { demand_temp < life_goods_supply_min }
							}
							set_variable = { life_goods_supply_min = demand_temp }
						}

					#everyday_goods
						set_variable = { everyday_goods_supply_min = everyday_goods_supply } #Minimum number of goods the state will keep
						multiply_variable = { everyday_goods_supply_min = 0.2 }

						set_temp_variable = { demand_temp = everyday_goods_demand }
						divide_temp_variable = { demand_temp = 2 }
						if = {
							limit = {
								check_variable = { demand_temp < everyday_goods_supply_min }
							}
							set_variable = { everyday_goods_supply_min = demand_temp }
						}

					#luxury_goods
						set_variable = { luxury_goods_supply_min = luxury_goods_supply } #Minimum number of goods the state will keep
						multiply_variable = { luxury_goods_supply_min = 0.2 }

						set_temp_variable = { demand_temp = luxury_goods_demand }
						divide_temp_variable = { demand_temp = 2 }
						if = {
							limit = {
								check_variable = { demand_temp < luxury_goods_supply_min }
							}
							set_variable = { luxury_goods_supply_min = demand_temp }
						}

					#services
						set_variable = { services_supply_min = services_supply } #Minimum number of goods the state will keep
						multiply_variable = { services_supply_min = 0.2 }

						set_temp_variable = { demand_temp = services_demand }
						divide_temp_variable = { demand_temp = 2 }
						if = {
							limit = {
								check_variable = { demand_temp < services_supply_min }
							}
							set_variable = { services_supply_min = demand_temp }
						}

					#raw_goods
						set_variable = { raw_goods_supply_min = raw_goods_supply } #Minimum number of goods the state will keep
						multiply_variable = { raw_goods_supply_min = 0.2 }

						set_temp_variable = { demand_temp = raw_goods_demand }
						divide_temp_variable = { demand_temp = 2 }
						if = {
							limit = {
								check_variable = { demand_temp < raw_goods_supply_min }
							}
							set_variable = { raw_goods_supply_min = demand_temp }
						}

					#industrial_goods
						set_variable = { industrial_goods_supply_min = industrial_goods_supply } #Minimum number of goods the state will keep
						multiply_variable = { industrial_goods_supply_min = 0.2 }

						set_temp_variable = { demand_temp = industrial_goods_demand }
						divide_temp_variable = { demand_temp = 2 }
						if = {
							limit = {
								check_variable = { demand_temp < industrial_goods_supply_min }
							}
							set_variable = { industrial_goods_supply_min = demand_temp }
						}

				#

				#Adds up the state's price to the national scope
					set_temp_variable = { goods_price_temp = life_goods_price }
					multiply_temp_variable = { goods_price_temp = life_goods_supply }
					add_to_variable = { PREV.life_goods_price = goods_price_temp }
					
					set_temp_variable = { goods_price_temp = everyday_goods_price }
					multiply_temp_variable = { goods_price_temp = everyday_goods_supply }
					add_to_variable = { PREV.everyday_goods_price = goods_price_temp }
					
					set_temp_variable = { goods_price_temp = luxury_goods_price }
					multiply_temp_variable = { goods_price_temp = luxury_goods_supply }
					add_to_variable = { PREV.luxury_goods_price = goods_price_temp }
					
					set_temp_variable = { goods_price_temp = services_price }
					multiply_temp_variable = { goods_price_temp = services_supply }
					add_to_variable = { PREV.services_price = goods_price_temp }
					
					set_temp_variable = { goods_price_temp = raw_goods_price }
					multiply_temp_variable = { goods_price_temp = raw_goods_supply }
					add_to_variable = { PREV.raw_goods_price = goods_price_temp }
					
					set_temp_variable = { goods_price_temp = industrial_goods_price }
					multiply_temp_variable = { goods_price_temp = industrial_goods_supply }
					add_to_variable = { PREV.industrial_goods_price = goods_price_temp }

					#Base Price
					set_temp_variable = { goods_base_price_temp = life_goods_base_price }
					multiply_temp_variable = { goods_base_price_temp = life_goods_supply }
					add_to_variable = { PREV.life_goods_base_price = goods_base_price_temp }
					
					set_temp_variable = { goods_base_price_temp = everyday_goods_base_price }
					multiply_temp_variable = { goods_base_price_temp = everyday_goods_supply }
					add_to_variable = { PREV.everyday_goods_base_price = goods_base_price_temp }
					
					set_temp_variable = { goods_base_price_temp = luxury_goods_base_price }
					multiply_temp_variable = { goods_base_price_temp = luxury_goods_supply }
					add_to_variable = { PREV.luxury_goods_base_price = goods_base_price_temp }
					
					set_temp_variable = { goods_base_price_temp = services_base_price }
					multiply_temp_variable = { goods_base_price_temp = services_supply }
					add_to_variable = { PREV.services_base_price = goods_base_price_temp }
					
					set_temp_variable = { goods_base_price_temp = raw_goods_base_price }
					multiply_temp_variable = { goods_base_price_temp = raw_goods_supply }
					add_to_variable = { PREV.raw_goods_base_price = goods_base_price_temp }
					
					set_temp_variable = { goods_base_price_temp = industrial_goods_base_price }
					multiply_temp_variable = { goods_base_price_temp = industrial_goods_supply }
					add_to_variable = { PREV.industrial_goods_base_price = goods_base_price_temp }
				#

				#States get added to the trade array and get sorted by price
                    #life_goods
                        for_each_loop = {
                            array = PREV.life_goods_trade_price_array
                            index = ii
                            value = vv
                            break = bb

                            if = {
                                limit = {
                                    check_variable = { vv > life_goods_price }
                                }
                                add_to_array = { 
                                    array = PREV.life_goods_trade_price_array 
                                    value = life_goods_price
                                    index = ii
                                }
                                add_to_array = { 
                                    array = PREV.life_goods_trade_state_array 
                                    value = THIS
                                    index = ii
                                }
                                set_temp_variable = { bb = 1 }
                            }
                        }
                        if = {
                            limit = {
                                check_variable = { bb = 0 }
                            }
                            add_to_array = { PREV.life_goods_trade_price_array = life_goods_price }
                            add_to_array = { PREV.life_goods_trade_state_array = THIS }
                        }

                    #everyday_goods
                        for_each_loop = {
                            array = PREV.everyday_goods_trade_price_array
                            index = ii
                            value = vv
                            break = bb

                            if = {
                                limit = {
                                    check_variable = { vv > everyday_goods_price }
                                }
                                add_to_array = { 
                                    array = PREV.everyday_goods_trade_price_array 
                                    value = everyday_goods_price
                                    index = ii
                                }
                                add_to_array = { 
                                    array = PREV.everyday_goods_trade_state_array 
                                    value = THIS
                                    index = ii
                                }
                                set_temp_variable = { bb = 1 }
                            }
                        }
                        if = {
                            limit = {
                                check_variable = { bb = 0 }
                            }
                            add_to_array = { PREV.everyday_goods_trade_price_array = everyday_goods_price }
                            add_to_array = { PREV.everyday_goods_trade_state_array = THIS }
                        }

                    #luxury_goods
                        for_each_loop = {
                            array = PREV.luxury_goods_trade_price_array
                            index = ii
                            value = vv
                            break = bb

                            if = {
                                limit = {
                                    check_variable = { vv > luxury_goods_price }
                                }
                                add_to_array = { 
                                    array = PREV.luxury_goods_trade_price_array 
                                    value = luxury_goods_price
                                    index = ii
                                }
                                add_to_array = { 
                                    array = PREV.luxury_goods_trade_state_array 
                                    value = THIS
                                    index = ii
                                }
                                set_temp_variable = { bb = 1 }
                            }
                        }
                        if = {
                            limit = {
                                check_variable = { bb = 0 }
                            }
                            add_to_array = { PREV.luxury_goods_trade_price_array = luxury_goods_price }
                            add_to_array = { PREV.luxury_goods_trade_state_array = THIS }
                        }

                    #services
                        for_each_loop = {
                            array = PREV.services_trade_price_array
                            index = ii
                            value = vv
                            break = bb

                            if = {
                                limit = {
                                    check_variable = { vv > services_price }
                                }
                                add_to_array = { 
                                    array = PREV.services_trade_price_array 
                                    value = services_price
                                    index = ii
                                }
                                add_to_array = { 
                                    array = PREV.services_trade_state_array 
                                    value = THIS
                                    index = ii
                                }
                                set_temp_variable = { bb = 1 }
                            }
                        }
                        if = {
                            limit = {
                                check_variable = { bb = 0 }
                            }
                            add_to_array = { PREV.services_trade_price_array = services_price }
                            add_to_array = { PREV.services_trade_state_array = THIS }
                        }

                    #raw_goods
                        for_each_loop = {
                            array = PREV.raw_goods_trade_price_array
                            index = ii
                            value = vv
                            break = bb

                            if = {
                                limit = {
                                    check_variable = { vv > raw_goods_price }
                                }
                                add_to_array = { 
                                    array = PREV.raw_goods_trade_price_array 
                                    value = raw_goods_price
                                    index = ii
                                }
                                add_to_array = { 
                                    array = PREV.raw_goods_trade_state_array 
                                    value = THIS
                                    index = ii
                                }
                                set_temp_variable = { bb = 1 }
                            }
                        }
                        if = {
                            limit = {
                                check_variable = { bb = 0 }
                            }
                            add_to_array = { PREV.raw_goods_trade_price_array = raw_goods_price }
                            add_to_array = { PREV.raw_goods_trade_state_array = THIS }
                        }

                    #industrial_goods
                        for_each_loop = {
                            array = PREV.industrial_goods_trade_price_array
                            index = ii
                            value = vv
                            break = bb

                            if = {
                                limit = {
                                    check_variable = { vv > industrial_goods_price }
                                }
                                add_to_array = { 
                                    array = PREV.industrial_goods_trade_price_array 
                                    value = industrial_goods_price
                                    index = ii
                                }
                                add_to_array = { 
                                    array = PREV.industrial_goods_trade_state_array 
                                    value = THIS
                                    index = ii
                                }
                                set_temp_variable = { bb = 1 }
                            }
                        }
                        if = {
                            limit = {
                                check_variable = { bb = 0 }
                            }
                            add_to_array = { PREV.industrial_goods_trade_price_array = industrial_goods_price }
                            add_to_array = { PREV.industrial_goods_trade_state_array = THIS }
                        }

				#
			}

			#Divide the Price/Base Price by supply to get actual price
				divide_variable = { life_goods_price = life_goods_supply }
				if = {
					limit = {
						check_variable = { life_goods_price < life_goods_trade_price_array^0 }
					}
					set_variable = { life_goods_price = life_goods_trade_price_array^0 }
				}
				
				divide_variable = { everyday_goods_price = everyday_goods_supply }
				if = {
					limit = {
						check_variable = { everyday_goods_price < everyday_goods_trade_price_array^0 }
					}
					set_variable = { everyday_goods_price = everyday_goods_trade_price_array^0 }
				}
				
				divide_variable = { luxury_goods_price = luxury_goods_supply }
				if = {
					limit = {
						check_variable = { luxury_goods_price < luxury_goods_trade_price_array^0 }
					}
					set_variable = { luxury_goods_price = luxury_goods_trade_price_array^0 }
				}
				
				divide_variable = { services_price = services_supply }
				if = {
					limit = {
						check_variable = { services_price < services_trade_price_array^0 }
					}
					set_variable = { services_price = services_trade_price_array^0 }
				}
				
				divide_variable = { raw_goods_price = raw_goods_supply }
				if = {
					limit = {
						check_variable = { raw_goods_price < raw_goods_trade_price_array^0 }
					}
					set_variable = { raw_goods_price = raw_goods_trade_price_array^0 }
				}
				
				divide_variable = { industrial_goods_price = industrial_goods_supply }
				if = {
					limit = {
						check_variable = { industrial_goods_price < industrial_goods_trade_price_array^0 }
					}
					set_variable = { industrial_goods_price = industrial_goods_trade_price_array^0 }
				}
			#

			#Countries get added to the global trade array and get sorted by price
				#life_goods
					for_each_loop = {
						array = global.life_goods_global_trade_price_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								check_variable = { vv > life_goods_price }
							}
							add_to_array = { 
								array = global.life_goods_global_trade_price_array 
								value = life_goods_price
								index = ii
							}
							add_to_array = { 
								array = global.life_goods_global_trade_country_array 
								value = THIS
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.life_goods_global_trade_price_array = life_goods_price }
						add_to_array = { global.life_goods_global_trade_country_array = THIS }
					}

				#everyday_goods
					for_each_loop = {
						array = global.everyday_goods_global_trade_price_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								check_variable = { vv > everyday_goods_price }
							}
							add_to_array = { 
								array = global.everyday_goods_global_trade_price_array 
								value = everyday_goods_price
								index = ii
							}
							add_to_array = { 
								array = global.everyday_goods_global_trade_country_array 
								value = THIS
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.everyday_goods_global_trade_price_array = everyday_goods_price }
						add_to_array = { global.everyday_goods_global_trade_country_array = THIS }
					}

				#luxury_goods
					for_each_loop = {
						array = global.luxury_goods_global_trade_price_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								check_variable = { vv > luxury_goods_price }
							}
							add_to_array = { 
								array = global.luxury_goods_global_trade_price_array 
								value = luxury_goods_price
								index = ii
							}
							add_to_array = { 
								array = global.luxury_goods_global_trade_country_array 
								value = THIS
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.luxury_goods_global_trade_price_array = luxury_goods_price }
						add_to_array = { global.luxury_goods_global_trade_country_array = THIS }
					}

				#services
					for_each_loop = {
						array = global.services_global_trade_price_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								check_variable = { vv > services_price }
							}
							add_to_array = { 
								array = global.services_global_trade_price_array 
								value = services_price
								index = ii
							}
							add_to_array = { 
								array = global.services_global_trade_country_array 
								value = THIS
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.services_global_trade_price_array = services_price }
						add_to_array = { global.services_global_trade_country_array = THIS }
					}

				#raw_goods
					for_each_loop = {
						array = global.raw_goods_global_trade_price_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								check_variable = { vv > raw_goods_price }
							}
							add_to_array = { 
								array = global.raw_goods_global_trade_price_array 
								value = raw_goods_price
								index = ii
							}
							add_to_array = { 
								array = global.raw_goods_global_trade_country_array 
								value = THIS
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.raw_goods_global_trade_price_array = raw_goods_price }
						add_to_array = { global.raw_goods_global_trade_country_array = THIS }
					}

				#industrial_goods
					for_each_loop = {
						array = global.industrial_goods_global_trade_price_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								check_variable = { vv > industrial_goods_price }
							}
							add_to_array = { 
								array = global.industrial_goods_global_trade_price_array 
								value = industrial_goods_price
								index = ii
							}
							add_to_array = { 
								array = global.industrial_goods_global_trade_country_array 
								value = THIS
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.industrial_goods_global_trade_price_array = industrial_goods_price }
						add_to_array = { global.industrial_goods_global_trade_country_array = THIS }
					}

			#


		}

		for_each_scope_loop = {
			array = global.econ_order_array

			#INTERSTATE TRADE
				#States with excess demand to supply will try to buy goods. States with highest price get first "bite"
				#NOTE: It is assumed that all imported & exported supply & demand will be fulfilled so to eliminate intermediaries in the states and making the system more complicated
						#than it needs to be

						#I really don't need to write down these notes, do I. I'm probably gonna be the only one reading them lmao. Hello later me. Howya doin? 
						# - Doing fine. Thanks for writing this, past me, btw. Really appreciate it while I'm making the international trade system.

				#Trade Distance: State to State, Transport Cost


                #life_goods
                    #Loops from highest price states to lowest
                    set_temp_variable = { start_temp = life_goods_trade_state_array^num }
                    subtract_from_temp_variable = { start_temp = 1 }
                    for_loop_effect = {
                        start = start_temp
                        end = 0
                        compare = greater_than_or_equals
                        add = -1
                        value = ii


                        #Scopes to state
                        var:life_goods_trade_state_array^ii = {
                            
                            #Checks if the state actually has more demand than supply. If it doesn't, this is pointless
                                set_temp_variable = { buy_amount_left = life_goods_demand }

                                #Loops thru cheapest states to buy from
                                for_each_loop = {
                                    array = PREV.life_goods_trade_state_array
                                    value = state_temp
                                    index = iii
                                    break = cheapest_brk

                                    #Checks if the state is cheaper & transport is affordabole 
                                    #TODO - Transport cost
                                    if = {
                                        limit = {
                                            check_variable = { state_temp:life_goods_price < life_goods_price }
                                            check_variable = { buy_amount_left > 0 }
                                        }
										if = {
											limit = {
												check_variable = { state_temp:life_goods_supply_min < state_temp:life_goods_supply }
											}
											#Transport Cost
											var:state_temp = {
												set_variable = { PREV.transport_cost = distance_to@PREV } #This needs to be a normal variable
											}
											divide_variable = { transport_cost = global.base_transport_cost_divisor }
											set_temp_variable = { modifier_temp = transport_cost_effect }
											add_to_temp_variable = { modifier_temp = 1 }
											multiply_variable = { transport_cost = modifier_temp }
											add_to_variable = { transport_cost = 1 }

											set_temp_variable = { true_price = state_temp:life_goods_price }
											multiply_temp_variable = { true_price = transport_cost }
											if = {
												limit = {
													check_variable = { true_price < life_goods_price }
												}
												#Do Trade
												set_temp_variable = { u = true_price }
												multiply_temp_variable = { u = state_temp:life_goods_demand }
												divide_temp_variable = { u = life_goods_price }
												divide_temp_variable = { u = life_goods_demand }
												
												set_temp_variable = { buy_amount = life_goods_supply }
												multiply_temp_variable = { buy_amount = u }
												multiply_temp_variable = { buy_amount = -1 }
												add_to_temp_variable = { buy_amount = state_temp:life_goods_supply }
												add_to_temp_variable = { u = 1 }
												divide_temp_variable = { buy_amount = u }
												
												multiply_temp_variable = { buy_amount = 0.7 }

												multiply_temp_variable = { buy_amount = transport_cost }

												set_temp_variable = { good_max_temp = state_temp:life_goods_supply }
												subtract_from_temp_variable = { good_max_temp = state_temp:life_goods_supply_min }
												
												clamp_temp_variable = {
													var = buy_amount
													max = good_max_temp
												}
												clamp_temp_variable = {
													var = buy_amount
													min = 0
												}
												set_temp_variable = { cost_temp = buy_amount }
												multiply_temp_variable = { cost_temp = state_temp:life_goods_price }

												subtract_from_variable = { state_temp:life_goods_supply = buy_amount }
												subtract_from_variable = { state_temp:life_goods_trade_amount = buy_amount }
												add_to_variable = { state_temp:life_goods_trade_value = cost_temp }

												divide_temp_variable = { buy_amount = transport_cost }

												subtract_from_temp_variable = { buy_amount_left = buy_amount }
												add_to_variable = { life_goods_supply = buy_amount }
												add_to_variable = { life_goods_trade_amount = buy_amount }
												subtract_from_variable = { life_goods_trade_value = cost_temp }
												add_to_variable = { PREV.life_goods_trade_amount = buy_amount }
												add_to_variable = { PREV.life_goods_trade_value = cost_temp }
											}
										}
                                    }
                                    else = {
                                        set_temp_variable = { cheapest_brk = 1 }
                                    }
                                }
                        }
                    }

                #everyday_goods
                    #Loops from highest price states to lowest
                    set_temp_variable = { start_temp = everyday_goods_trade_state_array^num }
                    subtract_from_temp_variable = { start_temp = 1 }
                    for_loop_effect = {
                        start = start_temp
                        end = 0
                        compare = greater_than_or_equals
                        add = -1
                        value = ii


                        #Scopes to state
                        var:everyday_goods_trade_state_array^ii = {
                            
                            #Checks if the state actually has more demand than supply. If it doesn't, this is pointless
                                set_temp_variable = { buy_amount_left = everyday_goods_demand }

                                #Loops thru cheapest states to buy from
                                for_each_loop = {
                                    array = PREV.everyday_goods_trade_state_array
                                    value = state_temp
                                    index = iii
                                    break = cheapest_brk

                                    #Checks if the state is cheaper & transport is affordabole 
                                    #TODO - Transport cost
                                    if = {
                                        limit = {
                                            check_variable = { state_temp:everyday_goods_price < everyday_goods_price }
                                            check_variable = { buy_amount_left > 0 }
                                        }
										if = {
											limit = {
												check_variable = { state_temp:everyday_goods_supply_min < state_temp:everyday_goods_supply }
											}
											#Transport Cost
											var:state_temp = {
												set_variable = { PREV.transport_cost = distance_to@PREV } #This needs to be a normal variable
											}
											divide_variable = { transport_cost = global.base_transport_cost_divisor }
											set_temp_variable = { modifier_temp = transport_cost_effect }
											add_to_temp_variable = { modifier_temp = 1 }
											multiply_variable = { transport_cost = modifier_temp }
											add_to_variable = { transport_cost = 1 }

											set_temp_variable = { true_price = state_temp:everyday_goods_price }
											multiply_temp_variable = { true_price = transport_cost }
											if = {
												limit = {
													check_variable = { true_price < everyday_goods_price }
												}
												#Do Trade
												set_temp_variable = { u = true_price }
												multiply_temp_variable = { u = state_temp:everyday_goods_demand }
												divide_temp_variable = { u = everyday_goods_price }
												divide_temp_variable = { u = everyday_goods_demand }
												
												set_temp_variable = { buy_amount = everyday_goods_supply }
												multiply_temp_variable = { buy_amount = u }
												multiply_temp_variable = { buy_amount = -1 }
												add_to_temp_variable = { buy_amount = state_temp:everyday_goods_supply }
												add_to_temp_variable = { u = 1 }
												divide_temp_variable = { buy_amount = u }
												
												multiply_temp_variable = { buy_amount = 0.7 }

												multiply_temp_variable = { buy_amount = transport_cost }

												set_temp_variable = { good_max_temp = state_temp:everyday_goods_supply }
												subtract_from_temp_variable = { good_max_temp = state_temp:everyday_goods_supply_min }
												
												clamp_temp_variable = {
													var = buy_amount
													max = good_max_temp
												}
												clamp_temp_variable = {
													var = buy_amount
													min = 0
												}
												set_temp_variable = { cost_temp = buy_amount }
												multiply_temp_variable = { cost_temp = state_temp:everyday_goods_price }

												subtract_from_variable = { state_temp:everyday_goods_supply = buy_amount }
												subtract_from_variable = { state_temp:everyday_goods_trade_amount = buy_amount }
												add_to_variable = { state_temp:everyday_goods_trade_value = cost_temp }

												divide_temp_variable = { buy_amount = transport_cost }

												subtract_from_temp_variable = { buy_amount_left = buy_amount }
												add_to_variable = { everyday_goods_supply = buy_amount }
												add_to_variable = { everyday_goods_trade_amount = buy_amount }
												subtract_from_variable = { everyday_goods_trade_value = cost_temp }
												add_to_variable = { PREV.everyday_goods_trade_amount = buy_amount }
												add_to_variable = { PREV.everyday_goods_trade_value = cost_temp }
											}
										}
                                    }
                                    else = {
                                        set_temp_variable = { cheapest_brk = 1 }
                                    }
                                }
                        }
                    }
                #luxury_goods
                    #Loops from highest price states to lowest
                    set_temp_variable = { start_temp = luxury_goods_trade_state_array^num }
                    subtract_from_temp_variable = { start_temp = 1 }
                    for_loop_effect = {
                        start = start_temp
                        end = 0
                        compare = greater_than_or_equals
                        add = -1
                        value = ii


                        #Scopes to state
                        var:luxury_goods_trade_state_array^ii = {
                            
                            #Checks if the state actually has more demand than supply. If it doesn't, this is pointless
                                set_temp_variable = { buy_amount_left = luxury_goods_demand }

                                #Loops thru cheapest states to buy from
                                for_each_loop = {
                                    array = PREV.luxury_goods_trade_state_array
                                    value = state_temp
                                    index = iii
                                    break = cheapest_brk

                                    #Checks if the state is cheaper & transport is affordabole 
                                    #TODO - Transport cost
                                    if = {
                                        limit = {
                                            check_variable = { state_temp:luxury_goods_price < luxury_goods_price }
                                            check_variable = { buy_amount_left > 0 }
                                        }
										if = {
											limit = {
												check_variable = { state_temp:luxury_goods_supply_min < state_temp:luxury_goods_supply }
											}
											#Transport Cost
											var:state_temp = {
												set_variable = { PREV.transport_cost = distance_to@PREV } #This needs to be a normal variable
											}
											divide_variable = { transport_cost = global.base_transport_cost_divisor }
											set_temp_variable = { modifier_temp = transport_cost_effect }
											add_to_temp_variable = { modifier_temp = 1 }
											multiply_variable = { transport_cost = modifier_temp }
											add_to_variable = { transport_cost = 1 }

											set_temp_variable = { true_price = state_temp:luxury_goods_price }
											multiply_temp_variable = { true_price = transport_cost }
											if = {
												limit = {
													check_variable = { true_price < luxury_goods_price }
												}
												#Do Trade
												set_temp_variable = { u = true_price }
												multiply_temp_variable = { u = state_temp:luxury_goods_demand }
												divide_temp_variable = { u = luxury_goods_price }
												divide_temp_variable = { u = luxury_goods_demand }
												
												set_temp_variable = { buy_amount = luxury_goods_supply }
												multiply_temp_variable = { buy_amount = u }
												multiply_temp_variable = { buy_amount = -1 }
												add_to_temp_variable = { buy_amount = state_temp:luxury_goods_supply }
												add_to_temp_variable = { u = 1 }
												divide_temp_variable = { buy_amount = u }
												
												multiply_temp_variable = { buy_amount = 0.7 }

												multiply_temp_variable = { buy_amount = transport_cost }

												set_temp_variable = { good_max_temp = state_temp:luxury_goods_supply }
												subtract_from_temp_variable = { good_max_temp = state_temp:luxury_goods_supply_min }
												
												clamp_temp_variable = {
													var = buy_amount
													max = good_max_temp
												}
												clamp_temp_variable = {
													var = buy_amount
													min = 0
												}
												set_temp_variable = { cost_temp = buy_amount }
												multiply_temp_variable = { cost_temp = state_temp:luxury_goods_price }

												subtract_from_variable = { state_temp:luxury_goods_supply = buy_amount }
												subtract_from_variable = { state_temp:luxury_goods_trade_amount = buy_amount }
												add_to_variable = { state_temp:luxury_goods_trade_value = cost_temp }

												divide_temp_variable = { buy_amount = transport_cost }

												subtract_from_temp_variable = { buy_amount_left = buy_amount }
												add_to_variable = { luxury_goods_supply = buy_amount }
												add_to_variable = { luxury_goods_trade_amount = buy_amount }
												subtract_from_variable = { luxury_goods_trade_value = cost_temp }
												add_to_variable = { PREV.luxury_goods_trade_amount = buy_amount }
												add_to_variable = { PREV.luxury_goods_trade_value = cost_temp }
											}
										}
                                    }
                                    else = {
                                        set_temp_variable = { cheapest_brk = 1 }
                                    }
                                }
                        }
                    }

                #services
                    #Loops from highest price states to lowest
                    set_temp_variable = { start_temp = services_trade_state_array^num }
                    subtract_from_temp_variable = { start_temp = 1 }
                    for_loop_effect = {
                        start = start_temp
                        end = 0
                        compare = greater_than_or_equals
                        add = -1
                        value = ii


                        #Scopes to state
                        var:services_trade_state_array^ii = {
                            
                            #Checks if the state actually has more demand than supply. If it doesn't, this is pointless
                                set_temp_variable = { buy_amount_left = services_demand }

                                #Loops thru cheapest states to buy from
                                for_each_loop = {
                                    array = PREV.services_trade_state_array
                                    value = state_temp
                                    index = iii
                                    break = cheapest_brk

                                    #Checks if the state is cheaper & transport is affordabole 
                                    #TODO - Transport cost
                                    if = {
                                        limit = {
                                            check_variable = { state_temp:services_price < services_price }
                                            check_variable = { buy_amount_left > 0 }
                                        }
										if = {
											limit = {
												check_variable = { state_temp:services_supply_min < state_temp:services_supply }
											}
											#Transport Cost
											var:state_temp = {
												set_variable = { PREV.transport_cost = distance_to@PREV } #This needs to be a normal variable
											}
											divide_variable = { transport_cost = global.base_transport_cost_divisor }
											set_temp_variable = { modifier_temp = transport_cost_effect }
											add_to_temp_variable = { modifier_temp = 1 }
											multiply_variable = { transport_cost = modifier_temp }
											add_to_variable = { transport_cost = 1 }

											set_temp_variable = { true_price = state_temp:services_price }
											multiply_temp_variable = { true_price = transport_cost }
											if = {
												limit = {
													check_variable = { true_price < services_price }
												}
												#Do Trade
												set_temp_variable = { u = true_price }
												multiply_temp_variable = { u = state_temp:services_demand }
												divide_temp_variable = { u = services_price }
												divide_temp_variable = { u = services_demand }
												
												set_temp_variable = { buy_amount = services_supply }
												multiply_temp_variable = { buy_amount = u }
												multiply_temp_variable = { buy_amount = -1 }
												add_to_temp_variable = { buy_amount = state_temp:services_supply }
												add_to_temp_variable = { u = 1 }
												divide_temp_variable = { buy_amount = u }
												
												multiply_temp_variable = { buy_amount = 0.7 }

												multiply_temp_variable = { buy_amount = transport_cost }

												set_temp_variable = { good_max_temp = state_temp:services_supply }
												subtract_from_temp_variable = { good_max_temp = state_temp:services_supply_min }
												
												clamp_temp_variable = {
													var = buy_amount
													max = good_max_temp
												}
												clamp_temp_variable = {
													var = buy_amount
													min = 0
												}
												set_temp_variable = { cost_temp = buy_amount }
												multiply_temp_variable = { cost_temp = state_temp:services_price }

												subtract_from_variable = { state_temp:services_supply = buy_amount }
												subtract_from_variable = { state_temp:services_trade_amount = buy_amount }
												add_to_variable = { state_temp:services_trade_value = cost_temp }

												divide_temp_variable = { buy_amount = transport_cost }

												subtract_from_temp_variable = { buy_amount_left = buy_amount }
												add_to_variable = { services_supply = buy_amount }
												add_to_variable = { services_trade_amount = buy_amount }
												subtract_from_variable = { services_trade_value = cost_temp }
												add_to_variable = { PREV.services_trade_amount = buy_amount }
												add_to_variable = { PREV.services_trade_value = cost_temp }
											}
										}
                                    }
                                    else = {
                                        set_temp_variable = { cheapest_brk = 1 }
                                    }
                                }
                        }
                    }

                #raw_goods
                    #Loops from highest price states to lowest
                    set_temp_variable = { start_temp = raw_goods_trade_state_array^num }
                    subtract_from_temp_variable = { start_temp = 1 }
                    for_loop_effect = {
                        start = start_temp
                        end = 0
                        compare = greater_than_or_equals
                        add = -1
                        value = ii


                        #Scopes to state
                        var:raw_goods_trade_state_array^ii = {
                            
                            #Checks if the state actually has more demand than supply. If it doesn't, this is pointless
                                set_temp_variable = { buy_amount_left = raw_goods_demand }

                                #Loops thru cheapest states to buy from
                                for_each_loop = {
                                    array = PREV.raw_goods_trade_state_array
                                    value = state_temp
                                    index = iii
                                    break = cheapest_brk

                                    #Checks if the state is cheaper & transport is affordabole 
                                    #TODO - Transport cost
                                    if = {
                                        limit = {
                                            check_variable = { state_temp:raw_goods_price < raw_goods_price }
                                            check_variable = { buy_amount_left > 0 }
                                        }
										if = {
											limit = {
												check_variable = { state_temp:raw_goods_supply_min < state_temp:raw_goods_supply }
											}
											#Transport Cost
											var:state_temp = {
												set_variable = { PREV.transport_cost = distance_to@PREV } #This needs to be a normal variable
											}
											divide_variable = { transport_cost = global.base_transport_cost_divisor }
											set_temp_variable = { modifier_temp = transport_cost_effect }
											add_to_temp_variable = { modifier_temp = 1 }
											multiply_variable = { transport_cost = modifier_temp }
											add_to_variable = { transport_cost = 1 }

											set_temp_variable = { true_price = state_temp:raw_goods_price }
											multiply_temp_variable = { true_price = transport_cost }
											if = {
												limit = {
													check_variable = { true_price < raw_goods_price }
												}
												#Do Trade
												set_temp_variable = { u = true_price }
												multiply_temp_variable = { u = state_temp:raw_goods_demand }
												divide_temp_variable = { u = raw_goods_price }
												divide_temp_variable = { u = raw_goods_demand }
												
												set_temp_variable = { buy_amount = raw_goods_supply }
												multiply_temp_variable = { buy_amount = u }
												multiply_temp_variable = { buy_amount = -1 }
												add_to_temp_variable = { buy_amount = state_temp:raw_goods_supply }
												add_to_temp_variable = { u = 1 }
												divide_temp_variable = { buy_amount = u }
												
												multiply_temp_variable = { buy_amount = 0.7 }

												multiply_temp_variable = { buy_amount = transport_cost }

												set_temp_variable = { good_max_temp = state_temp:raw_goods_supply }
												subtract_from_temp_variable = { good_max_temp = state_temp:raw_goods_supply_min }
												
												clamp_temp_variable = {
													var = buy_amount
													max = good_max_temp
												}
												clamp_temp_variable = {
													var = buy_amount
													min = 0
												}
												set_temp_variable = { cost_temp = buy_amount }
												multiply_temp_variable = { cost_temp = state_temp:raw_goods_price }

												subtract_from_variable = { state_temp:raw_goods_supply = buy_amount }
												subtract_from_variable = { state_temp:raw_goods_trade_amount = buy_amount }
												add_to_variable = { state_temp:raw_goods_trade_value = cost_temp }

												divide_temp_variable = { buy_amount = transport_cost }

												subtract_from_temp_variable = { buy_amount_left = buy_amount }
												add_to_variable = { raw_goods_supply = buy_amount }
												add_to_variable = { raw_goods_trade_amount = buy_amount }
												subtract_from_variable = { raw_goods_trade_value = cost_temp }
												add_to_variable = { PREV.raw_goods_trade_amount = buy_amount }
												add_to_variable = { PREV.raw_goods_trade_value = cost_temp }
											}
										}
                                    }
                                    else = {
                                        set_temp_variable = { cheapest_brk = 1 }
                                    }
                                }
                        }
                    }

                #industrial_goods
                    #Loops from highest price states to lowest
                    set_temp_variable = { start_temp = industrial_goods_trade_state_array^num }
                    subtract_from_temp_variable = { start_temp = 1 }
                    for_loop_effect = {
                        start = start_temp
                        end = 0
                        compare = greater_than_or_equals
                        add = -1
                        value = ii


                        #Scopes to state
                        var:industrial_goods_trade_state_array^ii = {
                            
                            #Checks if the state actually has more demand than supply. If it doesn't, this is pointless
                                set_temp_variable = { buy_amount_left = industrial_goods_demand }

                                #Loops thru cheapest states to buy from
                                for_each_loop = {
                                    array = PREV.industrial_goods_trade_state_array
                                    value = state_temp
                                    index = iii
                                    break = cheapest_brk

                                    #Checks if the state is cheaper & transport is affordabole 
                                    #TODO - Transport cost
                                    if = {
                                        limit = {
                                            check_variable = { state_temp:industrial_goods_price < industrial_goods_price }
                                            check_variable = { buy_amount_left > 0 }
                                        }
										if = {
											limit = {
												check_variable = { state_temp:industrial_goods_supply_min < state_temp:industrial_goods_supply }
											}
											#Transport Cost
											var:state_temp = {
												set_variable = { PREV.transport_cost = distance_to@PREV } #This needs to be a normal variable
											}
											divide_variable = { transport_cost = global.base_transport_cost_divisor }
											set_temp_variable = { modifier_temp = transport_cost_effect }
											add_to_temp_variable = { modifier_temp = 1 }
											multiply_variable = { transport_cost = modifier_temp }
											add_to_variable = { transport_cost = 1 }

											set_temp_variable = { true_price = state_temp:industrial_goods_price }
											multiply_temp_variable = { true_price = transport_cost }
											if = {
												limit = {
													check_variable = { true_price < industrial_goods_price }
												}
												#Do Trade
												set_temp_variable = { u = true_price }
												multiply_temp_variable = { u = state_temp:industrial_goods_demand }
												divide_temp_variable = { u = industrial_goods_price }
												divide_temp_variable = { u = industrial_goods_demand }
												
												set_temp_variable = { buy_amount = industrial_goods_supply }
												multiply_temp_variable = { buy_amount = u }
												multiply_temp_variable = { buy_amount = -1 }
												add_to_temp_variable = { buy_amount = state_temp:industrial_goods_supply }
												add_to_temp_variable = { u = 1 }
												divide_temp_variable = { buy_amount = u }
												
												multiply_temp_variable = { buy_amount = 0.7 }

												multiply_temp_variable = { buy_amount = transport_cost }

												set_temp_variable = { good_max_temp = state_temp:industrial_goods_supply }
												subtract_from_temp_variable = { good_max_temp = state_temp:industrial_goods_supply_min }
												
												clamp_temp_variable = {
													var = buy_amount
													max = good_max_temp
												}
												clamp_temp_variable = {
													var = buy_amount
													min = 0
												}
												set_temp_variable = { cost_temp = buy_amount }
												multiply_temp_variable = { cost_temp = state_temp:industrial_goods_price }

												subtract_from_variable = { state_temp:industrial_goods_supply = buy_amount }
												subtract_from_variable = { state_temp:industrial_goods_trade_amount = buy_amount }
												add_to_variable = { state_temp:industrial_goods_trade_value = cost_temp }

												divide_temp_variable = { buy_amount = transport_cost }

												subtract_from_temp_variable = { buy_amount_left = buy_amount }
												add_to_variable = { industrial_goods_supply = buy_amount }
												add_to_variable = { industrial_goods_trade_amount = buy_amount }
												subtract_from_variable = { industrial_goods_trade_value = cost_temp }
												add_to_variable = { PREV.industrial_goods_trade_amount = buy_amount }
												add_to_variable = { PREV.industrial_goods_trade_value = cost_temp }
											}
										}
                                    }
                                    else = {
                                        set_temp_variable = { cheapest_brk = 1 }
                                    }
                                }
                        }
                    }


			#
			#Minimum goods supply to be in a country & Some necessary vars for resolving international trade

				#Excess added up from each individual state
				set_variable = { life_goods_supply_min = 0 }
				set_variable = { life_goods_supply = 0 }
				set_variable = { everyday_goods_supply_min = 0 }
				set_variable = { everyday_goods_supply = 0 }
				set_variable = { luxury_goods_supply_min = 0 }
				set_variable = { luxury_goods_supply = 0 }
				set_variable = { services_supply_min = 0 }
				set_variable = { services_supply = 0 }
				set_variable = { raw_goods_supply_min = 0 }
				set_variable = { raw_goods_supply = 0 }
				set_variable = { industrial_goods_supply_min = 0 }
				set_variable = { industrial_goods_supply = 0 }
				every_controlled_state = {
					add_to_variable = { PREV.life_goods_supply_min = life_goods_supply_min }
					add_to_variable = { PREV.life_goods_supply = life_goods_supply }

					add_to_variable = { PREV.everyday_goods_supply_min = everyday_goods_supply_min }
					add_to_variable = { PREV.everyday_goods_supply = everyday_goods_supply }

					add_to_variable = { PREV.luxury_goods_supply_min = luxury_goods_supply_min }
					add_to_variable = { PREV.luxury_goods_supply = luxury_goods_supply }

					add_to_variable = { PREV.services_supply_min = services_supply_min }
					add_to_variable = { PREV.services_supply = services_supply }

					add_to_variable = { PREV.raw_goods_supply_min = raw_goods_supply_min }
					add_to_variable = { PREV.raw_goods_supply = raw_goods_supply }

					add_to_variable = { PREV.industrial_goods_supply_min = industrial_goods_supply_min }
					add_to_variable = { PREV.industrial_goods_supply = industrial_goods_supply }
				}
				set_variable = { life_goods_supply_demand_ratio = life_goods_supply }
				divide_variable = { life_goods_supply_demand_ratio = life_goods_demand }
				set_variable = { everyday_goods_supply_demand_ratio = everyday_goods_supply }
				divide_variable = { everyday_goods_supply_demand_ratio = everyday_goods_demand }
				set_variable = { luxury_goods_supply_demand_ratio = luxury_goods_supply }
				divide_variable = { luxury_goods_supply_demand_ratio = luxury_goods_demand }
				set_variable = { services_supply_demand_ratio = services_supply }
				divide_variable = { services_supply_demand_ratio = services_demand }
				set_variable = { raw_goods_supply_demand_ratio = raw_goods_supply }
				divide_variable = { raw_goods_supply_demand_ratio = raw_goods_demand }
				set_variable = { industrial_goods_supply_demand_ratio = industrial_goods_supply }
				divide_variable = { industrial_goods_supply_demand_ratio = industrial_goods_demand }
			#
		}

			#NOTE: Masters get first access to puppet/colony's market. This needs to be implemented at some point

		for_each_scope_loop = {
			array = global.econ_order_array

			#INTERNATIONAL TRADE
				#Countries with excess demand to supply will try to buy goods. Countries in the order of the "Great Powers List" go first. 
				#It is assumed that all imported and exported supply/demand will be fulfilled. This will be fulfilled in order of cheapest states to most expensive in exports and most expensive to cheapest in imports.

				set_variable = { actual_tariff_revenue = 0 }
                #life_goods
						set_temp_variable = { buy_amount_left = life_goods_demand }
						#Loops thru cheapest countries to buy from
						for_each_loop = {
							array = global.life_goods_global_trade_country_array
							value = country_temp
							index = iii
							break = cheapest_brk

							#Checks if the country's goods are cheaper & shipping is affordabole 
							#TODO - Shipping cost
							if = {
								limit = {
									check_variable = { country_temp:life_goods_price < life_goods_price }
									check_variable = { buy_amount_left > 0 }
									check_variable = { country_temp:life_goods_supply_min < country_temp:life_goods_supply }
									
								}

								#Shipping Cost
								set_temp_variable = { exporter_capital = country_temp:capital }
								var:exporter_capital = {
									set_variable = { PREV.shipping_cost = distance_to@PREV.capital } #This needs to be a normal variable
								}
								divide_variable = { shipping_cost = global.base_shipping_cost_divisor }
								set_temp_variable = { modifier_temp = shipping_cost_effect }
								add_to_temp_variable = { modifier_temp = 1 }
								multiply_variable = { shipping_cost = modifier_temp }
								add_to_variable = { shipping_cost = 1 }

								#Tariffs/Subsidies
								set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
								add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
								subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
								subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
								add_to_temp_variable = { net_tariff_percentage_temp = 100 }
								if = {
									limit = {
										check_variable = { net_tariff_percentage_temp < 10 }
									}
									set_temp_variable = { net_tariff_percentage_temp = 10 }
								}

								set_temp_variable = { true_price = country_temp:life_goods_price }
								multiply_temp_variable = { true_price = shipping_cost }
								multiply_temp_variable = { true_price = net_tariff_percentage_temp }
								divide_temp_variable = { true_price = 100 }
								if = {
									limit = {
										check_variable = { true_price < life_goods_price }
									}
									#Do Trade
									set_temp_variable = { u = true_price }
									multiply_temp_variable = { u = country_temp:life_goods_demand }
									divide_temp_variable = { u = life_goods_price }
									divide_temp_variable = { u = life_goods_demand }
									
									set_temp_variable = { buy_amount = life_goods_supply }
									multiply_temp_variable = { buy_amount = u }
									multiply_temp_variable = { buy_amount = -1 }
									add_to_temp_variable = { buy_amount = country_temp:life_goods_supply }
									add_to_temp_variable = { u = 1 }
									divide_temp_variable = { buy_amount = u }
									
									multiply_temp_variable = { buy_amount = 0.7 }

									multiply_temp_variable = { buy_amount = shipping_cost }
									multiply_temp_variable = { buy_amount = net_tariff_percentage_temp }
									divide_temp_variable = { buy_amount = 100 }

									set_temp_variable = { good_max_temp = country_temp:life_goods_supply }
									subtract_from_temp_variable = { good_max_temp = country_temp:life_goods_supply_min }
									
									clamp_temp_variable = {
										var = buy_amount
										max = good_max_temp
									}
									clamp_temp_variable = {
										var = buy_amount
										min = 0
									}
									set_temp_variable = { cost_temp = buy_amount }
									multiply_temp_variable = { cost_temp = country_temp:life_goods_price }
												
									subtract_from_variable = { country_temp:life_goods_supply = buy_amount }
									subtract_from_variable = { country_temp:life_goods_global_trade_amount = buy_amount }
									add_to_variable = { country_temp:life_goods_global_trade_actual_value = cost_temp }
									subtract_from_variable = { life_goods_global_trade_actual_value = cost_temp }
									add_to_variable = { global.life_goods_global_trade_actual_value = cost_temp }

									multiply_temp_variable = { buy_amount = 100 }
									divide_temp_variable = { buy_amount = shipping_cost }
									divide_temp_variable = { buy_amount = net_tariff_percentage_temp }

									#Tariffs/Subsidies
									set_temp_variable = { export_cost_temp = 100 }
									add_to_temp_variable = { export_cost_temp = country_temp:export_tariff_percentage }
									subtract_from_temp_variable = { export_cost_temp = country_temp:export_subsidy_percentage }
									multiply_temp_variable = { export_cost_temp = cost_temp }
									divide_temp_variable = { export_cost_temp = 100 }
									set_temp_variable = { export_value_temp = export_cost_temp }
									subtract_from_temp_variable = { export_value_temp = cost_temp }

									set_temp_variable = { import_cost_temp = 100 }
									add_to_temp_variable = { import_cost_temp = import_tariff_percentage }
									subtract_from_temp_variable = { import_cost_temp = import_subsidy_percentage }
									multiply_temp_variable = { import_cost_temp = cost_temp }
									divide_temp_variable = { import_cost_temp = 100 }
									set_temp_variable = { import_value_temp = import_cost_temp }
									subtract_from_temp_variable = { import_value_temp = cost_temp }

									add_to_temp_variable = { cost_temp = export_value_temp }
									add_to_temp_variable = { cost_temp = import_value_temp }
									add_to_variable = { country_temp:treasury = export_value_temp }
									add_to_variable = { treasury = import_value_temp }
									if = {
										limit = {
											check_variable = { export_value_temp > 0 }
										}
										add_to_variable = { country_temp:actual_tariff_revenue = export_value_temp }
									}
									else = {
										subtract_from_variable = { country_temp:actual_subsidy_expense = export_value_temp }
									}
									if = {
										limit = {
											check_variable = { import_value_temp > 0 }
										}
										add_to_variable = { actual_tariff_revenue = import_value_temp }
									}
									else = {
										subtract_from_variable = { actual_subsidy_expense = import_value_temp }
									}

									add_to_variable = { life_goods_supply = buy_amount }
									add_to_variable = { life_goods_global_trade_amount = buy_amount }
									add_to_variable = { global.life_goods_global_trade_amount = buy_amount }
									subtract_from_temp_variable = { buy_amount_left = buy_amount }
									subtract_from_variable = { life_goods_global_trade_value = cost_temp }
									add_to_variable = { global.life_goods_global_trade_value = cost_temp }
									add_to_variable = { country_temp:life_goods_global_trade_value = cost_temp }
								}
							}
							else_if = {
								limit = {
									OR = {
										NOT = { check_variable = { buy_amount_left > 0 } }
										NOT = {  check_variable = { country_temp:life_goods_price < life_goods_price } }
									}
								}
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
				#everyday_goods
					#Checks if the country actually has more demand than supply. If it doesn't, this is pointless
					if = {
						limit = {
							check_variable = { everyday_goods_demand > everyday_goods_supply }
						}
						set_temp_variable = { buy_amount_left = everyday_goods_demand }
						subtract_from_temp_variable = { buy_amount_left = everyday_goods_supply }

						#Loops thru cheapest countries to buy from
						for_each_loop = {
							array = global.everyday_goods_global_trade_country_array
							value = country_temp
							index = iii
							break = cheapest_brk

							#Checks if the country's goods are cheaper & shipping is affordabole 
							#TODO - Shipping cost
							if = {
								limit = {
									check_variable = { country_temp:everyday_goods_price < everyday_goods_price }
									check_variable = { buy_amount_left > 0 }
									check_variable = { country_temp:everyday_goods_supply_min < country_temp:everyday_goods_supply }
									
								}
								#Shipping Cost
								set_temp_variable = { exporter_capital = country_temp:capital }
								var:exporter_capital = {
									set_variable = { PREV.shipping_cost = distance_to@PREV.capital } #This needs to be a normal variable
								}
								divide_variable = { shipping_cost = global.base_shipping_cost_divisor }
								set_temp_variable = { modifier_temp = shipping_cost_effect }
								add_to_temp_variable = { modifier_temp = 1 }
								multiply_variable = { shipping_cost = modifier_temp }
								add_to_variable = { shipping_cost = 1 }

								#Tariffs/Subsidies
								set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
								add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
								subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
								subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
								add_to_temp_variable = { net_tariff_percentage_temp = 100 }
								if = {
									limit = {
										check_variable = { net_tariff_percentage_temp < 10 }
									}
									set_temp_variable = { net_tariff_percentage_temp = 10 }
								}

								set_temp_variable = { true_price = country_temp:everyday_goods_price }
								multiply_temp_variable = { true_price = shipping_cost }
								multiply_temp_variable = { true_price = net_tariff_percentage_temp }
								divide_temp_variable = { true_price = 100 }
								if = {
									limit = {
										check_variable = { true_price < everyday_goods_price }
									}
									#Do Trade
									set_temp_variable = { u = true_price }
									multiply_temp_variable = { u = country_temp:everyday_goods_demand }
									divide_temp_variable = { u = everyday_goods_price }
									divide_temp_variable = { u = everyday_goods_demand }
									
									set_temp_variable = { buy_amount = everyday_goods_supply }
									multiply_temp_variable = { buy_amount = u }
									multiply_temp_variable = { buy_amount = -1 }
									add_to_temp_variable = { buy_amount = country_temp:everyday_goods_supply }
									add_to_temp_variable = { u = 1 }
									divide_temp_variable = { buy_amount = u }
									
									multiply_temp_variable = { buy_amount = 0.7 }

									multiply_temp_variable = { buy_amount = shipping_cost }
									multiply_temp_variable = { buy_amount = net_tariff_percentage_temp }
									divide_temp_variable = { buy_amount = 100 }

									set_temp_variable = { good_max_temp = country_temp:everyday_goods_supply }
									subtract_from_temp_variable = { good_max_temp = country_temp:everyday_goods_supply_min }
									
									clamp_temp_variable = {
										var = buy_amount
										max = good_max_temp
									}
									clamp_temp_variable = {
										var = buy_amount
										min = 0
									}
									set_temp_variable = { cost_temp = buy_amount }
									multiply_temp_variable = { cost_temp = country_temp:everyday_goods_price }

									subtract_from_variable = { country_temp:everyday_goods_supply = buy_amount }
									subtract_from_variable = { country_temp:everyday_goods_global_trade_amount = buy_amount }
									add_to_variable = { country_temp:everyday_goods_global_trade_actual_value = cost_temp }
									subtract_from_variable = { everyday_goods_global_trade_actual_value = cost_temp }
									add_to_variable = { global.everyday_goods_global_trade_actual_value = cost_temp }

									multiply_temp_variable = { buy_amount = 100 }
									divide_temp_variable = { buy_amount = shipping_cost }
									divide_temp_variable = { buy_amount = net_tariff_percentage_temp }

									#Tariffs/Subsidies
									set_temp_variable = { export_cost_temp = 100 }
									add_to_temp_variable = { export_cost_temp = country_temp:export_tariff_percentage }
									subtract_from_temp_variable = { export_cost_temp = country_temp:export_subsidy_percentage }
									multiply_temp_variable = { export_cost_temp = cost_temp }
									divide_temp_variable = { export_cost_temp = 100 }
									set_temp_variable = { export_value_temp = export_cost_temp }
									subtract_from_temp_variable = { export_value_temp = cost_temp }

									set_temp_variable = { import_cost_temp = 100 }
									add_to_temp_variable = { import_cost_temp = import_tariff_percentage }
									subtract_from_temp_variable = { import_cost_temp = import_subsidy_percentage }
									multiply_temp_variable = { import_cost_temp = cost_temp }
									divide_temp_variable = { import_cost_temp = 100 }
									set_temp_variable = { import_value_temp = import_cost_temp }
									subtract_from_temp_variable = { import_value_temp = cost_temp }

									add_to_temp_variable = { cost_temp = export_value_temp }
									add_to_temp_variable = { cost_temp = import_value_temp }
									add_to_variable = { country_temp:treasury = export_value_temp }
									add_to_variable = { treasury = import_value_temp }
									if = {
										limit = {
											check_variable = { export_value_temp > 0 }
										}
										add_to_variable = { country_temp:actual_tariff_revenue = export_value_temp }
									}
									else = {
										subtract_from_variable = { country_temp:actual_subsidy_expense = export_value_temp }
									}
									if = {
										limit = {
											check_variable = { import_value_temp > 0 }
										}
										add_to_variable = { actual_tariff_revenue = import_value_temp }
									}
									else = {
										subtract_from_variable = { actual_subsidy_expense = import_value_temp }
									}

									add_to_variable = { everyday_goods_supply = buy_amount }
									add_to_variable = { everyday_goods_global_trade_amount = buy_amount }
									add_to_variable = { global.everyday_goods_global_trade_amount = buy_amount }
									subtract_from_temp_variable = { buy_amount_left = buy_amount }
									subtract_from_variable = { everyday_goods_global_trade_value = cost_temp }
									add_to_variable = { global.everyday_goods_global_trade_value = cost_temp }
									add_to_variable = { country_temp:everyday_goods_global_trade_value = cost_temp }
								}
							}
							else_if = {
								limit = {
									OR = {
										NOT = { check_variable = { buy_amount_left > 0 } }
										NOT = {  check_variable = { country_temp:everyday_goods_price < everyday_goods_price } }
									}
								}
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#luxury_goods
					#Checks if the country actually has more demand than supply. If it doesn't, this is pointless
					if = {
						limit = {
							check_variable = { luxury_goods_demand > luxury_goods_supply }
						}
						set_temp_variable = { buy_amount_left = luxury_goods_demand }
						subtract_from_temp_variable = { buy_amount_left = luxury_goods_supply }

						#Loops thru cheapest countries to buy from
						for_each_loop = {
							array = global.luxury_goods_global_trade_country_array
							value = country_temp
							index = iii
							break = cheapest_brk

							#Checks if the country's goods are cheaper & shipping is affordabole 
							#TODO - Shipping cost
							if = {
								limit = {
									check_variable = { country_temp:luxury_goods_price < luxury_goods_price }
									check_variable = { buy_amount_left > 0 }
									check_variable = { country_temp:luxury_goods_supply_min < country_temp:luxury_goods_supply }
									
								}
								#Shipping Cost
								set_temp_variable = { exporter_capital = country_temp:capital }
								var:exporter_capital = {
									set_variable = { PREV.shipping_cost = distance_to@PREV.capital } #This needs to be a normal variable
								}
								divide_variable = { shipping_cost = global.base_shipping_cost_divisor }
								set_temp_variable = { modifier_temp = shipping_cost_effect }
								add_to_temp_variable = { modifier_temp = 1 }
								multiply_variable = { shipping_cost = modifier_temp }
								add_to_variable = { shipping_cost = 1 }

								#Tariffs/Subsidies
								set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
								add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
								subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
								subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
								add_to_temp_variable = { net_tariff_percentage_temp = 100 }
								if = {
									limit = {
										check_variable = { net_tariff_percentage_temp < 10 }
									}
									set_temp_variable = { net_tariff_percentage_temp = 10 }
								}

								set_temp_variable = { true_price = country_temp:luxury_goods_price }
								multiply_temp_variable = { true_price = shipping_cost }
								multiply_temp_variable = { true_price = net_tariff_percentage_temp }
								divide_temp_variable = { true_price = 100 }
								if = {
									limit = {
										check_variable = { true_price < luxury_goods_price }
									}
									#Do Trade
									set_temp_variable = { u = true_price }
									multiply_temp_variable = { u = country_temp:luxury_goods_demand }
									divide_temp_variable = { u = luxury_goods_price }
									divide_temp_variable = { u = luxury_goods_demand }
									
									set_temp_variable = { buy_amount = luxury_goods_supply }
									multiply_temp_variable = { buy_amount = u }
									multiply_temp_variable = { buy_amount = -1 }
									add_to_temp_variable = { buy_amount = country_temp:luxury_goods_supply }
									add_to_temp_variable = { u = 1 }
									divide_temp_variable = { buy_amount = u }
									
									multiply_temp_variable = { buy_amount = 0.7 }

									multiply_temp_variable = { buy_amount = shipping_cost }
									multiply_temp_variable = { buy_amount = net_tariff_percentage_temp }
									divide_temp_variable = { buy_amount = 100 }

									set_temp_variable = { good_max_temp = country_temp:luxury_goods_supply }
									subtract_from_temp_variable = { good_max_temp = country_temp:luxury_goods_supply_min }
									
									clamp_temp_variable = {
										var = buy_amount
										max = good_max_temp
									}
									clamp_temp_variable = {
										var = buy_amount
										min = 0
									}
									set_temp_variable = { cost_temp = buy_amount }
									multiply_temp_variable = { cost_temp = country_temp:luxury_goods_price }

									subtract_from_variable = { country_temp:luxury_goods_supply = buy_amount }
									subtract_from_variable = { country_temp:luxury_goods_global_trade_amount = buy_amount }
									add_to_variable = { country_temp:luxury_goods_global_trade_actual_value = cost_temp }
									subtract_from_variable = { luxury_goods_global_trade_actual_value = cost_temp }
									add_to_variable = { global.luxury_goods_global_trade_actual_value = cost_temp }

									multiply_temp_variable = { buy_amount = 100 }
									divide_temp_variable = { buy_amount = shipping_cost }
									divide_temp_variable = { buy_amount = net_tariff_percentage_temp }

									#Tariffs/Subsidies
									set_temp_variable = { export_cost_temp = 100 }
									add_to_temp_variable = { export_cost_temp = country_temp:export_tariff_percentage }
									subtract_from_temp_variable = { export_cost_temp = country_temp:export_subsidy_percentage }
									multiply_temp_variable = { export_cost_temp = cost_temp }
									divide_temp_variable = { export_cost_temp = 100 }
									set_temp_variable = { export_value_temp = export_cost_temp }
									subtract_from_temp_variable = { export_value_temp = cost_temp }

									set_temp_variable = { import_cost_temp = 100 }
									add_to_temp_variable = { import_cost_temp = import_tariff_percentage }
									subtract_from_temp_variable = { import_cost_temp = import_subsidy_percentage }
									multiply_temp_variable = { import_cost_temp = cost_temp }
									divide_temp_variable = { import_cost_temp = 100 }
									set_temp_variable = { import_value_temp = import_cost_temp }
									subtract_from_temp_variable = { import_value_temp = cost_temp }

									add_to_temp_variable = { cost_temp = export_value_temp }
									add_to_temp_variable = { cost_temp = import_value_temp }
									add_to_variable = { country_temp:treasury = export_value_temp }
									add_to_variable = { treasury = import_value_temp }
									if = {
										limit = {
											check_variable = { export_value_temp > 0 }
										}
										add_to_variable = { country_temp:actual_tariff_revenue = export_value_temp }
									}
									else = {
										subtract_from_variable = { country_temp:actual_subsidy_expense = export_value_temp }
									}
									if = {
										limit = {
											check_variable = { import_value_temp > 0 }
										}
										add_to_variable = { actual_tariff_revenue = import_value_temp }
									}
									else = {
										subtract_from_variable = { actual_subsidy_expense = import_value_temp }
									}

									add_to_variable = { luxury_goods_supply = buy_amount }
									add_to_variable = { luxury_goods_global_trade_amount = buy_amount }
									add_to_variable = { global.luxury_goods_global_trade_amount = buy_amount }
									subtract_from_temp_variable = { buy_amount_left = buy_amount }
									subtract_from_variable = { luxury_goods_global_trade_value = cost_temp }
									add_to_variable = { global.luxury_goods_global_trade_value = cost_temp }
									add_to_variable = { country_temp:luxury_goods_global_trade_value = cost_temp }
								}
							}
							else_if = {
								limit = {
									OR = {
										NOT = { check_variable = { buy_amount_left > 0 } }
										NOT = {  check_variable = { country_temp:luxury_goods_price < luxury_goods_price } }
									}
								}
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#services
					#Checks if the country actually has more demand than supply. If it doesn't, this is pointless
					if = {
						limit = {
							check_variable = { services_demand > services_supply }
						}
						set_temp_variable = { buy_amount_left = services_demand }
						subtract_from_temp_variable = { buy_amount_left = services_supply }

						#Loops thru cheapest countries to buy from
						for_each_loop = {
							array = global.services_global_trade_country_array
							value = country_temp
							index = iii
							break = cheapest_brk

							#Checks if the country's goods are cheaper & shipping is affordabole 
							#TODO - Shipping cost
							if = {
								limit = {
									check_variable = { country_temp:services_price < services_price }
									check_variable = { buy_amount_left > 0 }
									check_variable = { country_temp:services_supply_min < country_temp:services_supply }
									
								}
								#Shipping Cost
								set_temp_variable = { exporter_capital = country_temp:capital }
								var:exporter_capital = {
									set_variable = { PREV.shipping_cost = distance_to@PREV.capital } #This needs to be a normal variable
								}
								divide_variable = { shipping_cost = global.base_shipping_cost_divisor }
								set_temp_variable = { modifier_temp = shipping_cost_effect }
								add_to_temp_variable = { modifier_temp = 1 }
								multiply_variable = { shipping_cost = modifier_temp }
								add_to_variable = { shipping_cost = 1 }

								#Tariffs/Subsidies
								set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
								add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
								subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
								subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
								add_to_temp_variable = { net_tariff_percentage_temp = 100 }
								if = {
									limit = {
										check_variable = { net_tariff_percentage_temp < 10 }
									}
									set_temp_variable = { net_tariff_percentage_temp = 10 }
								}

								set_temp_variable = { true_price = country_temp:services_price }
								multiply_temp_variable = { true_price = shipping_cost }
								multiply_temp_variable = { true_price = net_tariff_percentage_temp }
								divide_temp_variable = { true_price = 100 }
								if = {
									limit = {
										check_variable = { true_price < services_price }
									}
									#Do Trade
									set_temp_variable = { u = true_price }
									multiply_temp_variable = { u = country_temp:services_demand }
									divide_temp_variable = { u = services_price }
									divide_temp_variable = { u = services_demand }
									
									set_temp_variable = { buy_amount = services_supply }
									multiply_temp_variable = { buy_amount = u }
									multiply_temp_variable = { buy_amount = -1 }
									add_to_temp_variable = { buy_amount = country_temp:services_supply }
									add_to_temp_variable = { u = 1 }
									divide_temp_variable = { buy_amount = u }
									
									multiply_temp_variable = { buy_amount = 0.7 }

									multiply_temp_variable = { buy_amount = shipping_cost }
									multiply_temp_variable = { buy_amount = net_tariff_percentage_temp }
									divide_temp_variable = { buy_amount = 100 }

									set_temp_variable = { good_max_temp = country_temp:services_supply }
									subtract_from_temp_variable = { good_max_temp = country_temp:services_supply_min }
									
									clamp_temp_variable = {
										var = buy_amount
										max = good_max_temp
									}
									clamp_temp_variable = {
										var = buy_amount
										min = 0
									}
									set_temp_variable = { cost_temp = buy_amount }
									multiply_temp_variable = { cost_temp = country_temp:services_price }

									subtract_from_variable = { country_temp:services_supply = buy_amount }
									subtract_from_variable = { country_temp:services_global_trade_amount = buy_amount }
									add_to_variable = { country_temp:services_global_trade_actual_value = cost_temp }
									subtract_from_variable = { services_global_trade_actual_value = cost_temp }
									add_to_variable = { global.services_global_trade_actual_value = cost_temp }

									multiply_temp_variable = { buy_amount = 100 }
									divide_temp_variable = { buy_amount = shipping_cost }
									divide_temp_variable = { buy_amount = net_tariff_percentage_temp }

									#Tariffs/Subsidies
									set_temp_variable = { export_cost_temp = 100 }
									add_to_temp_variable = { export_cost_temp = country_temp:export_tariff_percentage }
									subtract_from_temp_variable = { export_cost_temp = country_temp:export_subsidy_percentage }
									multiply_temp_variable = { export_cost_temp = cost_temp }
									divide_temp_variable = { export_cost_temp = 100 }
									set_temp_variable = { export_value_temp = export_cost_temp }
									subtract_from_temp_variable = { export_value_temp = cost_temp }

									set_temp_variable = { import_cost_temp = 100 }
									add_to_temp_variable = { import_cost_temp = import_tariff_percentage }
									subtract_from_temp_variable = { import_cost_temp = import_subsidy_percentage }
									multiply_temp_variable = { import_cost_temp = cost_temp }
									divide_temp_variable = { import_cost_temp = 100 }
									set_temp_variable = { import_value_temp = import_cost_temp }
									subtract_from_temp_variable = { import_value_temp = cost_temp }

									add_to_temp_variable = { cost_temp = export_value_temp }
									add_to_temp_variable = { cost_temp = import_value_temp }
									add_to_variable = { country_temp:treasury = export_value_temp }
									add_to_variable = { treasury = import_value_temp }
									if = {
										limit = {
											check_variable = { export_value_temp > 0 }
										}
										add_to_variable = { country_temp:actual_tariff_revenue = export_value_temp }
									}
									else = {
										subtract_from_variable = { country_temp:actual_subsidy_expense = export_value_temp }
									}
									if = {
										limit = {
											check_variable = { import_value_temp > 0 }
										}
										add_to_variable = { actual_tariff_revenue = import_value_temp }
									}
									else = {
										subtract_from_variable = { actual_subsidy_expense = import_value_temp }
									}

									add_to_variable = { services_supply = buy_amount }
									add_to_variable = { services_global_trade_amount = buy_amount }
									add_to_variable = { global.services_global_trade_amount = buy_amount }
									subtract_from_temp_variable = { buy_amount_left = buy_amount }
									subtract_from_variable = { services_global_trade_value = cost_temp }
									add_to_variable = { global.services_global_trade_value = cost_temp }
									add_to_variable = { country_temp:services_global_trade_value = cost_temp }
								}
							}
							else_if = {
								limit = {
									OR = {
										NOT = { check_variable = { buy_amount_left > 0 } }
										NOT = {  check_variable = { country_temp:services_price < services_price } }
									}
								}
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#raw_goods
					#Checks if the country actually has more demand than supply. If it doesn't, this is pointless
					if = {
						limit = {
							tag = GUA
						}
						set_variable = { raw_goods_available = 0 }
					}
					if = {
						limit = {
							check_variable = { raw_goods_demand > raw_goods_supply }
						}
						set_temp_variable = { buy_amount_left = raw_goods_demand }
						subtract_from_temp_variable = { buy_amount_left = raw_goods_supply }

						#Loops thru cheapest countries to buy from
						for_each_loop = {
							array = global.raw_goods_global_trade_country_array
							value = country_temp
							index = iii
							break = cheapest_brk

							#Checks if the country's goods are cheaper & shipping is affordabole 
							#TODO - Shipping cost
							if = {
								limit = {
									check_variable = { country_temp:raw_goods_price < raw_goods_price }
									check_variable = { buy_amount_left > 0 }
									check_variable = { country_temp:raw_goods_supply_min < country_temp:raw_goods_supply }
									
								}
								#Shipping Cost
								set_temp_variable = { exporter_capital = country_temp:capital }
								var:exporter_capital = {
									set_variable = { PREV.shipping_cost = distance_to@PREV.capital } #This needs to be a normal variable
								}
								divide_variable = { shipping_cost = global.base_shipping_cost_divisor }
								set_temp_variable = { modifier_temp = shipping_cost_effect }
								add_to_temp_variable = { modifier_temp = 1 }
								multiply_variable = { shipping_cost = modifier_temp }
								add_to_variable = { shipping_cost = 1 }

								#Tariffs/Subsidies
								set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
								add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
								subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
								subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
								add_to_temp_variable = { net_tariff_percentage_temp = 100 }
								if = {
									limit = {
										check_variable = { net_tariff_percentage_temp < 10 }
									}
									set_temp_variable = { net_tariff_percentage_temp = 10 }
								}

								set_temp_variable = { true_price = country_temp:raw_goods_price }
								multiply_temp_variable = { true_price = shipping_cost }
								multiply_temp_variable = { true_price = net_tariff_percentage_temp }
								divide_temp_variable = { true_price = 100 }
								if = {
									limit = {
										check_variable = { true_price < raw_goods_price }
									}
									#Do Trade
									set_temp_variable = { u = true_price }
									multiply_temp_variable = { u = country_temp:raw_goods_demand }
									divide_temp_variable = { u = raw_goods_price }
									divide_temp_variable = { u = raw_goods_demand }
									
									set_temp_variable = { buy_amount = raw_goods_supply }
									multiply_temp_variable = { buy_amount = u }
									multiply_temp_variable = { buy_amount = -1 }
									add_to_temp_variable = { buy_amount = country_temp:raw_goods_supply }
									add_to_temp_variable = { u = 1 }
									divide_temp_variable = { buy_amount = u }
									
									multiply_temp_variable = { buy_amount = 0.7 }

									multiply_temp_variable = { buy_amount = shipping_cost }
									multiply_temp_variable = { buy_amount = net_tariff_percentage_temp }
									divide_temp_variable = { buy_amount = 100 }

									set_temp_variable = { good_max_temp = country_temp:raw_goods_supply }
									subtract_from_temp_variable = { good_max_temp = country_temp:raw_goods_supply_min }
									
									clamp_temp_variable = {
										var = buy_amount
										max = good_max_temp
									}
									clamp_temp_variable = {
										var = buy_amount
										min = 0
									}
									set_temp_variable = { cost_temp = buy_amount }
									multiply_temp_variable = { cost_temp = country_temp:raw_goods_price }

									subtract_from_variable = { country_temp:raw_goods_supply = buy_amount }
									subtract_from_variable = { country_temp:raw_goods_global_trade_amount = buy_amount }
									add_to_variable = { country_temp:raw_goods_global_trade_actual_value = cost_temp }
									subtract_from_variable = { raw_goods_global_trade_actual_value = cost_temp }
									add_to_variable = { global.raw_goods_global_trade_actual_value = cost_temp }

									multiply_temp_variable = { buy_amount = 100 }
									divide_temp_variable = { buy_amount = shipping_cost }
									divide_temp_variable = { buy_amount = net_tariff_percentage_temp }

									#Tariffs/Subsidies
									set_temp_variable = { export_cost_temp = 100 }
									add_to_temp_variable = { export_cost_temp = country_temp:export_tariff_percentage }
									subtract_from_temp_variable = { export_cost_temp = country_temp:export_subsidy_percentage }
									multiply_temp_variable = { export_cost_temp = cost_temp }
									divide_temp_variable = { export_cost_temp = 100 }
									set_temp_variable = { export_value_temp = export_cost_temp }
									subtract_from_temp_variable = { export_value_temp = cost_temp }

									set_temp_variable = { import_cost_temp = 100 }
									add_to_temp_variable = { import_cost_temp = import_tariff_percentage }
									subtract_from_temp_variable = { import_cost_temp = import_subsidy_percentage }
									multiply_temp_variable = { import_cost_temp = cost_temp }
									divide_temp_variable = { import_cost_temp = 100 }
									set_temp_variable = { import_value_temp = import_cost_temp }
									subtract_from_temp_variable = { import_value_temp = cost_temp }

									add_to_temp_variable = { cost_temp = export_value_temp }
									add_to_temp_variable = { cost_temp = import_value_temp }
									add_to_variable = { country_temp:treasury = export_value_temp }
									add_to_variable = { treasury = import_value_temp }
									if = {
										limit = {
											check_variable = { export_value_temp > 0 }
										}
										add_to_variable = { country_temp:actual_tariff_revenue = export_value_temp }
									}
									else = {
										subtract_from_variable = { country_temp:actual_subsidy_expense = export_value_temp }
									}
									if = {
										limit = {
											check_variable = { import_value_temp > 0 }
										}
										add_to_variable = { actual_tariff_revenue = import_value_temp }
									}
									else = {
										subtract_from_variable = { actual_subsidy_expense = import_value_temp }
									}

									add_to_variable = { raw_goods_supply = buy_amount }
									add_to_variable = { raw_goods_global_trade_amount = buy_amount }
									add_to_variable = { global.raw_goods_global_trade_amount = buy_amount }
									subtract_from_temp_variable = { buy_amount_left = buy_amount }
									subtract_from_variable = { raw_goods_global_trade_value = cost_temp }
									add_to_variable = { global.raw_goods_global_trade_value = cost_temp }
									add_to_variable = { country_temp:raw_goods_global_trade_value = cost_temp }
								}
							}
							else_if = {
								limit = {
									OR = {
										NOT = { check_variable = { buy_amount_left > 0 } }
										NOT = {  check_variable = { country_temp:raw_goods_price < raw_goods_price } }
									}
								}
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#industrial_goods
					#Checks if the country actually has more demand than supply. If it doesn't, this is pointless
					if = {
						limit = {
							check_variable = { industrial_goods_demand > industrial_goods_supply }
						}
						set_temp_variable = { buy_amount_left = industrial_goods_demand }
						subtract_from_temp_variable = { buy_amount_left = industrial_goods_supply }

						#Loops thru cheapest countries to buy from
						for_each_loop = {
							array = global.industrial_goods_global_trade_country_array
							value = country_temp
							index = iii
							break = cheapest_brk

							#Checks if the country's goods are cheaper & shipping is affordabole 
							#TODO - Shipping cost
							if = {
								limit = {
									check_variable = { country_temp:industrial_goods_price < industrial_goods_price }
									check_variable = { buy_amount_left > 0 }
									check_variable = { country_temp:industrial_goods_supply_min < country_temp:industrial_goods_supply }
									
								}
								#Shipping Cost
								set_temp_variable = { exporter_capital = country_temp:capital }
								var:exporter_capital = {
									set_variable = { PREV.shipping_cost = distance_to@PREV.capital } #This needs to be a normal variable
								}
								divide_variable = { shipping_cost = global.base_shipping_cost_divisor }
								set_temp_variable = { modifier_temp = shipping_cost_effect }
								add_to_temp_variable = { modifier_temp = 1 }
								multiply_variable = { shipping_cost = modifier_temp }
								add_to_variable = { shipping_cost = 1 }

								#Tariffs/Subsidies
								set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
								add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
								subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
								subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
								add_to_temp_variable = { net_tariff_percentage_temp = 100 }
								if = {
									limit = {
										check_variable = { net_tariff_percentage_temp < 10 }
									}
									set_temp_variable = { net_tariff_percentage_temp = 10 }
								}

								set_temp_variable = { true_price = country_temp:industrial_goods_price }
								multiply_temp_variable = { true_price = shipping_cost }
								multiply_temp_variable = { true_price = net_tariff_percentage_temp }
								divide_temp_variable = { true_price = 100 }
								if = {
									limit = {
										check_variable = { true_price < industrial_goods_price }
									}
									#Do Trade
									set_temp_variable = { u = true_price }
									multiply_temp_variable = { u = country_temp:industrial_goods_demand }
									divide_temp_variable = { u = industrial_goods_price }
									divide_temp_variable = { u = industrial_goods_demand }
									
									set_temp_variable = { buy_amount = industrial_goods_supply }
									multiply_temp_variable = { buy_amount = u }
									multiply_temp_variable = { buy_amount = -1 }
									add_to_temp_variable = { buy_amount = country_temp:industrial_goods_supply }
									add_to_temp_variable = { u = 1 }
									divide_temp_variable = { buy_amount = u }
									
									multiply_temp_variable = { buy_amount = 0.7 }

									multiply_temp_variable = { buy_amount = shipping_cost }
									multiply_temp_variable = { buy_amount = net_tariff_percentage_temp }
									divide_temp_variable = { buy_amount = 100 }

									set_temp_variable = { good_max_temp = country_temp:industrial_goods_supply }
									subtract_from_temp_variable = { good_max_temp = country_temp:industrial_goods_supply_min }
									
									clamp_temp_variable = {
										var = buy_amount
										max = good_max_temp
									}
									clamp_temp_variable = {
										var = buy_amount
										min = 0
									}
									set_temp_variable = { cost_temp = buy_amount }
									multiply_temp_variable = { cost_temp = country_temp:industrial_goods_price }

									subtract_from_variable = { country_temp:industrial_goods_supply = buy_amount }
									subtract_from_variable = { country_temp:industrial_goods_global_trade_amount = buy_amount }
									add_to_variable = { country_temp:industrial_goods_global_trade_actual_value = cost_temp }
									subtract_from_variable = { industrial_goods_global_trade_actual_value = cost_temp }
									add_to_variable = { global.industrial_goods_global_trade_actual_value = cost_temp }

									multiply_temp_variable = { buy_amount = 100 }
									divide_temp_variable = { buy_amount = shipping_cost }
									divide_temp_variable = { buy_amount = net_tariff_percentage_temp }

									#Tariffs/Subsidies
									set_temp_variable = { export_cost_temp = 100 }
									add_to_temp_variable = { export_cost_temp = country_temp:export_tariff_percentage }
									subtract_from_temp_variable = { export_cost_temp = country_temp:export_subsidy_percentage }
									multiply_temp_variable = { export_cost_temp = cost_temp }
									divide_temp_variable = { export_cost_temp = 100 }
									set_temp_variable = { export_value_temp = export_cost_temp }
									subtract_from_temp_variable = { export_value_temp = cost_temp }

									set_temp_variable = { import_cost_temp = 100 }
									add_to_temp_variable = { import_cost_temp = import_tariff_percentage }
									subtract_from_temp_variable = { import_cost_temp = import_subsidy_percentage }
									multiply_temp_variable = { import_cost_temp = cost_temp }
									divide_temp_variable = { import_cost_temp = 100 }
									set_temp_variable = { import_value_temp = import_cost_temp }
									subtract_from_temp_variable = { import_value_temp = cost_temp }

									add_to_temp_variable = { cost_temp = export_value_temp }
									add_to_temp_variable = { cost_temp = import_value_temp }
									add_to_variable = { country_temp:treasury = export_value_temp }
									add_to_variable = { treasury = import_value_temp }
									if = {
										limit = {
											check_variable = { export_value_temp > 0 }
										}
										add_to_variable = { country_temp:actual_tariff_revenue = export_value_temp }
									}
									else = {
										subtract_from_variable = { country_temp:actual_subsidy_expense = export_value_temp }
									}
									if = {
										limit = {
											check_variable = { import_value_temp > 0 }
										}
										add_to_variable = { actual_tariff_revenue = import_value_temp }
									}
									else = {
										subtract_from_variable = { actual_subsidy_expense = import_value_temp }
									}

									add_to_variable = { industrial_goods_supply = buy_amount }
									add_to_variable = { industrial_goods_global_trade_amount = buy_amount }
									add_to_variable = { global.industrial_goods_global_trade_amount = buy_amount }
									subtract_from_temp_variable = { buy_amount_left = buy_amount }
									subtract_from_variable = { industrial_goods_global_trade_value = cost_temp }
									add_to_variable = { global.industrial_goods_global_trade_value = cost_temp }
									add_to_variable = { country_temp:industrial_goods_global_trade_value = cost_temp }
								}
							}
							else_if = {
								limit = {
									OR = {
										NOT = { check_variable = { buy_amount_left > 0 } }
										NOT = {  check_variable = { country_temp:industrial_goods_price < industrial_goods_price } }
									}
								}
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				
			
			
			#
		}
		for_each_scope_loop = {
			array = global.econ_order_array

			#Resolve International Trade
				#life_goods
					#Importing
					if = {
						limit = {
							check_variable = { life_goods_global_trade_amount > 0 }            
						}
						set_variable = { trade_amount_left = life_goods_global_trade_amount }
						set_variable = { cost_amount_left = life_goods_global_trade_value }

						#Loop thru most expensive states to resolve
						set_temp_variable = { start_temp = life_goods_trade_state_array^num }
						subtract_from_temp_variable = { start_temp = 1 }
						for_loop_effect = {
							start = start_temp
							end = 0
							compare = greater_than_or_equals
							add = -1
							value = ii


							if = {
								limit = {
									check_variable = { trade_amount_left > 0 }
								}
								#Scopes to state
								var:life_goods_trade_state_array^ii = {
									set_temp_variable = { trade_percentage_temp = life_goods_demand }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.life_goods_demand }

									set_temp_variable = { trade_amount_temp = PREV.life_goods_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											check_variable = { trade_amount_temp > PREV.trade_amount_left }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
									}

									set_temp_variable = { after_goods_temp = PREV.trade_amount_left }
									subtract_from_temp_variable = { after_goods_temp = trade_amount_temp }
									if = {
										limit = {
											check_variable = { after_goods_temp < 0.003 }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { trade_value_temp = PREV.life_goods_global_trade_value }
										multiply_temp_variable = { trade_value_temp = trade_percentage_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp < PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { life_goods_trade_amount = trade_amount_temp }
									add_to_variable = { life_goods_trade_value = trade_value_temp }
									add_to_variable = { life_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}

						}
					}
					#Exporting
					else_if = {
						limit = {
							check_variable = { life_goods_global_trade_amount < 0 }            
						}
						set_variable = { trade_amount_left = life_goods_global_trade_amount } #Note, this is negative
						set_variable = { cost_amount_left = life_goods_global_trade_value }
						set_variable = { original_life_goods_supply = life_goods_supply }
						subtract_from_variable = { original_life_goods_supply = life_goods_global_trade_amount }
						subtract_from_variable = { original_life_goods_supply = life_goods_supply_min }

						#Loops thru cheapest states to resolve
						for_each_loop = {
							array = life_goods_trade_state_array
							value = state_temp
							index = iii
							break = cheapest_brk


							if = {
								limit = {
									check_variable = { trade_amount_left < 0 }
								}
								var:state_temp = {
									set_temp_variable = { trade_percentage_temp = life_goods_supply }
									subtract_from_temp_variable = { trade_percentage_temp = life_goods_supply_min }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.original_life_goods_supply }

									set_temp_variable = { trade_amount_temp = PREV.life_goods_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											NOT = { check_variable = { trade_amount_temp > PREV.trade_amount_left } }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { price_temp = PREV.cost_amount_left }
										multiply_temp_variable = { price_temp = 100 }
										divide_temp_variable = { price_temp = PREV.trade_amount_left }

										set_temp_variable = { trade_value_temp = trade_amount_temp }
										multiply_temp_variable = { trade_value_temp = price_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp > PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { life_goods_trade_amount = trade_amount_temp }
									add_to_variable = { life_goods_trade_value = trade_value_temp }
									add_to_variable = { life_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#
				#everyday_goods
					#Importing
					if = {
						limit = {
							check_variable = { everyday_goods_global_trade_amount > 0 }            
						}
						set_variable = { trade_amount_left = everyday_goods_global_trade_amount }
						set_variable = { cost_amount_left = everyday_goods_global_trade_value }

						#Loop thru most expensive states to resolve
						set_temp_variable = { start_temp = everyday_goods_trade_state_array^num }
						subtract_from_temp_variable = { start_temp = 1 }
						for_loop_effect = {
							start = start_temp
							end = 0
							compare = greater_than_or_equals
							add = -1
							value = ii


							if = {
								limit = {
									check_variable = { trade_amount_left > 0 }
								}
								#Scopes to state
								var:everyday_goods_trade_state_array^ii = {
									set_temp_variable = { trade_percentage_temp = everyday_goods_demand }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.everyday_goods_demand }

									set_temp_variable = { trade_amount_temp = PREV.everyday_goods_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											check_variable = { trade_amount_temp > PREV.trade_amount_left }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
									}

									set_temp_variable = { after_goods_temp = PREV.trade_amount_left }
									subtract_from_temp_variable = { after_goods_temp = trade_amount_temp }
									if = {
										limit = {
											check_variable = { after_goods_temp < 0.003 }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { trade_value_temp = PREV.everyday_goods_global_trade_value }
										multiply_temp_variable = { trade_value_temp = trade_percentage_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp < PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { everyday_goods_trade_amount = trade_amount_temp }
									add_to_variable = { everyday_goods_trade_value = trade_value_temp }
									add_to_variable = { everyday_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}

						}
					}
					#Exporting
					else_if = {
						limit = {
							check_variable = { everyday_goods_global_trade_amount < 0 }            
						}
						set_variable = { trade_amount_left = everyday_goods_global_trade_amount } #Note, this is negative
						set_variable = { cost_amount_left = everyday_goods_global_trade_value }
						set_variable = { original_everyday_goods_supply = everyday_goods_supply }
						subtract_from_variable = { original_everyday_goods_supply = everyday_goods_global_trade_amount }
						subtract_from_variable = { original_everyday_goods_supply = everyday_goods_supply_min }

						#Loops thru cheapest states to resolve
						for_each_loop = {
							array = everyday_goods_trade_state_array
							value = state_temp
							index = iii
							break = cheapest_brk


							if = {
								limit = {
									check_variable = { trade_amount_left < 0 }
								}
								var:state_temp = {
									set_temp_variable = { trade_percentage_temp = everyday_goods_supply }
									subtract_from_temp_variable = { trade_percentage_temp = everyday_goods_supply_min }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.original_everyday_goods_supply }

									set_temp_variable = { trade_amount_temp = PREV.everyday_goods_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											NOT = { check_variable = { trade_amount_temp > PREV.trade_amount_left } }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { price_temp = PREV.cost_amount_left }
										multiply_temp_variable = { price_temp = 100 }
										divide_temp_variable = { price_temp = PREV.trade_amount_left }

										set_temp_variable = { trade_value_temp = trade_amount_temp }
										multiply_temp_variable = { trade_value_temp = price_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp > PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { everyday_goods_trade_amount = trade_amount_temp }
									add_to_variable = { everyday_goods_trade_value = trade_value_temp }
									add_to_variable = { everyday_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#
				#luxury_goods
					#Importing
					if = {
						limit = {
							check_variable = { luxury_goods_global_trade_amount > 0 }            
						}
						set_variable = { trade_amount_left = luxury_goods_global_trade_amount }
						set_variable = { cost_amount_left = luxury_goods_global_trade_value }

						#Loop thru most expensive states to resolve
						set_temp_variable = { start_temp = luxury_goods_trade_state_array^num }
						subtract_from_temp_variable = { start_temp = 1 }
						for_loop_effect = {
							start = start_temp
							end = 0
							compare = greater_than_or_equals
							add = -1
							value = ii


							if = {
								limit = {
									check_variable = { trade_amount_left > 0 }
								}
								#Scopes to state
								var:luxury_goods_trade_state_array^ii = {
									set_temp_variable = { trade_percentage_temp = luxury_goods_demand }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.luxury_goods_demand }

									set_temp_variable = { trade_amount_temp = PREV.luxury_goods_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											check_variable = { trade_amount_temp > PREV.trade_amount_left }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
									}

									set_temp_variable = { after_goods_temp = PREV.trade_amount_left }
									subtract_from_temp_variable = { after_goods_temp = trade_amount_temp }
									if = {
										limit = {
											check_variable = { after_goods_temp < 0.003 }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { trade_value_temp = PREV.luxury_goods_global_trade_value }
										multiply_temp_variable = { trade_value_temp = trade_percentage_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp < PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { luxury_goods_trade_amount = trade_amount_temp }
									add_to_variable = { luxury_goods_trade_value = trade_value_temp }
									add_to_variable = { luxury_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}

						}
					}
					#Exporting
					else_if = {
						limit = {
							check_variable = { luxury_goods_global_trade_amount < 0 }            
						}
						set_variable = { trade_amount_left = luxury_goods_global_trade_amount } #Note, this is negative
						set_variable = { cost_amount_left = luxury_goods_global_trade_value }
						set_variable = { original_luxury_goods_supply = luxury_goods_supply }
						subtract_from_variable = { original_luxury_goods_supply = luxury_goods_global_trade_amount }
						subtract_from_variable = { original_luxury_goods_supply = luxury_goods_supply_min }

						#Loops thru cheapest states to resolve
						for_each_loop = {
							array = luxury_goods_trade_state_array
							value = state_temp
							index = iii
							break = cheapest_brk


							if = {
								limit = {
									check_variable = { trade_amount_left < 0 }
								}
								var:state_temp = {
									set_temp_variable = { trade_percentage_temp = luxury_goods_supply }
									subtract_from_temp_variable = { trade_percentage_temp = luxury_goods_supply_min }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.original_luxury_goods_supply }

									set_temp_variable = { trade_amount_temp = PREV.luxury_goods_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											NOT = { check_variable = { trade_amount_temp > PREV.trade_amount_left } }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { price_temp = PREV.cost_amount_left }
										multiply_temp_variable = { price_temp = 100 }
										divide_temp_variable = { price_temp = PREV.trade_amount_left }

										set_temp_variable = { trade_value_temp = trade_amount_temp }
										multiply_temp_variable = { trade_value_temp = price_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp > PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { luxury_goods_trade_amount = trade_amount_temp }
									add_to_variable = { luxury_goods_trade_value = trade_value_temp }
									add_to_variable = { luxury_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#
				#services
					#Importing
					if = {
						limit = {
							check_variable = { services_global_trade_amount > 0 }            
						}
						set_variable = { trade_amount_left = services_global_trade_amount }
						set_variable = { cost_amount_left = services_global_trade_value }

						#Loop thru most expensive states to resolve
						set_temp_variable = { start_temp = services_trade_state_array^num }
						subtract_from_temp_variable = { start_temp = 1 }
						for_loop_effect = {
							start = start_temp
							end = 0
							compare = greater_than_or_equals
							add = -1
							value = ii


							if = {
								limit = {
									check_variable = { trade_amount_left > 0 }
								}
								#Scopes to state
								var:services_trade_state_array^ii = {
									set_temp_variable = { trade_percentage_temp = services_demand }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.services_demand }

									set_temp_variable = { trade_amount_temp = PREV.services_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											check_variable = { trade_amount_temp > PREV.trade_amount_left }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
									}

									set_temp_variable = { after_goods_temp = PREV.trade_amount_left }
									subtract_from_temp_variable = { after_goods_temp = trade_amount_temp }
									if = {
										limit = {
											check_variable = { after_goods_temp < 0.003 }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { trade_value_temp = PREV.services_global_trade_value }
										multiply_temp_variable = { trade_value_temp = trade_percentage_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp < PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { services_trade_amount = trade_amount_temp }
									add_to_variable = { services_trade_value = trade_value_temp }
									add_to_variable = { services_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}

						}
					}
					#Exporting
					else_if = {
						limit = {
							check_variable = { services_global_trade_amount < 0 }            
						}
						set_variable = { trade_amount_left = services_global_trade_amount } #Note, this is negative
						set_variable = { cost_amount_left = services_global_trade_value }
						set_variable = { original_services_supply = services_supply }
						subtract_from_variable = { original_services_supply = services_global_trade_amount }
						subtract_from_variable = { original_services_supply = services_supply_min }

						#Loops thru cheapest states to resolve
						for_each_loop = {
							array = services_trade_state_array
							value = state_temp
							index = iii
							break = cheapest_brk


							if = {
								limit = {
									check_variable = { trade_amount_left < 0 }
								}
								var:state_temp = {
									set_temp_variable = { trade_percentage_temp = services_supply }
									subtract_from_temp_variable = { trade_percentage_temp = services_supply_min }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.original_services_supply }

									set_temp_variable = { trade_amount_temp = PREV.services_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											NOT = { check_variable = { trade_amount_temp > PREV.trade_amount_left } }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { price_temp = PREV.cost_amount_left }
										multiply_temp_variable = { price_temp = 100 }
										divide_temp_variable = { price_temp = PREV.trade_amount_left }

										set_temp_variable = { trade_value_temp = trade_amount_temp }
										multiply_temp_variable = { trade_value_temp = price_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp > PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { services_trade_amount = trade_amount_temp }
									add_to_variable = { services_trade_value = trade_value_temp }
									add_to_variable = { services_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#
				#raw_goods
					#Importing
					if = {
						limit = {
							check_variable = { raw_goods_global_trade_amount > 0 }            
						}
						set_variable = { trade_amount_left = raw_goods_global_trade_amount }
						set_variable = { cost_amount_left = raw_goods_global_trade_value }

						#Loop thru most expensive states to resolve
						set_temp_variable = { start_temp = raw_goods_trade_state_array^num }
						subtract_from_temp_variable = { start_temp = 1 }
						for_loop_effect = {
							start = start_temp
							end = 0
							compare = greater_than_or_equals
							add = -1
							value = ii


							if = {
								limit = {
									check_variable = { trade_amount_left > 0 }
								}
								#Scopes to state
								var:raw_goods_trade_state_array^ii = {
									set_temp_variable = { trade_percentage_temp = raw_goods_demand }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.raw_goods_demand }

									set_temp_variable = { trade_amount_temp = PREV.raw_goods_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											check_variable = { trade_amount_temp > PREV.trade_amount_left }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
									}

									set_temp_variable = { after_goods_temp = PREV.trade_amount_left }
									subtract_from_temp_variable = { after_goods_temp = trade_amount_temp }
									if = {
										limit = {
											check_variable = { after_goods_temp < 0.003 }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { trade_value_temp = PREV.raw_goods_global_trade_value }
										multiply_temp_variable = { trade_value_temp = trade_percentage_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp < PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { raw_goods_trade_amount = trade_amount_temp }
									add_to_variable = { raw_goods_trade_value = trade_value_temp }
									add_to_variable = { raw_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}

						}
					}
					#Exporting
					else_if = {
						limit = {
							check_variable = { raw_goods_global_trade_amount < 0 }            
						}
						set_variable = { trade_amount_left = raw_goods_global_trade_amount } #Note, this is negative
						set_variable = { cost_amount_left = raw_goods_global_trade_value }
						set_variable = { original_raw_goods_supply = raw_goods_supply }
						subtract_from_variable = { original_raw_goods_supply = raw_goods_global_trade_amount }
						subtract_from_variable = { original_raw_goods_supply = raw_goods_supply_min }

						#Loops thru cheapest states to resolve
						for_each_loop = {
							array = raw_goods_trade_state_array
							value = state_temp
							index = iii
							break = cheapest_brk


							if = {
								limit = {
									check_variable = { trade_amount_left < 0 }
								}
								var:state_temp = {
									set_temp_variable = { trade_percentage_temp = raw_goods_supply }
									subtract_from_temp_variable = { trade_percentage_temp = raw_goods_supply_min }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.original_raw_goods_supply }

									set_temp_variable = { trade_amount_temp = PREV.raw_goods_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											NOT = { check_variable = { trade_amount_temp > PREV.trade_amount_left } }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { price_temp = PREV.cost_amount_left }
										multiply_temp_variable = { price_temp = 100 }
										divide_temp_variable = { price_temp = PREV.trade_amount_left }

										set_temp_variable = { trade_value_temp = trade_amount_temp }
										multiply_temp_variable = { trade_value_temp = price_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp > PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { raw_goods_trade_amount = trade_amount_temp }
									add_to_variable = { raw_goods_trade_value = trade_value_temp }
									add_to_variable = { raw_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#
				#industrial_goods
					#Importing
					if = {
						limit = {
							check_variable = { industrial_goods_global_trade_amount > 0 }            
						}
						set_variable = { trade_amount_left = industrial_goods_global_trade_amount }
						set_variable = { cost_amount_left = industrial_goods_global_trade_value }

						#Loop thru most expensive states to resolve
						set_temp_variable = { start_temp = industrial_goods_trade_state_array^num }
						subtract_from_temp_variable = { start_temp = 1 }
						for_loop_effect = {
							start = start_temp
							end = 0
							compare = greater_than_or_equals
							add = -1
							value = ii


							if = {
								limit = {
									check_variable = { trade_amount_left > 0 }
								}
								#Scopes to state
								var:industrial_goods_trade_state_array^ii = {
									set_temp_variable = { trade_percentage_temp = industrial_goods_demand }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.industrial_goods_demand }

									set_temp_variable = { trade_amount_temp = PREV.industrial_goods_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											check_variable = { trade_amount_temp > PREV.trade_amount_left }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
									}

									set_temp_variable = { after_goods_temp = PREV.trade_amount_left }
									subtract_from_temp_variable = { after_goods_temp = trade_amount_temp }
									if = {
										limit = {
											check_variable = { after_goods_temp < 0.003 }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { trade_value_temp = PREV.industrial_goods_global_trade_value }
										multiply_temp_variable = { trade_value_temp = trade_percentage_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp < PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { industrial_goods_trade_amount = trade_amount_temp }
									add_to_variable = { industrial_goods_trade_value = trade_value_temp }
									add_to_variable = { industrial_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}

						}
					}
					#Exporting
					else_if = {
						limit = {
							check_variable = { industrial_goods_global_trade_amount < 0 }            
						}
						set_variable = { trade_amount_left = industrial_goods_global_trade_amount } #Note, this is negative
						set_variable = { cost_amount_left = industrial_goods_global_trade_value }
						set_variable = { original_industrial_goods_supply = industrial_goods_supply }
						subtract_from_variable = { original_industrial_goods_supply = industrial_goods_global_trade_amount }
						subtract_from_variable = { original_industrial_goods_supply = industrial_goods_supply_min }

						#Loops thru cheapest states to resolve
						for_each_loop = {
							array = industrial_goods_trade_state_array
							value = state_temp
							index = iii
							break = cheapest_brk


							if = {
								limit = {
									check_variable = { trade_amount_left < 0 }
								}
								var:state_temp = {
									set_temp_variable = { trade_percentage_temp = industrial_goods_supply }
									subtract_from_temp_variable = { trade_percentage_temp = industrial_goods_supply_min }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.original_industrial_goods_supply }

									set_temp_variable = { trade_amount_temp = PREV.industrial_goods_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											NOT = { check_variable = { trade_amount_temp > PREV.trade_amount_left } }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { price_temp = PREV.cost_amount_left }
										multiply_temp_variable = { price_temp = 100 }
										divide_temp_variable = { price_temp = PREV.trade_amount_left }

										set_temp_variable = { trade_value_temp = trade_amount_temp }
										multiply_temp_variable = { trade_value_temp = price_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp > PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { industrial_goods_trade_amount = trade_amount_temp }
									add_to_variable = { industrial_goods_trade_value = trade_value_temp }
									add_to_variable = { industrial_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#
				clear_variable = trade_amount_left
				clear_variable = cost_amount_left
			#

			#Resolve Interstate Trade
				every_controlled_state = {
					#life_goods
						#Importing
						if = {
							limit = {
								check_variable = { life_goods_trade_amount > 0 }
							}
							#Costs & goods absorbed by pops 
							add_to_variable = { pops_money = life_goods_trade_value }
							subtract_from_variable = { pops_goods_spending = life_goods_trade_value }
							set_temp_variable = { needs_fulfilled_temp = life_goods_trade_amount }
							divide_temp_variable = { needs_fulfilled_temp = pops_life_goods_need }
							add_to_variable = { pops_life_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = pops_life_goods_fulfilled_percentage
								min = 0
								max = 1
							}
						}
						#Exporting
						else_if = {
							limit = {
								check_variable = { life_goods_trade_amount < 0 }
							}
							#Revenue & goods sold absorbed by RGOs/Aristocrats 
							#add_to_variable = { pops_money = life_goods_trade_value } #Add to either earnings or money. Never both
							add_to_variable = { pops_earnings = life_goods_trade_value }
							add_to_variable = { rgos_earnings = life_goods_trade_value }
							subtract_from_variable = { pops_rgos_life_goods_sold = life_goods_trade_amount }
						}

					#everyday_goods
						#Importing
						if = {
							limit = {
								check_variable = { everyday_goods_trade_amount > 0 }
							}
							#Costs & goods absorbed by pops 
							add_to_variable = { pops_money = everyday_goods_trade_value }
							subtract_from_variable = { pops_goods_spending = everyday_goods_trade_value }
							set_temp_variable = { needs_fulfilled_temp = everyday_goods_trade_amount }
							divide_temp_variable = { needs_fulfilled_temp = pops_everyday_goods_need }
							add_to_variable = { pops_everyday_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = pops_everyday_goods_fulfilled_percentage
								min = 0
								max = 1
							}
						}
						#Exporting
						else_if = {
							limit = {
								check_variable = { everyday_goods_trade_amount < 0 }
							}
							#Revenue & goods sold absorbed by factories/artisans 
							#Splitting between Factories and Artisans
							set_temp_variable = { artisan_share = pops_artisans_everyday_goods_production }
							multiply_temp_variable = { artisan_share = 100 }
							divide_temp_variable = { artisan_share = everyday_goods_produced_amount }

							set_temp_variable = { factory_share = factory_everyday_goods_production }
							multiply_temp_variable = { factory_share = 100 }
							divide_temp_variable = { factory_share = everyday_goods_produced_amount }

							set_temp_variable = { artisan_trade_value = everyday_goods_trade_value }
							set_temp_variable = { artisan_trade_amount = everyday_goods_trade_amount }
							multiply_temp_variable = { artisan_trade_value = artisan_share }
							divide_temp_variable = { artisan_trade_value = 100 }
							multiply_temp_variable = { artisan_trade_amount = artisan_share }
							divide_temp_variable = { artisan_trade_amount = 100 }

							set_temp_variable = { factory_trade_value = everyday_goods_trade_value }
							set_temp_variable = { factory_trade_amount = everyday_goods_trade_amount }
							multiply_temp_variable = { factory_trade_value = factory_share }
							divide_temp_variable = { factory_trade_value = 100 }
							multiply_temp_variable = { factory_trade_amount = factory_share }
							divide_temp_variable = { factory_trade_amount = 100 }

							set_temp_variable = { total_trade_value = artisan_trade_value }
							add_to_temp_variable = { total_trade_value = factory_trade_value }
							set_temp_variable = { total_trade_amount_temp = artisan_trade_amount }
							add_to_temp_variable = { total_trade_amount_temp = factory_trade_amount }

							if = {
								limit = {
									NOT = { check_variable = { total_trade_value = everyday_goods_trade_value } }
								}
								subtract_from_temp_variable = { total_trade_value = everyday_goods_trade_value }
								subtract_from_temp_variable = { factory_trade_value = total_trade_value }
							}
							if = {
								limit = {
									NOT = { check_variable = { total_trade_amount_temp = everyday_goods_trade_amount } }
								}
								subtract_from_temp_variable = { total_trade_amount_temp = everyday_goods_trade_amount }
								subtract_from_temp_variable = { factory_trade_amount = total_trade_amount_temp }
							}
							
							add_to_variable = { factory_money = factory_trade_value }
							add_to_variable = { factory_earnings = factory_trade_value }
							subtract_from_variable = { factory_everyday_goods_sold = factory_trade_amount }

							if = { 
								limit = {
									check_variable = { factory_everyday_goods_sold > factory_everyday_goods_production }
								}
								add_to_temp_variable = { artisan_trade_amount = factory_everyday_goods_sold }
								subtract_from_temp_variable = { artisan_trade_amount = factory_everyday_goods_production }
								set_variable = { factory_everyday_goods_sold = factory_everyday_goods_production }
							}

							add_to_variable = { artisans_earnings = artisan_trade_value }
							add_to_variable = { pops_earnings = artisan_trade_value }
							subtract_from_variable = { pops_artisans_everyday_goods_sold = artisan_trade_amount }

						}

					#luxury_goods
						#Importing
						if = {
							limit = {
								check_variable = { luxury_goods_trade_amount > 0 }
							}
							#Costs & goods absorbed by pops 
							add_to_variable = { pops_money = luxury_goods_trade_value }
							subtract_from_variable = { pops_goods_spending = luxury_goods_trade_value }
							set_temp_variable = { needs_fulfilled_temp = luxury_goods_trade_amount }
							divide_temp_variable = { needs_fulfilled_temp = pops_luxury_goods_need }
							add_to_variable = { pops_luxury_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = pops_luxury_goods_fulfilled_percentage
								min = 0
								max = 1
							}
						}
						#Exporting
						else_if = {
							limit = {
								check_variable = { luxury_goods_trade_amount < 0 }
							}
							#Revenue & goods sold absorbed by factories/artisans 
							#Splitting between Factories and Artisans
							set_temp_variable = { artisan_share = pops_artisans_luxury_goods_production }
							multiply_temp_variable = { artisan_share = 100 }
							divide_temp_variable = { artisan_share = luxury_goods_produced_amount }

							set_temp_variable = { factory_share = factory_luxury_goods_production }
							multiply_temp_variable = { factory_share = 100 }
							divide_temp_variable = { factory_share = luxury_goods_produced_amount }

							set_temp_variable = { artisan_trade_value = luxury_goods_trade_value }
							set_temp_variable = { artisan_trade_amount = luxury_goods_trade_amount }
							multiply_temp_variable = { artisan_trade_value = artisan_share }
							divide_temp_variable = { artisan_trade_value = 100 }
							multiply_temp_variable = { artisan_trade_amount = artisan_share }
							divide_temp_variable = { artisan_trade_amount = 100 }

							set_temp_variable = { factory_trade_value = luxury_goods_trade_value }
							set_temp_variable = { factory_trade_amount = luxury_goods_trade_amount }
							multiply_temp_variable = { factory_trade_value = factory_share }
							divide_temp_variable = { factory_trade_value = 100 }
							multiply_temp_variable = { factory_trade_amount = factory_share }
							divide_temp_variable = { factory_trade_amount = 100 }

							set_temp_variable = { total_trade_value = artisan_trade_value }
							add_to_temp_variable = { total_trade_value = factory_trade_value }
							set_temp_variable = { total_trade_amount_temp = artisan_trade_amount }
							add_to_temp_variable = { total_trade_amount_temp = factory_trade_amount }

							if = {
								limit = {
									NOT = { check_variable = { total_trade_value = luxury_goods_trade_value } }
								}
								subtract_from_temp_variable = { total_trade_value = luxury_goods_trade_value }
								subtract_from_temp_variable = { factory_trade_value = total_trade_value }
							}
							if = {
								limit = {
									NOT = { check_variable = { total_trade_amount_temp = luxury_goods_trade_amount } }
								}
								subtract_from_temp_variable = { total_trade_amount_temp = luxury_goods_trade_amount }
								subtract_from_temp_variable = { factory_trade_amount = total_trade_amount_temp }
							}
							
							add_to_variable = { factory_money = factory_trade_value }
							add_to_variable = { factory_earnings = factory_trade_value }
							subtract_from_variable = { factory_luxury_goods_sold = factory_trade_amount }

							if = { 
								limit = {
									check_variable = { factory_luxury_goods_sold > factory_luxury_goods_production }
								}
								add_to_temp_variable = { artisan_trade_amount = factory_luxury_goods_sold }
								subtract_from_temp_variable = { artisan_trade_amount = factory_luxury_goods_production }
								set_variable = { factory_luxury_goods_sold = factory_luxury_goods_production }
							}

							add_to_variable = { artisans_earnings = artisan_trade_value }
							add_to_variable = { pops_earnings = artisan_trade_value }
							subtract_from_variable = { pops_artisans_luxury_goods_sold = artisan_trade_amount }

						}

					#services
						#Importing
						if = {
							limit = {
								check_variable = { services_trade_amount > 0 }
							}
							#Costs & goods absorbed by pops 
							add_to_variable = { pops_money = services_trade_value }
							subtract_from_variable = { pops_goods_spending = services_trade_value }
							set_temp_variable = { needs_fulfilled_temp = services_trade_amount }
							divide_temp_variable = { needs_fulfilled_temp = pops_services_demand }
							add_to_variable = { pops_services_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = pops_services_fulfilled_percentage
								min = 0
								max = 1
							}
						}
						#Exporting
						else_if = {
							limit = {
								check_variable = { services_trade_amount < 0 }
							}
							#Revenue & goods sold absorbed by pops
							add_to_variable = { pops_earnings = services_trade_value }

							set_temp_variable = { capitalists_share = pops_services_production }
							multiply_temp_variable = { capitalists_share = 50 }
							set_temp_variable = { clerks_share = pops_clerks_services_production }
							multiply_temp_variable = { clerks_share = 100 }
							set_temp_variable = { professionals_share = pops_professionals_services_production }
							multiply_temp_variable = { professionals_share = 100 }

							set_temp_variable = { share_total = capitalists_share }
							add_to_temp_variable = { share_total = clerks_share }
							add_to_temp_variable = { share_total = professionals_share }
							divide_temp_variable = { share_total = 100 }

							divide_temp_variable = { capitalists_share = share_total }
							divide_temp_variable = { clerks_share = share_total }
							divide_temp_variable = { professionals_share = share_total }

							set_temp_variable = { capitalists_value = services_trade_value }
							multiply_temp_variable = { capitalists_value = capitalists_share }
							divide_temp_variable = { capitalists_value = 100 }
							set_temp_variable = { clerks_value = services_trade_value }
							multiply_temp_variable = { clerks_value = clerks_share }
							divide_temp_variable = { clerks_value = 100 }
							set_temp_variable = { professionals_value = services_trade_value }
							multiply_temp_variable = { professionals_value = professionals_share }
							divide_temp_variable = { professionals_value = 100 }

							add_to_variable = { capitalists_earnings = capitalists_value }
							add_to_variable = { clerks_earnings = clerks_value }
							add_to_variable = { professionals_earnings = professionals_value }

							subtract_from_variable = { pops_services_sold = services_trade_amount }
						}

					#raw_goods
						#Importing
						if = {
							limit = {
								check_variable = { raw_goods_trade_amount > 0 }
							}
							#Costs & goods absorbed by factories/artisans
							#Splitting between Factories and Artisans
							set_temp_variable = { artisan_share = pops_artisans_raw_goods_demand }
							multiply_temp_variable = { artisan_share = 100 }
							divide_temp_variable = { artisan_share = raw_goods_demand }

							set_temp_variable = { factory_share = factory_raw_goods_demand }
							multiply_temp_variable = { factory_share = 100 }
							divide_temp_variable = { factory_share = raw_goods_demand }

							set_temp_variable = { artisan_trade_value = raw_goods_trade_value }
							set_temp_variable = { artisan_trade_amount = raw_goods_trade_amount }
							multiply_temp_variable = { artisan_trade_value = artisan_share }
							divide_temp_variable = { artisan_trade_value = 100 }
							multiply_temp_variable = { artisan_trade_amount = artisan_share }
							divide_temp_variable = { artisan_trade_amount = 100 }

							set_temp_variable = { factory_trade_value = raw_goods_trade_value }
							set_temp_variable = { factory_trade_amount = raw_goods_trade_amount }
							multiply_temp_variable = { factory_trade_value = factory_share }
							divide_temp_variable = { factory_trade_value = 100 }
							multiply_temp_variable = { factory_trade_amount = factory_share }
							divide_temp_variable = { factory_trade_amount = 100 }

							set_temp_variable = { total_trade_value = artisan_trade_value }
							add_to_temp_variable = { total_trade_value = factory_trade_value }
							set_temp_variable = { total_trade_amount_temp = artisan_trade_amount }
							add_to_temp_variable = { total_trade_amount_temp = factory_trade_amount }

							if = {
								limit = {
									NOT = { check_variable = { total_trade_value = raw_goods_trade_value } }
								}
								subtract_from_temp_variable = { total_trade_value = raw_goods_trade_value }
								subtract_from_temp_variable = { factory_trade_value = total_trade_value }
							}
							if = {
								limit = {
									NOT = { check_variable = { total_trade_amount_temp = raw_goods_trade_amount } }
								}
								subtract_from_temp_variable = { total_trade_amount_temp = raw_goods_trade_amount }
								subtract_from_temp_variable = { factory_trade_amount = total_trade_amount_temp }
							}
							
							add_to_variable = { factory_money = factory_trade_value }
							subtract_from_variable = { factory_spending = factory_trade_value }
							set_temp_variable = { needs_fulfilled_temp = factory_trade_amount }
							divide_temp_variable = { needs_fulfilled_temp = factory_raw_goods_need }
							add_to_variable = { factory_raw_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = factory_raw_goods_fulfilled_percentage
								min = 0
								max = 1
							}

							add_to_variable = { pops_money = artisan_trade_value }
							subtract_from_variable = { pops_spending = artisan_trade_value }
							set_temp_variable = { needs_fulfilled_temp = artisan_trade_amount }
							divide_temp_variable = { needs_fulfilled_temp = pops_artisans_raw_goods_need }
							add_to_variable = { pops_artisans_raw_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = pops_artisans_raw_goods_fulfilled_percentage
								min = 0
								max = 1
							}

						}
						#Exporting
						else_if = {
							limit = {
								check_variable = { raw_goods_trade_amount < 0 }
							}
							#Revenue & goods sold absorbed by factories/artisans 
							#add_to_variable = { pops_money = raw_goods_trade_value } #Add to either earnings or money. Never both
							add_to_variable = { pops_earnings = raw_goods_trade_value }
							add_to_variable = { rgos_earnings = raw_goods_trade_value }

							subtract_from_variable = { pops_rgos_raw_goods_sold = raw_goods_trade_amount }

						}

					#industrial_goods
						#Importing
						if = {
							limit = {
								check_variable = { industrial_goods_trade_amount > 0 }
							}
							#Costs & goods split between factories, infra, & construction 
							#Splitting between Factories and Construction
							set_temp_variable = { factory_share = factory_industrial_goods_demand }
							multiply_temp_variable = { factory_share = 100 }
							divide_temp_variable = { factory_share = industrial_goods_demand }

							set_temp_variable = { infra_share = infrastructure_industrial_goods_demand }
							multiply_temp_variable = { infra_share = 100 }
							divide_temp_variable = { infra_share = industrial_goods_demand }
							
							set_temp_variable = { factory_trade_value = industrial_goods_trade_value }
							set_temp_variable = { factory_trade_amount = industrial_goods_trade_amount }
							multiply_temp_variable = { factory_trade_value = factory_share }
							divide_temp_variable = { factory_trade_value = 100 }
							multiply_temp_variable = { factory_trade_amount = factory_share }
							divide_temp_variable = { factory_trade_amount = 100 }
							
							set_temp_variable = { infra_trade_value = industrial_goods_trade_value }
							set_temp_variable = { infra_trade_amount = industrial_goods_trade_amount }
							multiply_temp_variable = { infra_trade_value = infra_share }
							divide_temp_variable = { infra_trade_value = 100 }
							multiply_temp_variable = { infra_trade_amount = infra_share }
							divide_temp_variable = { infra_trade_amount = 100 }

							if = { #If there's any construction...
								limit = {
									OR = {
										check_variable = { factory_everyday_goods_construction_industrial_goods_demand > 0 }
										check_variable = { factory_luxury_goods_construction_industrial_goods_demand > 0 }
										check_variable = { factory_industrial_goods_construction_industrial_goods_demand > 0 }
										check_variable = { infrastructure_construction_industrial_goods_demand > 0 }
									}
								}
								set_temp_variable = { construction_everyday_goods_share = factory_everyday_goods_construction_industrial_goods_demand }
								multiply_temp_variable = { construction_everyday_goods_share = 100 }
								divide_temp_variable = { construction_everyday_goods_share = industrial_goods_demand }

								set_temp_variable = { construction_luxury_goods_share = factory_luxury_goods_construction_industrial_goods_demand }
								multiply_temp_variable = { construction_luxury_goods_share = 100 }
								divide_temp_variable = { construction_luxury_goods_share = industrial_goods_demand }

								set_temp_variable = { construction_industrial_goods_share = factory_industrial_goods_construction_industrial_goods_demand }
								multiply_temp_variable = { construction_industrial_goods_share = 100 }
								divide_temp_variable = { construction_industrial_goods_share = industrial_goods_demand }

								set_temp_variable = { construction_infrastructure_share = finfrastructure_construction_industrial_goods_demand }
								multiply_temp_variable = { construction_infrastructure_share = 100 }
								divide_temp_variable = { construction_infrastructure_share = industrial_goods_demand }

								set_temp_variable = { construction_everyday_goods_trade_value = industrial_goods_trade_value }
								set_temp_variable = { construction_everyday_goods_trade_amount = industrial_goods_trade_amount }
								multiply_temp_variable = { construction_everyday_goods_trade_value = construction_everyday_goods_share }
								divide_temp_variable = { construction_everyday_goods_trade_value = 100 }
								multiply_temp_variable = { construction_everyday_goods_trade_amount = construction_everyday_goods_share }
								divide_temp_variable = { construction_everyday_goods_trade_amount = 100 }

								set_temp_variable = { construction_luxury_goods_trade_value = industrial_goods_trade_value }
								set_temp_variable = { construction_luxury_goods_trade_amount = industrial_goods_trade_amount }
								multiply_temp_variable = { construction_luxury_goods_trade_value = construction_luxury_goods_share }
								divide_temp_variable = { construction_luxury_goods_trade_value = 100 }
								multiply_temp_variable = { construction_luxury_goods_trade_amount = construction_luxury_goods_share }
								divide_temp_variable = { construction_luxury_goods_trade_amount = 100 }

								set_temp_variable = { construction_industrial_goods_trade_value = industrial_goods_trade_value }
								set_temp_variable = { construction_industrial_goods_trade_amount = industrial_goods_trade_amount }
								multiply_temp_variable = { construction_industrial_goods_trade_value = construction_industrial_goods_share }
								divide_temp_variable = { construction_industrial_goods_trade_value = 100 }
								multiply_temp_variable = { construction_industrial_goods_trade_amount = construction_industrial_goods_share }
								divide_temp_variable = { construction_industrial_goods_trade_amount = 100 }

								set_temp_variable = { construction_infrastructure_trade_value = industrial_goods_trade_value }
								set_temp_variable = { construction_infrastructure_trade_amount = industrial_goods_trade_amount }
								multiply_temp_variable = { construction_infrastructure_trade_value = construction_infrastructure_share }
								divide_temp_variable = { construction_infrastructure_trade_value = 100 }
								multiply_temp_variable = { construction_infrastructure_trade_amount = construction_infrastructure_share }
								divide_temp_variable = { construction_infrastructure_trade_amount = 100 }


								set_temp_variable = { total_trade_value = construction_everyday_goods_trade_value }
								add_to_temp_variable = { total_trade_value = construction_luxury_goods_trade_value }
								add_to_temp_variable = { total_trade_value = construction_industrial_goods_trade_value }
								add_to_temp_variable = { total_trade_value = construction_infrastructure_trade_value }
								add_to_temp_variable = { total_trade_value = factory_trade_value }
								add_to_temp_variable = { total_trade_value = infra_trade_value }
								set_temp_variable = { total_trade_amount_temp = construction_everyday_goods_trade_amount }
								add_to_temp_variable = { total_trade_amount_temp = construction_luxury_goods_trade_amount }
								add_to_temp_variable = { total_trade_amount_temp = construction_industrial_goods_trade_amount }
								add_to_temp_variable = { total_trade_amount_temp = construction_infrastructure_trade_amount }
								add_to_temp_variable = { total_trade_amount_temp = factory_trade_amount }
								add_to_temp_variable = { total_trade_amount_temp = infra_trade_amount }

								if = {
									limit = {
										NOT = { check_variable = { total_trade_value = industrial_goods_trade_value } }
									}
									subtract_from_temp_variable = { total_trade_value = industrial_goods_trade_value }
									subtract_from_temp_variable = { construction_everyday_goods_trade_value = total_trade_value }
								}
								if = {
									limit = {
										NOT = { check_variable = { total_trade_amount_temp = industrial_goods_trade_amount } }
									}
									subtract_from_temp_variable = { total_trade_amount_temp = industrial_goods_trade_amount }
									subtract_from_temp_variable = { construction_everyday_goods_trade_amount = total_trade_amount_temp }
								}

								#Goods
								if = { 
									limit = {
										check_variable = { construction_everyday_goods_trade_amount > factory_everyday_goods_construction_industrial_goods_need }
									}
									subtract_from_temp_variable = { construction_everyday_goods_trade_amount = factory_everyday_goods_construction_industrial_goods_need }
									set_variable = { factory_everyday_goods_construction_industrial_goods_need = 0 }

									add_to_temp_variable = { construction_luxury_goods_trade_amount = construction_everyday_goods_trade_amount }
								}
								else = {
									subtract_from_variable = { factory_everyday_goods_construction_industrial_goods_need = construction_everyday_goods_trade_amount }
								}
								add_to_variable = { factory_everyday_goods_construction_investment_money = construction_everyday_goods_trade_value }
					
								if = { 
									limit = {
										check_variable = { construction_luxury_goods_trade_amount > factory_luxury_goods_construction_industrial_goods_need }
									}
									subtract_from_temp_variable = { construction_luxury_goods_trade_amount = factory_luxury_goods_construction_industrial_goods_need }
									set_variable = { factory_luxury_goods_construction_industrial_goods_need = 0 }

									add_to_temp_variable = { construction_industrial_goods_trade_amount = construction_luxury_goods_trade_amount }
								}
								else = {
									subtract_from_variable = { factory_luxury_goods_construction_industrial_goods_need = construction_luxury_goods_trade_amount }
								}
								add_to_variable = { factory_luxury_goods_construction_investment_money = construction_luxury_goods_trade_value }

								if = { 
									limit = {
										check_variable = { construction_industrial_goods_trade_amount > factory_industrial_goods_construction_industrial_goods_need }
									}
									subtract_from_temp_variable = { construction_industrial_goods_trade_amount = factory_industrial_goods_construction_industrial_goods_need }
									set_variable = { factory_industrial_goods_construction_industrial_goods_need = 0 }

									add_to_temp_variable = { construction_infrastructure_trade_amount = construction_industrial_goods_trade_amount }
								}
								else = {
									subtract_from_variable = { factory_industrial_goods_construction_industrial_goods_need = construction_industrial_goods_trade_amount }
								}
								add_to_variable = { factory_industrial_goods_construction_investment_money = construction_industrial_goods_trade_value }

								if = { 
									limit = {
										check_variable = { construction_infrastructure_trade_amount > infrastructure_construction_industrial_goods_need }
									}
									subtract_from_temp_variable = { construction_infrastructure_trade_amount = infrastructure_construction_industrial_goods_need }
									set_variable = { infrastructure_construction_industrial_goods_need = 0 }

									add_to_temp_variable = { factory_trade_amount = construction_infrastructure_trade_amount }
								}
								else = {
									subtract_from_variable = { infrastructure_construction_industrial_goods_need = construction_infrastructure_trade_amount }
								}
								add_to_variable = { infrastructure_construction_investment_money = construction_infrastructure_trade_value }

								#Money
								if = { 
									limit = {
										check_variable = { factory_everyday_goods_construction_investment_money < 0 }
									}
									add_to_variable = { factory_luxury_goods_construction_investment_money = factory_everyday_goods_construction_investment_money }
									set_variable = { factory_everyday_goods_construction_investment_money = 0 }
								}
								if = { 
									limit = {
										check_variable = { factory_luxury_goods_construction_investment_money < 0 }
									}
									add_to_variable = { factory_industrial_goods_construction_investment_money = factory_luxury_goods_construction_investment_money }
									set_variable = { factory_luxury_goods_construction_investment_money = 0 }
								}
								if = { 
									limit = {
										check_variable = { factory_industrial_goods_construction_investment_money < 0 }
									}
									add_to_variable = { infrastructure_construction_investment_money = factory_industrial_goods_construction_investment_money }
									set_variable = { factory_industrial_goods_construction_investment_money = 0 }
								}
								if = { 
									limit = {
										check_variable = { infrastructure_construction_investment_money < 0 }
									}
									add_to_variable = { factory_money = infrastructure_construction_investment_money }
									subtract_from_variable = { factory_spending = infrastructure_construction_investment_money }
									set_variable = { infrastructure_construction_investment_money = 0 }
								}

							}
							else = {
								set_temp_variable = { total_trade_value = factory_trade_value }
								add_to_temp_variable = { total_trade_value = infra_trade_value }
								set_temp_variable = { total_trade_amount_temp = factory_trade_amount }
								add_to_temp_variable = { total_trade_amount_temp = infra_trade_amount }

								if = {
									limit = {
										NOT = { check_variable = { total_trade_value = industrial_goods_trade_value } }
									}
									subtract_from_temp_variable = { total_trade_value = industrial_goods_trade_value }
									subtract_from_temp_variable = { factory_trade_value = total_trade_value }
								}
								if = {
									limit = {
										NOT = { check_variable = { total_trade_amount_temp = industrial_goods_trade_amount } }
									}
									subtract_from_temp_variable = { total_trade_amount_temp = industrial_goods_trade_amount }
									subtract_from_temp_variable = { factory_trade_amount = total_trade_amount_temp }
								}
							}

							add_to_variable = { factory_money = factory_trade_value }
							subtract_from_variable = { factory_spending = factory_trade_value }
							set_temp_variable = { needs_fulfilled_temp = factory_trade_amount }
							divide_temp_variable = { needs_fulfilled_temp = factory_industrial_goods_need }
							add_to_variable = { factory_industrial_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = factory_industrial_goods_fulfilled_percentage
								min = 0
								max = 1
							}

							add_to_variable = { infrastructure_money = infra_trade_value }
							set_temp_variable = { needs_fulfilled_temp = infra_trade_amount }
							divide_temp_variable = { needs_fulfilled_temp = infrastructure_industrial_goods_need }
							add_to_variable = { infrastructure_industrial_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = infrastructure_industrial_goods_fulfilled_percentage
								min = 0
								max = 1
							}
						}
						#Exporting
						else_if = {
							limit = {
								check_variable = { industrial_goods_trade_amount < 0 }
							}
							#Revenue & goods sold absorbed by factories/artisans 
							#Splitting between Factories and Artisans
							set_temp_variable = { artisan_share = pops_artisans_industrial_goods_production }
							multiply_temp_variable = { artisan_share = 100 }
							divide_temp_variable = { artisan_share = industrial_goods_produced_amount }

							set_temp_variable = { factory_share = factory_industrial_goods_production }
							multiply_temp_variable = { factory_share = 100 }
							divide_temp_variable = { factory_share = industrial_goods_produced_amount }

							set_temp_variable = { artisan_trade_value = industrial_goods_trade_value }
							set_temp_variable = { artisan_trade_amount = industrial_goods_trade_amount }
							multiply_temp_variable = { artisan_trade_value = artisan_share }
							divide_temp_variable = { artisan_trade_value = 100 }
							multiply_temp_variable = { artisan_trade_amount = artisan_share }
							divide_temp_variable = { artisan_trade_amount = 100 }

							set_temp_variable = { factory_trade_value = industrial_goods_trade_value }
							set_temp_variable = { factory_trade_amount = industrial_goods_trade_amount }
							multiply_temp_variable = { factory_trade_value = factory_share }
							divide_temp_variable = { factory_trade_value = 100 }
							multiply_temp_variable = { factory_trade_amount = factory_share }
							divide_temp_variable = { factory_trade_amount = 100 }

							set_temp_variable = { total_trade_value = artisan_trade_value }
							add_to_temp_variable = { total_trade_value = factory_trade_value }
							set_temp_variable = { total_trade_amount_temp = artisan_trade_amount }
							add_to_temp_variable = { total_trade_amount_temp = factory_trade_amount }

							if = {
								limit = {
									NOT = { check_variable = { total_trade_value = industrial_goods_trade_value } }
								}
								subtract_from_temp_variable = { total_trade_value = industrial_goods_trade_value }
								subtract_from_temp_variable = { factory_trade_value = total_trade_value }
							}
							if = {
								limit = {
									NOT = { check_variable = { total_trade_amount_temp = industrial_goods_trade_amount } }
								}
								subtract_from_temp_variable = { total_trade_amount_temp = industrial_goods_trade_amount }
								subtract_from_temp_variable = { factory_trade_amount = total_trade_amount_temp }
							}
							
							add_to_variable = { factory_money = factory_trade_value }
							add_to_variable = { factory_earnings = factory_trade_value }
							subtract_from_variable = { factory_industrial_goods_sold = factory_trade_amount }

							if = { 
								limit = {
									check_variable = { factory_industrial_goods_sold > factory_industrial_goods_production }
								}
								add_to_temp_variable = { artisan_trade_amount = factory_industrial_goods_sold }
								subtract_from_temp_variable = { artisan_trade_amount = factory_industrial_goods_production }
								set_variable = { factory_industrial_goods_sold = factory_industrial_goods_production }
							}

							add_to_variable = { artisans_earnings = artisan_trade_value }
							add_to_variable = { pops_earnings = artisan_trade_value }
							subtract_from_variable = { pops_artisans_industrial_goods_sold = artisan_trade_amount }
						}

				}
			#

			every_controlled_state = {
				infra_shopping = yes
				factory_shopping = yes
				pops_shopping = yes


				#Factory Wages & Profit
					set_variable = { factory_wages = factory_earnings }
					multiply_variable = { factory_wages = global.factory_wages_revenue_percentage }

					set_temp_variable = { factory_wage_max_money_temp = global.factory_wages_max_money_percentage }
					multiply_temp_variable = { factory_wage_max_money_temp = factory_money_limit }
					multiply_temp_variable = { factory_wage_max_money_temp = factory_employment_amount }
					divide_temp_variable = { factory_wage_max_money_temp = factory_employment_amount_max }
					add_to_variable = { factory_wages = factory_wage_max_money_temp }

					add_to_variable = { factory_spending = factory_wages }

					set_variable = { factory_profit = factory_earnings }
					subtract_from_variable = { factory_profit = factory_spending }

					set_temp_variable = { bonuses_temp = factory_profit }
					multiply_temp_variable = { bonuses_temp = global.factory_wages_profit_percentage }
					add_to_variable = { factory_wages = bonuses_temp }

					add_to_variable = { factory_spending = bonuses_temp }
					subtract_from_variable = { factory_profit = bonuses_temp }

					subtract_from_variable = { factory_money = factory_wages }
					if = {
						limit = {
							check_variable = { factory_money < 0 }
						}
						add_to_variable = { factory_wages = factory_money }
						set_variable = { factory_money = 0 }
					}
					add_to_variable = { pops_earnings = factory_wages }

					set_temp_variable = { capitalists_share = capitalists_percentage }
					multiply_temp_variable = { capitalists_share = 900 }
					set_temp_variable = { craftsmen_share = craftsmen_percentage }
					multiply_temp_variable = { craftsmen_share = 100 }
					set_temp_variable = { specialists_share = specialists_percentage }
					multiply_temp_variable = { specialists_share = 100 }
					set_temp_variable = { modifier_temp = global.pops_specialists_production_bonus }
					add_to_temp_variable = { modifier_temp = 1 }
					multiply_temp_variable = { specialists_share = modifier_temp }

					set_temp_variable = { share_total = capitalists_share }
					add_to_temp_variable = { share_total = craftsmen_share }
					add_to_temp_variable = { share_total = specialists_share }
					divide_temp_variable = { share_total = 100 }

					divide_temp_variable = { capitalists_share = share_total }
					divide_temp_variable = { craftsmen_share = share_total }
					divide_temp_variable = { specialists_share = share_total }

					set_temp_variable = { capitalists_value = factory_wages }
					multiply_temp_variable = { capitalists_value = capitalists_share }
					divide_temp_variable = { capitalists_value = 100 }
					set_temp_variable = { craftsmen_value = factory_wages }
					multiply_temp_variable = { craftsmen_value = craftsmen_share }
					divide_temp_variable = { craftsmen_value = 100 }
					set_temp_variable = { specialists_value = factory_wages }
					multiply_temp_variable = { specialists_value = specialists_share }
					divide_temp_variable = { specialists_value = 100 }

					add_to_variable = { capitalists_earnings = capitalists_value }
					add_to_variable = { craftsmen_earnings = craftsmen_value }
					add_to_variable = { specialists_earnings = specialists_value }
					
					if = {
						limit = {
							check_variable = { factory_money > factory_money_limit }
						}
						set_temp_variable = { excess_temp = factory_money }
						subtract_from_temp_variable = { excess_temp = factory_money_limit }
						add_to_variable = { pops_earnings = excess_temp }
						set_temp_variable = { capitalists_value = excess_temp }
						multiply_temp_variable = { capitalists_value = capitalists_share }
						divide_temp_variable = { capitalists_value = 100 }
						set_temp_variable = { craftsmen_value = excess_temp }
						multiply_temp_variable = { craftsmen_value = craftsmen_share }
						divide_temp_variable = { craftsmen_value = 100 }
						set_temp_variable = { specialists_value = excess_temp }
						multiply_temp_variable = { specialists_value = specialists_share }
						divide_temp_variable = { specialists_value = 100 }

						add_to_variable = { capitalists_earnings = capitalists_value }
						add_to_variable = { craftsmen_earnings = craftsmen_value }
						add_to_variable = { specialists_earnings = specialists_value }

						subtract_from_variable = { factory_money = excess_temp }
					}
				#

				add_to_variable = { pops_earnings = pops_rgos_valuable_goods_production } #Gold in dem hills
				add_to_variable = { rgos_earnings = pops_rgos_valuable_goods_production }

				#RGO Revenue into Aristocrats

					set_temp_variable = { aristocrats_share = aristocrats_percentage }
					multiply_temp_variable = { aristocrats_share = 900 }
					set_temp_variable = { rgos_share = rgos_percentage }
					multiply_temp_variable = { rgos_share = 100 }

					set_temp_variable = { share_total = aristocrats_share }
					add_to_temp_variable = { share_total = rgos_share }
					divide_temp_variable = { share_total = 100 }

					divide_temp_variable = { aristocrats_share = share_total }
					divide_temp_variable = { rgos_share = share_total }

					set_temp_variable = { aristocrats_value = rgos_earnings }
					multiply_temp_variable = { aristocrats_value = aristocrats_share }
					divide_temp_variable = { aristocrats_value = 100 }
					set_temp_variable = { rgos_value = rgos_earnings }
					multiply_temp_variable = { rgos_value = rgos_share }
					divide_temp_variable = { rgos_value = 100 }

					set_variable = { aristocrats_earnings = aristocrats_value }
					set_variable = { rgos_earnings = rgos_value }
				#

				#Pop Demographics
					set_variable = { pops_natural_birth_amount = pops_amount }
					divide_variable = { pops_natural_birth_amount = 100 }
					multiply_variable = { pops_natural_birth_amount = global.pops_natural_birth_base_rate }
					divide_variable = { pops_natural_birth_amount = 12 }

					set_variable = { pops_natural_death_amount = pops_amount }
					divide_variable = { pops_natural_death_amount = 100 }
					multiply_variable = { pops_natural_death_amount = global.pops_natural_death_base_rate }
					divide_variable = { pops_natural_death_amount = 12 }

					set_variable = { pops_accidents_death_amount = pops_amount }
					divide_variable = { pops_accidents_death_amount = 100 }
					multiply_variable = { pops_accidents_death_amount = global.pops_accidents_death_base_rate }
					divide_variable = { pops_accidents_death_amount = 12 }

					set_variable = { pops_crime_death_amount = pops_amount }
					divide_variable = { pops_crime_death_amount = 100 }
					multiply_variable = { pops_crime_death_amount = global.pops_crime_death_base_rate }
					divide_variable = { pops_crime_death_amount = 12 }

					set_variable = { pops_other_death_amount = pops_amount }
					divide_variable = { pops_other_death_amount = 100 }
					multiply_variable = { pops_other_death_amount = global.pops_other_death_base_rate }
					divide_variable = { pops_other_death_amount = 12 }

					if = {
						limit = {
							check_variable = { pops_annual_life_goods_fulfilled_percentage < 0.1 } #Starvation
						}
						if = {
							limit = {
								check_variable = { pops_amount > 10 } #Low pop amounts may lead to them not getting goods by default
							}
							set_temp_variable = { pops_starvation_death_amount_temp = pops_amount }
							divide_temp_variable = { pops_starvation_death_amount_temp = 100 }
							multiply_temp_variable = { pops_starvation_death_amount_temp = global.pops_maximum_starvation_death_rate }
							divide_temp_variable = { pops_starvation_death_amount_temp = 12 }

							set_temp_variable = { percentage_applied_temp = 0.1 }
							subtract_from_temp_variable = { percentage_applied_temp = pops_annual_life_goods_fulfilled_percentage }
							multiply_temp_variable = { percentage_applied_temp = 10 }
							multiply_temp_variable = { pops_starvation_death_amount_temp = percentage_applied_temp }
							add_to_variable = { pops_other_death_amount = pops_starvation_death_amount_temp }
						}
					}

					set_variable = { pops_net_change_amount = pops_natural_birth_amount }
					subtract_from_variable = { pops_net_change_amount = pops_natural_death_amount }
					subtract_from_variable = { pops_net_change_amount = pops_accidents_death_amount }
					subtract_from_variable = { pops_net_change_amount = pops_crime_death_amount }
					subtract_from_variable = { pops_net_change_amount = pops_other_death_amount }

					add_to_variable = { pops_amount = pops_net_change_amount }

					#Pop Promotions/Demotions
						set_variable = { rgo_promotion_demotion_change = 0 }
						set_variable = { artisans_promotion_demotion_change = 0 }
						set_variable = { craftsmen_promotion_demotion_change = 0 }
						set_variable = { specialists_promotion_demotion_change = 0 }
						set_variable = { clerks_promotion_demotion_change = 0 }
						set_variable = { professionals_promotion_demotion_change = 0 }
						set_variable = { soldiers_promotion_demotion_change = 0 }
						set_variable = { officers_promotion_demotion_change = 0 }
						set_variable = { capitalists_promotion_demotion_change = 0 }
						set_variable = { aristocrats_promotion_demotion_change = 0 }

						if = {
							limit = {
								check_variable = { factory_employment_amount < factory_employment_amount_max }
								check_variable = { craftsmen_percentage < 100 }
								check_variable = { rgos_percentage > 0 }
							}
							#RGOs Promote into Craftsmen
							add_to_variable = { rgo_promotion_demotion_change = -0.01 }
							add_to_variable = { rgos_percentage = -0.01 }
							add_to_variable = { craftsmen_promotion_demotion_change = 0.01 }
							add_to_variable = { craftsmen_percentage = 0.01 }

							set_temp_variable = { factory_employment_temp = factory_employment_amount_max }
							multiply_temp_variable = { factory_employment_temp = 0.9 }
							if = {
								limit = {
									check_variable = { factory_employment_amount < factory_employment_temp }
									check_variable = { craftsmen_percentage < 100 }
									check_variable = { rgos_percentage > 0 }
								}
								#RGOs Promote into Craftsmen
								add_to_variable = { rgo_promotion_demotion_change = -0.01 }
								add_to_variable = { rgos_percentage = -0.01 }
								add_to_variable = { craftsmen_promotion_demotion_change = 0.01 }
								add_to_variable = { craftsmen_percentage = 0.01 }

								set_temp_variable = { factory_employment_temp = factory_employment_amount_max }
								multiply_temp_variable = { factory_employment_temp = 0.9 }
								if = {
									limit = {
										check_variable = { factory_employment_amount < factory_employment_temp }
										check_variable = { craftsmen_percentage < 100 }
										check_variable = { rgos_percentage > 0 }
									}
									#RGOs Promote into Craftsmen
									add_to_variable = { rgo_promotion_demotion_change = -0.01 }
									add_to_variable = { rgos_percentage = -0.01 }
									add_to_variable = { craftsmen_promotion_demotion_change = 0.01 }
									add_to_variable = { craftsmen_percentage = 0.01 }

									set_temp_variable = { factory_employment_temp = factory_employment_amount_max }
									multiply_temp_variable = { factory_employment_temp = 0.9 }
									if = {
										limit = {
											check_variable = { factory_employment_amount < factory_employment_temp }
											check_variable = { craftsmen_percentage < 100 }
											check_variable = { rgos_percentage > 0 }
										}
										#RGOs Promote into Craftsmen
										add_to_variable = { rgo_promotion_demotion_change = -0.01 }
										add_to_variable = { rgos_percentage = -0.01 }
										add_to_variable = { craftsmen_promotion_demotion_change = 0.01 }
										add_to_variable = { craftsmen_percentage = 0.01 }
									}
								}
							}
						}
						if = {
							limit = {
								check_variable = { craftsmen_unemployment_percentage > 0  }
								check_variable = { rgos_percentage < 100 }
								check_variable = { craftsmen_percentage > 0 }
							}
							#Craftsmen Demote into RGOs
							add_to_variable = { craftsmen_promotion_demotion_change = -0.01 }
							add_to_variable = { craftsmen_percentage = -0.01 }
							add_to_variable = { rgo_promotion_demotion_change = 0.01 }
							add_to_variable = { rgos_percentage = 0.01 }
							if = {
								limit = {
									check_variable = { craftsmen_unemployment_percentage > 5  }
									check_variable = { rgos_percentage < 100 }
									check_variable = { craftsmen_percentage > 0 }
								}
								#Craftsmen Demote into RGOs
								add_to_variable = { craftsmen_promotion_demotion_change = -0.01 }
								add_to_variable = { craftsmen_percentage = -0.01 }
								add_to_variable = { rgo_promotion_demotion_change = 0.01 }
								add_to_variable = { rgos_percentage = 0.01 }
								if = {
									limit = {
										check_variable = { craftsmen_unemployment_percentage > 10  }
										check_variable = { rgos_percentage < 100 }
										check_variable = { craftsmen_percentage > 0 }
									}
									#Craftsmen Demote into RGOs
									add_to_variable = { craftsmen_promotion_demotion_change = -0.01 }
									add_to_variable = { craftsmen_percentage = -0.01 }
									add_to_variable = { rgo_promotion_demotion_change = 0.01 }
									add_to_variable = { rgos_percentage = 0.01 }
								}
							}
						}
					#
				#
			}

			set_variable = { private_factory_amount = 0 }
			every_controlled_state = {
				calculate_base_price = yes
				calculate_price = yes
				pops_update = yes
				factories_update = yes
				pops_update = yes
				factories_update = yes

				#Resolve Construction
					end_everyday_goods_factory_construction = yes
					end_luxury_goods_factory_construction = yes
					end_industrial_goods_factory_construction = yes

					end_infrastructure_construction = yes
				#

				#Resolve Infra Crumbling
					if = {
						limit = {
							check_variable = { infrastructure_level > 0 }
							check_variable = { infrastructure_industrial_goods_fulfilled_percentage < global.infrastructure_crumbling_threshold }
						}
						add_to_variable = { infrastructure_crumbling_ticks = 1 }
						if = {
							limit = {
								NOT = { check_variable = { infrastructure_crumbling_ticks < global.infrastructure_crumbling_ticks_bar } } 
							}
							remove_building  = {
								type = infrastructure
								level = 1
							}
							set_variable = { infrastructure_crumbling_ticks = 0 }
						}
					}
					else = {
						subtract_from_variable = { infrastructure_crumbling_ticks = 1 }
						if = {
							limit = {
								check_variable = { infrastructure_crumbling_ticks < 0 }
							}
							set_variable = { infrastructure_crumbling_ticks = 0 }
						}
					}
				#

				#Infra Modifiers
					set_variable = { infrastructure_rgo_output_modifier = infrastructure_level }
					multiply_variable = { infrastructure_rgo_output_modifier = global.infrastructure_rgo_output_modifier }
					multiply_variable = { infrastructure_rgo_output_modifier = infrastructure_industrial_goods_fulfilled_percentage }

					set_variable = { infrastructure_factory_throughput_modifier = infrastructure_level }
					multiply_variable = { infrastructure_factory_throughput_modifier = global.infrastructure_factory_throughput_modifier }
					multiply_variable = { infrastructure_factory_throughput_modifier = infrastructure_industrial_goods_fulfilled_percentage }

					set_variable = { infrastructure_build_cost_modifier = infrastructure_level }
					multiply_variable = { infrastructure_build_cost_modifier = global.infrastructure_build_cost_modifier }
					multiply_variable = { infrastructure_build_cost_modifier = infrastructure_industrial_goods_fulfilled_percentage }

					set_variable = { infrastructure_transport_cost_modifier = infrastructure_level }
					multiply_variable = { infrastructure_transport_cost_modifier = global.infrastructure_transport_cost_modifier }
					set_temp_variable = { reduction_effect_temp = infrastructure_transport_cost_reduction_effect }
					add_to_temp_variable = { reduction_effect_temp = 1 }
					multiply_variable = { infrastructure_transport_cost_modifier = reduction_effect_temp }
					multiply_variable = { infrastructure_transport_cost_modifier = infrastructure_industrial_goods_fulfilled_percentage }

					set_variable = { infrastructure_shipping_cost_modifier = infrastructure_level }
					multiply_variable = { infrastructure_shipping_cost_modifier = global.infrastructure_shipping_cost_modifier }
					set_temp_variable = { reduction_effect_temp = infrastructure_shipping_cost_reduction_effect }
					add_to_temp_variable = { reduction_effect_temp = 1 }
					multiply_variable = { infrastructure_shipping_cost_modifier = reduction_effect_temp }
					multiply_variable = { infrastructure_shipping_cost_modifier = infrastructure_industrial_goods_fulfilled_percentage }
				#

				#Valuable Goods Decay
					if = {
						limit = {
							has_state_flag = pops_rgos_valuable_goods_flag
						}
						add_to_variable = { pops_rgos_valuable_goods_decay = 1 }
						if = {
							limit = {
								has_state_flag = pops_rgos_valuable_goods_untapped_flag
								NOT = { check_variable = { pops_rgos_valuable_goods_decay < global.pops_rgos_valuable_goods_untapped_decay_max }}
							}
							subtract_from_variable = { pops_rgos_valuable_goods_decay = global.pops_rgos_valuable_goods_untapped_decay_max }
							clr_state_flag = pops_rgos_valuable_goods_untapped_flag
							set_state_flag = pops_rgos_valuable_goods_plentiful_flag
						}
						if = {
							limit = {
								has_state_flag = pops_rgos_valuable_goods_plentiful_flag
								NOT = { check_variable = { pops_rgos_valuable_goods_decay < global.pops_rgos_valuable_goods_plentiful_decay_max }}
							}
							subtract_from_variable = { pops_rgos_valuable_goods_decay = global.pops_rgos_valuable_goods_plentiful_decay_max }
							clr_state_flag = pops_rgos_valuable_goods_plentiful_flag
						}
						if = {
							limit = {
								NOT = {
									OR = {
										has_state_flag = pops_rgos_valuable_goods_untapped_flag
										has_state_flag = pops_rgos_valuable_goods_plentiful_flag
										has_state_flag = pops_rgos_valuable_goods_depleted_flag
									}
								}
								NOT = { check_variable = { pops_rgos_valuable_goods_decay < global.pops_rgos_valuable_goods_exploited_decay_max }}
							}
							subtract_from_variable = { pops_rgos_valuable_goods_decay = global.pops_rgos_valuable_goods_exploited_decay_max }
							set_state_flag = pops_rgos_valuable_goods_depleted_flag
						}
						if = {
							limit = {
								has_state_flag = pops_rgos_valuable_goods_depleted_flag
								NOT = { check_variable = { pops_rgos_valuable_goods_decay < global.pops_rgos_valuable_goods_plentiful_decay_max }}
							}
							clear_variable = pops_rgos_valuable_goods_decay
							clr_state_flag = pops_rgos_valuable_goods_depleted_flag
							clr_state_flag = pops_rgos_valuable_goods_flag
						}
					}
				#

				#Making trade amounts positive
					if = {
						limit = {
							check_variable = { life_goods_trade_amount < 0 }
						}
						multiply_variable = { life_goods_trade_amount = -1 }
					}
					if = {
						limit = {
							check_variable = { everyday_goods_trade_amount < 0 }
						}
						multiply_variable = { everyday_goods_trade_amount = -1 }
					}
					if = {
						limit = {
							check_variable = { luxury_goods_trade_amount < 0 }
						}
						multiply_variable = { luxury_goods_trade_amount = -1 }
					}
					if = {
						limit = {
							check_variable = { services_trade_amount < 0 }
						}
						multiply_variable = { services_trade_amount = -1 }
					}
					if = {
						limit = {
							check_variable = { raw_goods_trade_amount < 0 }
						}
						multiply_variable = { raw_goods_trade_amount = -1 }
					}
					if = {
						limit = {
							check_variable = { industrial_goods_trade_amount < 0 }
						}
						multiply_variable = { industrial_goods_trade_amount = -1 }
					}
				#

				#Adding Per Month Stats
					add_to_array = { pops_life_goods_fulfilled_array = pops_life_goods_fulfilled_percentage }
					if = {
						limit = {
							check_variable = { pops_life_goods_fulfilled_array^num > 12 }
						}
						remove_from_array = { array = pops_life_goods_fulfilled_array index = 0 }
					}
					add_to_array = { pops_everyday_goods_fulfilled_array = pops_everyday_goods_fulfilled_percentage }
					if = {
						limit = {
							check_variable = { pops_everyday_goods_fulfilled_array^num > 12 }
						}
						remove_from_array = { array = pops_everyday_goods_fulfilled_array index = 0 }
					}
					add_to_array = { pops_luxury_goods_fulfilled_array = pops_luxury_goods_fulfilled_percentage }
					if = {
						limit = {
							check_variable = { pops_luxury_goods_fulfilled_array^num > 12 }
						}
						remove_from_array = { array = pops_luxury_goods_fulfilled_array index = 0 }
					}
					

					add_to_array = { factory_earnings_array = factory_earnings }
					if = {
						limit = {
							check_variable = { factory_earnings_array^num > 12 }
						}
						remove_from_array = { array = factory_earnings_array index = 0 }
					}
					add_to_array = { factory_spending_array = factory_spending }
					if = {
						limit = {
							check_variable = { factory_spending_array^num > 12 }
						}
						remove_from_array = { array = factory_spending_array index = 0 }
					}
					set_variable = { total_money = pops_money }
					add_to_variable = { total_money = infrastructure_money }
					add_to_variable = { total_money = factory_money }
					add_to_variable = { total_money = pops_earnings }
					add_to_variable = { total_money = factory_everyday_goods_construction_investment_money }
					add_to_variable = { total_money = factory_luxury_goods_construction_investment_money }
					add_to_variable = { total_money = factory_industrial_goods_construction_investment_money }
					add_to_variable = { total_money = infrastructure_construction_investment_money }
					add_to_variable = { PREV.total_money = total_money }

					#Money Supply
					add_to_array = { total_money_array = total_money }
					if = {
						limit = {
							check_variable = { total_money_array^num > 12 }
						}
						remove_from_array = { array = total_money_array index = 0 }
					}
					set_variable = { money_supply = 0 }
					for_each_loop = {
						array = total_money_array
						value = vv
						index = ii
						add_to_variable = { money_supply = vv }
					}
					#

					#Price of Goods Index
					set_temp_variable = { total_needs_temp = life_goods_need }
					add_to_temp_variable = { total_needs_temp = everyday_goods_need }
					add_to_temp_variable = { total_needs_temp = luxury_goods_need }
					add_to_temp_variable = { total_needs_temp = services_need }
					add_to_temp_variable = { total_needs_temp = raw_goods_need }
					add_to_temp_variable = { total_needs_temp = industrial_goods_need }

					set_temp_variable = { life_goods_inflation_temp = life_goods_price }
					multiply_temp_variable = { life_goods_inflation_temp = life_goods_need }

					set_temp_variable = { everyday_goods_inflation_temp = everyday_goods_price }
					multiply_temp_variable = { everyday_goods_inflation_temp = everyday_goods_need }

					set_temp_variable = { luxury_goods_inflation_temp = luxury_goods_price }
					multiply_temp_variable = { luxury_goods_inflation_temp = luxury_goods_need }

					set_temp_variable = { services_inflation_temp = services_price }
					multiply_temp_variable = { services_inflation_temp = services_need }

					set_temp_variable = { raw_goods_inflation_temp = raw_goods_price }
					multiply_temp_variable = { raw_goods_inflation_temp = raw_goods_need }

					set_temp_variable = { industrial_goods_inflation_temp = industrial_goods_price }
					multiply_temp_variable = { industrial_goods_inflation_temp = industrial_goods_need }

					set_variable = { price_of_goods_index = life_goods_inflation_temp }
					add_to_variable = { price_of_goods_index = everyday_goods_inflation_temp }
					add_to_variable = { price_of_goods_index = luxury_goods_inflation_temp }
					add_to_variable = { price_of_goods_index = services_inflation_temp }
					add_to_variable = { price_of_goods_index = raw_goods_inflation_temp }
					add_to_variable = { price_of_goods_index = industrial_goods_inflation_temp }
					divide_variable = { price_of_goods_index = total_needs_temp }

					add_to_array = { price_of_goods_index_array = price_of_goods_index }
					if = {
						limit = {
							check_variable = { price_of_goods_index_array^num > 24 }
						}
						remove_from_array = { array = price_of_goods_index_array index = 0 }
					}
					set_temp_variable = { price_of_goods_index_temp = 0 }
					set_temp_variable = { previous_price_of_goods_index_temp = 0 }
					for_each_loop = {
						array = price_of_goods_index_array
						value = vv
						index = ii
						if = {
							limit = {
								check_variable = { ii < 12 }
							}
							add_to_temp_variable = { previous_price_of_goods_index_temp = vv }
						}
						else = {
							add_to_temp_variable = { price_of_goods_index_temp = vv }
						}
					}
					#
					set_variable = { annual_inflation = price_of_goods_index_temp }
					multiply_variable = { annual_inflation = 100 }
					divide_variable = { annual_inflation = previous_price_of_goods_index_temp }
					subtract_from_variable = { annual_inflation = 100 }
					

					add_to_variable = { PREV.private_factory_amount = private_factory_amount }
					
					#GDP
					set_variable = { gdp_amount = 0 }
					
					set_temp_variable = { gdp_value_temp = life_goods_produced_amount }
					multiply_temp_variable = { gdp_value_temp = life_goods_price }
					add_to_variable = { gdp_amount = gdp_value_temp }
					
					set_temp_variable = { gdp_value_temp = everyday_goods_produced_amount }
					multiply_temp_variable = { gdp_value_temp = everyday_goods_price }
					add_to_variable = { gdp_amount = gdp_value_temp }
					
					set_temp_variable = { gdp_value_temp = luxury_goods_produced_amount }
					multiply_temp_variable = { gdp_value_temp = luxury_goods_price }
					add_to_variable = { gdp_amount = gdp_value_temp }
					
					set_temp_variable = { gdp_value_temp = services_produced_amount }
					multiply_temp_variable = { gdp_value_temp = services_price }
					add_to_variable = { gdp_amount = gdp_value_temp }
					
					set_temp_variable = { gdp_value_temp = raw_goods_produced_amount }
					multiply_temp_variable = { gdp_value_temp = raw_goods_price }
					add_to_variable = { gdp_amount = gdp_value_temp }
					
					set_temp_variable = { gdp_value_temp = industrial_goods_produced_amount }
					multiply_temp_variable = { gdp_value_temp = industrial_goods_price }
					add_to_variable = { gdp_amount = gdp_value_temp }

					divide_variable = { gdp_amount = price_of_goods_index }
					add_to_variable = { PREV.gdp_amount = gdp_amount }

					
					add_to_array = { 
						array = gdp_amount_array
						value = gdp_amount
						index = 0
					}
					if = {
						limit = {
							check_variable = { gdp_amount_array^num > 25 }
						}
						remove_from_array = { array = gdp_amount_array }
					}
				
					set_variable = { gdp_amount_this_year = 0 }
					set_temp_variable = { this_year_months_temp = 0 }
					set_variable = { gdp_amount_last_year = 0 }
					set_temp_variable = { last_year_months_temp = 0 }
					for_each_loop = {
						array = gdp_amount_array
						value = vv
						index = ii
						if = {
							limit = {
								check_variable = { ii < 12 }
							}
							add_to_variable = { gdp_amount_this_year = vv }
							add_to_temp_variable = { this_year_months_temp = 1 }
						}
						else_if = {
							limit = {
								check_variable = { ii < 24 }
							}
							add_to_variable = { gdp_amount_last_year = vv }
							add_to_temp_variable = { last_year_months_temp = 1 }
						}
					}
					divide_variable = { gdp_amount_this_year = this_year_months_temp }
					divide_variable = { gdp_amount_last_year = last_year_months_temp }
					add_to_variable = { PREV.gdp_amount_this_year = gdp_amount_this_year }
					add_to_variable = { PREV.gdp_amount_last_year = gdp_amount_last_year }

					set_variable = { annual_gdp_amount = gdp_amount_this_year }
					multiply_variable = { annual_gdp_amount = 12 }

					set_variable = { annual_gdp_growth = gdp_amount_this_year }
					multiply_variable = { annual_gdp_growth = 100 }
					divide_variable = { annual_gdp_growth = gdp_amount_last_year }
					subtract_from_variable = { annual_gdp_growth = 100 }

					add_to_array = { annual_gdp_amount_array = annual_gdp_amount }
					if = {
						limit = {
							check_variable = { annual_gdp_amount_array^num > 24 }
						}
						remove_from_array = { array = annual_gdp_amount_array index = 0 }
					}

					set_variable = { gdp_per_capita = annual_gdp_amount }
					divide_variable = { gdp_per_capita = pops_amount }

					#Industrial Power
					set_variable = { industrial_power = 0 }

					set_temp_variable = { everyday_goods_industrial_power = factory_everyday_goods_production }
					divide_temp_variable = { everyday_goods_industrial_power = global.factory_everyday_goods_base_production }
					set_temp_variable = { luxury_goods_industrial_power = factory_luxury_goods_production }
					divide_temp_variable = { luxury_goods_industrial_power = global.factory_luxury_goods_base_production }
					set_temp_variable = { industrial_goods_industrial_power = factory_industrial_goods_production }
					divide_temp_variable = { industrial_goods_industrial_power = global.factory_industrial_goods_base_production }

					add_to_variable = { industrial_power = everyday_goods_industrial_power }
					add_to_variable = { industrial_power = luxury_goods_industrial_power }
					add_to_variable = { industrial_power = industrial_goods_industrial_power }

					add_to_variable = { PREV.industrial_power = industrial_power }

					#Pop Spending
					add_to_variable = { pops_spending = pops_goods_spending }
				#
			}

			#Country Level Stats
				taxes_update = yes
				spending_update = yes

				set_variable = { total_factory_amount = num_of_civilian_factories }
				add_to_variable = { total_factory_amount = num_of_military_factories }
				add_to_variable = { total_factory_amount = num_of_naval_factories }
				add_to_variable = { total_factory_amount = private_factory_amount }

				#Industrial Power
				set_temp_variable = { industrial_power_temp = num_of_civilian_factories }
				multiply_temp_variable = { industrial_power_temp = global.factory_jobs_base_amount }
				divide_temp_variable = { industrial_power_temp = 50 }
				set_temp_variable = { modifier_temp = modifier@production_speed_buildings_factor }
				add_to_temp_variable = { modifier_temp = 1 }
				if = {
					limit = { 
						check_variable = { modifier_temp < 0 }
					}
					set_temp_variable = { modifier_temp = 0 }
				}
				multiply_temp_variable = { industrial_power_temp = modifier_temp }
				add_to_variable = { industrial_power = industrial_power_temp }

				set_temp_variable = { industrial_power_temp = num_of_military_factories }
				multiply_temp_variable = { industrial_power_temp = global.factory_jobs_base_amount }
				divide_temp_variable = { industrial_power_temp = 50 }
				set_temp_variable = { modifier_temp = modifier@industrial_capacity_factory  }
				add_to_temp_variable = { modifier_temp = 1 }
				if = {
					limit = { 
						check_variable = { modifier_temp < 0 }
					}
					set_temp_variable = { modifier_temp = 0 }
				}
				multiply_temp_variable = { industrial_power_temp = modifier_temp }
				add_to_variable = { industrial_power = industrial_power_temp }

				set_temp_variable = { industrial_power_temp = num_of_naval_factories }
				multiply_temp_variable = { industrial_power_temp = global.factory_jobs_base_amount }
				divide_temp_variable = { industrial_power_temp = 50 }
				set_temp_variable = { modifier_temp = modifier@industrial_capacity_dockyard  }
				add_to_temp_variable = { modifier_temp = 1 }
				if = {
					limit = { 
						check_variable = { modifier_temp < 0 }
					}
					set_temp_variable = { modifier_temp = 0 }
				}
				multiply_temp_variable = { industrial_power_temp = modifier_temp }
				add_to_variable = { industrial_power = industrial_power_temp }

				#GDP
				divide_variable = { gdp_amount_this_year = 1000 }
				divide_variable = { gdp_amount_last_year = 1000 }

				set_variable = { annual_gdp_growth = gdp_amount_this_year }
				multiply_variable = { annual_gdp_growth = 100 }
				divide_variable = { annual_gdp_growth = gdp_amount_last_year }
				subtract_from_variable = { annual_gdp_growth = 100 }

				#Budget
				set_variable = { actual_revenue = actual_income_tax_revenue }
				add_to_variable = { actual_revenue = actual_tariff_revenue }
				set_variable = { actual_subsidy_expense = actual_infrastructure_spending }
				set_variable = { actual_spending = actual_subsidy_expense }
				add_to_variable = { actual_spending = actual_construction_spending }
				set_variable = { net_budget = actual_revenue }
				subtract_from_variable = { net_budget = actual_spending }

				#Total Money
				add_to_variable = { total_money = treasury }
			#

			every_controlled_state = {
				create_pie_chart_pop_type = yes
				create_state_gdp_graph = yes
				add_to_variable = { update_state_econ_window = 1 }
			}

			#Adding to Global
				add_to_variable = { global.life_goods_supply = life_goods_supply }
				add_to_variable = { global.life_goods_produced_amount = life_goods_produced_amount }

				add_to_variable = { global.everyday_goods_supply = everyday_goods_supply }
				add_to_variable = { global.everyday_goods_produced_amount = everyday_goods_produced_amount }

				add_to_variable = { global.luxury_goods_supply = luxury_goods_supply }
				add_to_variable = { global.luxury_goods_produced_amount = luxury_goods_produced_amount }

				add_to_variable = { global.services_supply = services_supply }
				add_to_variable = { global.services_produced_amount = services_produced_amount }

				add_to_variable = { global.raw_goods_supply = raw_goods_supply }
				add_to_variable = { global.raw_goods_produced_amount = raw_goods_produced_amount }

				add_to_variable = { global.industrial_goods_supply = industrial_goods_supply }
				add_to_variable = { global.industrial_goods_produced_amount = industrial_goods_produced_amount }

				add_to_variable = { global.life_goods_demand = life_goods_demand }
				add_to_variable = { global.everyday_goods_demand = everyday_goods_demand }
				add_to_variable = { global.luxury_goods_demand = luxury_goods_demand }
				add_to_variable = { global.services_demand = services_demand }
				add_to_variable = { global.raw_goods_demand = raw_goods_demand }
				add_to_variable = { global.industrial_goods_demand = industrial_goods_demand }

				add_to_variable = { global.life_goods_need = life_goods_need }
				add_to_variable = { global.everyday_goods_need = everyday_goods_need }
				add_to_variable = { global.luxury_goods_need = luxury_goods_need }
				add_to_variable = { global.services_need = services_need }
				add_to_variable = { global.raw_goods_need = raw_goods_need }
				add_to_variable = { global.industrial_goods_need = industrial_goods_need }

				add_to_variable = { global.total_money = total_money }
			#
		}
		random_country = {
			add_to_variable = { global.month = 1 }
		}
	}
    
	reset = {
		#Global Vars
			set_variable = { global.month = 0 }
			set_variable = { global.years_passed = 0 }
			#Pops
				#Defined Vars Default Values
					set_variable = { global.pops_male_female_ratio = 1.01 }
					set_variable = { global.pops_male_workforce_base_participation = 0.55 }
					set_variable = { global.pops_female_workforce_base_participation = 0.05 }
					set_variable = { global.pops_literacy_percentage = 15 }
					set_variable = { global.pops_education_percentage = 1 }
					set_variable = { global.pops_militancy = 20 }

					set_variable = { global.pops_natural_birth_base_rate = 3.0 } #Per year rate
					set_variable = { global.pops_natural_death_base_rate = 2.0 } #Per year rate
					set_variable = { global.pops_accidents_death_base_rate = 0.05 } #Per year rate
					set_variable = { global.pops_crime_death_base_rate = 0.005 } #Per year rate
					set_variable = { global.pops_other_death_base_rate = 0.005 } #Per year rate

					set_variable = { global.pops_maximum_starvation_death_rate = 25.0 } #Per year rate

				#Spending Patterns
					set_variable = { global.pops_artisans_raw_goods_spending = 0.20 }
					set_variable = { global.pops_artisans_raw_goods_spending_max = 0.30 }

					set_variable = { global.pops_life_goods_spending = 0.50 }
					set_variable = { global.pops_everyday_goods_spending = 0.50 }
					set_variable = { global.pops_luxury_goods_spending = 0.25 }
					set_variable = { global.pops_services_spending = 0.25 }
					set_variable = { global.pops_life_goods_spending_max = 0.75 }
					set_variable = { global.pops_everyday_goods_spending_max = 0.9 }
					set_variable = { global.pops_luxury_goods_spending_max = 0.9 }
					set_variable = { global.pops_services_spending_max = 0.75 }

				#Upper Strata
					set_variable = { global.pops_upper_strata_life_goods_base_need = 2 }
					set_variable = { global.pops_upper_strata_everyday_goods_base_need = 20 }
					set_variable = { global.pops_upper_strata_luxury_goods_base_need = 40 }

					#Aristocrats
						set_variable =  { global.aristocrats_percentage = 1 }
						set_variable =  { global.aristocrats_rgo_output_modifier = 0.1 } #At full aristocrats

					#Capitalists
						set_variable =  { global.capitalists_percentage = 0.0 }
						set_variable =  { global.capitalists_factory_raw_goods_input_modifier = -0.05 } #At full capitalists
						set_variable =  { global.capitalists_services_output_modifier = 0.1 } #At full capitalists

				#Middle Strata
					set_variable = { global.pops_middle_strata_life_goods_base_need = 1 }
					set_variable = { global.pops_middle_strata_everyday_goods_base_need = 5 }
					set_variable = { global.pops_middle_strata_luxury_goods_base_need = 1 }

					#Artisans
						set_variable =  { global.artisans_percentage = 20 }
						set_variable = { global.pops_artisans_everyday_goods_base_production = 32 } #Every 100k artisans
						set_variable = { global.pops_artisans_everyday_goods_raw_goods_base_need = 0.3 }
						set_variable = { global.pops_artisans_luxury_goods_base_production = 12 }
						set_variable = { global.pops_artisans_luxury_goods_raw_goods_base_need = 0.3 }
						set_variable = { global.pops_artisans_industrial_goods_base_production = 16 }
						set_variable = { global.pops_artisans_industrial_goods_raw_goods_base_need = 0.9 }

					#Specialists
						set_variable =  { global.specialists_percentage = 0.0 }
						set_variable = { global.pops_specialists_production_bonus = 0.5 }

					#Professionals
						set_variable =  { global.professionals_percentage = 0.0 }
						set_variable = { global.pops_professionals_services_base_production = 24 }

					#Officers
						set_variable =  { global.officers_percentage = 0.5 }

				#Lower Strata
					set_variable = { global.pops_lower_strata_life_goods_base_need = 2 }
					set_variable = { global.pops_lower_strata_everyday_goods_base_need = 0.5 }
					set_variable = { global.pops_lower_strata_luxury_goods_base_need = 0.10 }
					
					#RGOs
						set_variable =  { global.rgos_percentage = 74 }
						set_variable = { global.pops_rgos_life_goods_base_production = 15 } #Every 100k RGOs
						set_variable = { global.pops_rgos_raw_goods_base_production = 6 }
						set_variable = { global.pops_rgos_valuable_goods_base_production = 20 }

						set_variable = { global.pops_rgos_cash_crops_output_multiplier = 1.2 } #Applies to Life/Raw Goods
						set_variable = { global.pops_rgos_coal_output_multiplier = 1.25 } #Only to Raw
						set_variable = { global.pops_rgos_metals_output_multiplier = 1.33 } #Only to Raw
						set_variable = { global.pops_rgos_petroleum_output_multiplier = 1.25 } #Only to Raw

						set_variable = { global.pops_rgos_valuable_goods_untapped_output_multiplier = 10 }
						set_variable = { global.pops_rgos_valuable_goods_plentiful_output_multiplier = 3 }
						set_variable = { global.pops_rgos_valuable_goods_exploited_output_multiplier = 1 }
						set_variable = { global.pops_rgos_valuable_goods_depleted_output_multiplier = 0.3 }

						set_variable = { global.pops_rgos_valuable_goods_untapped_decay_max = 60 } #How many months until the valuable goods decays?
						set_variable = { global.pops_rgos_valuable_goods_plentiful_decay_max = 240 }
						set_variable = { global.pops_rgos_valuable_goods_exploited_decay_max = 600 }
						set_variable = { global.pops_rgos_valuable_goods_depleted_decay_max = 300 }

					#Craftsmen
						set_variable =  { global.craftsmen_percentage = 0.0 }

					#Clerks
						set_variable =  { global.clerks_percentage = 0.0 }
						set_variable = { global.pops_clerks_services_base_production = 16 }

					#Soldiers
						set_variable =  { global.soldiers_percentage = 4.5 }

			#
			#Factories
				set_variable = { global.factory_industrial_goods_base_need = 0.075 }

				set_variable = { global.factory_raw_goods_spending = 0.25 } #Minimum Spending
				set_variable = { global.factory_industrial_goods_spending = 0.15 }
				set_variable = { global.factory_raw_goods_spending_max = 0.4 } #Max Spending
				set_variable = { global.factory_industrial_goods_spending_max = 0.33 }

				set_variable = { global.factory_money_limit = 25 } #Per 100k employees and the goods base price

				set_variable = { global.factory_jobs_base_amount = 10 } #Per size, adjusted by the pop size
				set_variable = { global.factory_wages_revenue_percentage = 0.4 }
				set_variable = { global.factory_wages_profit_percentage = 0.25 }
				set_variable = { global.factory_wages_max_money_percentage = 0.02 } #Adjusted by % of employment

				#Everyday Goods Factory
					set_variable = { global.factory_everyday_goods_base_production = 20 } #These are for every 100k employees
					set_variable = { global.factory_everyday_goods_raw_goods_base_need = 0.5 } #Per Good Produced
					#Construction
						set_variable = { global.factory_everyday_goods_construction_industrial_goods_base_need = 30 } #Per 100K Employees per Factory
						set_variable = { global.factory_everyday_goods_construction_base_speed = 2 } #How fast construction is

				#Luxury Goods Factory
					set_variable = { global.factory_luxury_goods_base_production = 10 }
					set_variable = { global.factory_luxury_goods_raw_goods_base_need = 0.5 }
					#Construction
						set_variable = { global.factory_luxury_goods_construction_industrial_goods_base_need = 30 } #Per 100K Employees per Factory
						set_variable = { global.factory_luxury_goods_construction_base_speed = 2 } #How fast construction is

				#Industrial Goods Factory
					set_variable = { global.factory_industrial_goods_base_production = 10 }
					set_variable = { global.factory_industrial_goods_raw_goods_base_need = 1 }
					#Construction
						set_variable = { global.factory_industrial_goods_construction_industrial_goods_base_need = 45 } #Per 100K Employees per Factory
						set_variable = { global.factory_industrial_goods_construction_base_speed = 2 } #How fast construction is

			#
			#Resources
				clear_array = global.resources_array #Used for code
				add_to_array = { global.resources_array = 1 } #Life
				add_to_array = { global.resources_array = 2 } #Everyday
				add_to_array = { global.resources_array = 3 } #Luxury
				add_to_array = { global.resources_array = 4 } #Services
				add_to_array = { global.resources_array = 5 } #Raw
				add_to_array = { global.resources_array = 6 } #Industrial
				
				clear_array = global.factory_resources_array #Used for code
				add_to_array = { global.factory_resources_array = 2 } #Everyday
				add_to_array = { global.factory_resources_array = 3 } #Luxury
				add_to_array = { global.factory_resources_array = 6 } #Industrial

				set_variable = { global.base_transport_cost_divisor = 500 } #How much to divide distance_to@state to get the transport cost for state to state trade.
				set_variable = { global.base_shipping_cost_divisor = 1000 } #How much to divide distance_to@state to get the shipping cost for country to country trade.
				

				#Life Goods
					set_variable = { global.life_goods_base_price = 1 }
				#Everyday Goods
					set_variable = { global.everyday_goods_base_price = 2 }
				#Luxury Goods
					set_variable = { global.luxury_goods_base_price = 4 }
				#Services
					set_variable = { global.services_base_price = 4 }
				#Raw Goods
					set_variable = { global.raw_goods_base_price = 0.5 }
				#Industrial Goods
					set_variable = { global.industrial_goods_base_price = 2 }
			#
			#Infrastructure
				set_variable = { global.infrastructure_industrial_goods_base_need = 0.005 } #Per level
				set_variable = { global.infrastructure_industrial_goods_base_need_increase_per_level = 0.005 }
				set_variable = { global.infrastructure_industrial_goods_base_need_squared = 0.005 } #level^2 * this

				set_variable = { global.infrastructure_construction_industrial_goods_base_need = 20 } #Per level
				set_variable = { global.infrastructure_construction_industrial_goods_base_need_increase_per_level = 2 } #Per level
				set_variable = { global.infrastructure_construction_base_speed = 2 } #How fast construction is

				set_variable = { global.infrastructure_rgo_output_modifier = 0.025 } #per level
				set_variable = { global.infrastructure_factory_throughput_modifier = 0.025 } #per level
				set_variable = { global.infrastructure_build_cost_modifier = -0.01 } #per level
				set_variable = { global.infrastructure_transport_cost_modifier = -0.02 } #per level
				set_variable = { global.infrastructure_shipping_cost_modifier = -0.01 } #per level

				set_variable = { global.infrastructure_crumbling_threshold = 0.25 } #Below this % fulfillment of industrial goods, infrastructure_crumbling_ticks increases by 1. If above, it is reduced by 1
				set_variable = { global.infrastructure_crumbling_ticks_bar = 36 } #How many ticks is needed until you lose an infra

			#
			#State Categories
			#
		#

		clear_array = global.econ_order_array

		#States
			clear_array = global.raw_goods_states
			clear_array = global.valuable_goods_states
			clear_array = global.coal_states
			clear_array = global.cash_crops_states
			clear_array = global.metals_states
			clear_array = global.petroleum_states
			#USA
			add_to_array = { global.raw_goods_states = 961 }
			add_to_array = { global.raw_goods_states = 960 }
			add_to_array = { global.raw_goods_states = 959 }
			add_to_array = { global.raw_goods_states = 358 }
			add_to_array = { global.metals_states = 358 }
			add_to_array = { global.raw_goods_states = 360 }
			add_to_array = { global.coal_states = 360 }
			add_to_array = { global.raw_goods_states = 746 }
			add_to_array = { global.coal_states = 746 }
			add_to_array = { global.raw_goods_states = 369 }
			add_to_array = { global.coal_states = 369 }
			add_to_array = { global.cash_crops_states = 361 }
			add_to_array = { global.raw_goods_states = 362 }
			add_to_array = { global.cash_crops_states = 362 }
			add_to_array = { global.raw_goods_states = 363 }
			add_to_array = { global.cash_crops_states = 363 }
			add_to_array = { global.raw_goods_states = 364 }
			add_to_array = { global.cash_crops_states = 364 }
			add_to_array = { global.raw_goods_states = 365 }
			add_to_array = { global.cash_crops_states = 365 }
			add_to_array = { global.cash_crops_states = 366 }
			add_to_array = { global.raw_goods_states = 367 }
			add_to_array = { global.cash_crops_states = 367 }
			add_to_array = { global.raw_goods_states = 368 }
			add_to_array = { global.coal_states = 368 }
			add_to_array = { global.raw_goods_states = 370 }
			add_to_array = { global.cash_crops_states = 370 }
			add_to_array = { global.cash_crops_states = 371 }
			add_to_array = { global.raw_goods_states = 393 }
			add_to_array = { global.raw_goods_states = 1358 }
			add_to_array = { global.metals_states = 1358 }
			add_to_array = { global.raw_goods_states = 394 }
			add_to_array = { global.metals_states = 394 }
			add_to_array = { global.raw_goods_states = 391 }
			add_to_array = { global.metals_states = 391 }
			add_to_array = { global.raw_goods_states = 386 }
			add_to_array = { global.raw_goods_states = 1073 }
			add_to_array = { global.raw_goods_states = 1076 }
			add_to_array = { global.raw_goods_states = 385 }
			add_to_array = { global.raw_goods_states = 378 }
			add_to_array = { global.raw_goods_states = 1297 }
			add_to_array = { global.raw_goods_states = 1285 }
			add_to_array = { global.raw_goods_states = 1303 }

			add_to_array = { global.valuable_goods_states = 1342 }
			add_to_array = { global.raw_goods_states = 1342 }
			1342 = { set_state_flag = pops_rgos_valuable_goods_untapped_flag }

			#States in the Continental US but not owned by USA
			add_to_array = { global.raw_goods_states = 1047 }
			add_to_array = { global.coal_states = 1047 }
			add_to_array = { global.raw_goods_states = 381 }
			add_to_array = { global.coal_states = 381 }
			add_to_array = { global.raw_goods_states = 1291 }
			add_to_array = { global.coal_states = 1291 }
			add_to_array = { global.raw_goods_states = 1292 }
			add_to_array = { global.metals_states = 1292 }
			add_to_array = { global.raw_goods_states = 1074 }
			add_to_array = { global.raw_goods_states = 1289 }
			add_to_array = { global.raw_goods_states = 1092 }
			add_to_array = { global.metals_states = 1092 }
			add_to_array = { global.raw_goods_states = 382 }
			add_to_array = { global.raw_goods_states = 380 }
			add_to_array = { global.coal_states = 380 }
			add_to_array = { global.raw_goods_states = 1286 }
			add_to_array = { global.raw_goods_states = 1287 }
			add_to_array = { global.coal_states = 1287 }
			add_to_array = { global.raw_goods_states = 1288 }
			add_to_array = { global.metals_states = 1288 }
			add_to_array = { global.raw_goods_states = 1302 }
			add_to_array = { global.raw_goods_states = 1301 }
			add_to_array = { global.metals_states = 1301 }
			add_to_array = { global.raw_goods_states = 1295 }
			add_to_array = { global.raw_goods_states = 376 }
			
			add_to_array = { global.valuable_goods_states = 379 }
			add_to_array = { global.raw_goods_states = 379 }
			379 = { set_state_flag = pops_rgos_valuable_goods_untapped_flag }

			#Canada & Alaska
			add_to_array = { global.raw_goods_states = 331 }
			add_to_array = { global.raw_goods_states = 332 }
			add_to_array = { global.raw_goods_states = 466 }
			add_to_array = { global.raw_goods_states = 682 }
			add_to_array = { global.metals_states = 682 }
			add_to_array = { global.raw_goods_states = 683 }
			add_to_array = { global.raw_goods_states = 472 }
			add_to_array = { global.metals_states = 472 }
			add_to_array = { global.raw_goods_states = 1137 }
			add_to_array = { global.raw_goods_states = 471 }
			add_to_array = { global.raw_goods_states = 473 }
			add_to_array = { global.coal_states = 473 }
			add_to_array = { global.raw_goods_states = 463}

			#Mexico
			add_to_array = { global.raw_goods_states = 480 }
			add_to_array = { global.coal_states = 480 }
			add_to_array = { global.raw_goods_states = 1112 }
			add_to_array = { global.raw_goods_states = 478 }
			add_to_array = { global.metals_states = 478 }
			add_to_array = { global.raw_goods_states = 1114 }
			add_to_array = { global.raw_goods_states = 474 }
			add_to_array = { global.raw_goods_states = 475 }
			add_to_array = { global.cash_crops_states = 475 }
			add_to_array = { global.raw_goods_states = 481 }
			add_to_array = { global.raw_goods_states = 1125 }

			add_to_array = { global.valuable_goods_states = 482 }
			add_to_array = { global.valuable_goods_states = 485 }

			#Central America/Carribean
			add_to_array = { global.raw_goods_states = 1155 }
			add_to_array = { global.cash_crops_states = 1155 }
			add_to_array = { global.cash_crops_states = 317 }
			add_to_array = { global.cash_crops_states = 1249 }
			add_to_array = { global.raw_goods_states = 1350 }
			add_to_array = { global.cash_crops_states = 1350 }
			add_to_array = { global.raw_goods_states = 315 }
			add_to_array = { global.cash_crops_states = 315 }
			add_to_array = { global.raw_goods_states = 690 }
			add_to_array = { global.cash_crops_states = 690 }
			add_to_array = { global.raw_goods_states = 693 }
			add_to_array = { global.cash_crops_states = 693 }
			add_to_array = { global.raw_goods_states = 689 }
			add_to_array = { global.cash_crops_states = 689 }
			add_to_array = { global.raw_goods_states = 318 }
			add_to_array = { global.cash_crops_states = 318 }
			add_to_array = { global.raw_goods_states = 790 }
			add_to_array = { global.cash_crops_states = 790 }
			add_to_array = { global.raw_goods_states = 319 }
			add_to_array = { global.cash_crops_states = 319 }
			add_to_array = { global.raw_goods_states = 1318 }
			add_to_array = { global.cash_crops_states = 1318 }
			add_to_array = { global.raw_goods_states = 686 }
			add_to_array = { global.cash_crops_states = 686 }
			add_to_array = { global.raw_goods_states = 1357 }
			add_to_array = { global.cash_crops_states = 1357 }
			add_to_array = { global.raw_goods_states = 694 }
			add_to_array = { global.cash_crops_states = 694 }
			add_to_array = { global.raw_goods_states = 308 }
			add_to_array = { global.cash_crops_states = 308 }
			add_to_array = { global.raw_goods_states = 692 }
			add_to_array = { global.cash_crops_states = 692 }
			add_to_array = { global.raw_goods_states = 691 }
			add_to_array = { global.cash_crops_states = 691 }
			add_to_array = { global.raw_goods_states = 695 }
			add_to_array = { global.cash_crops_states = 695 }

			#Grand Colombia/Guyanas
			add_to_array = { global.raw_goods_states = 310 }
			add_to_array = { global.raw_goods_states = 927 }
			add_to_array = { global.cash_crops_states = 489 }
			add_to_array = { global.cash_crops_states = 307 }
			add_to_array = { global.raw_goods_states = 488 }
			add_to_array = { global.cash_crops_states = 493 }
			add_to_array = { global.raw_goods_states = 486 }
			add_to_array = { global.raw_goods_states = 1419 }
			add_to_array = { global.raw_goods_states = 1420 }
			add_to_array = { global.raw_goods_states = 490 }
			add_to_array = { global.raw_goods_states = 1421 }

			#Brazil
			add_to_array = { global.raw_goods_states = 495 }
			add_to_array = { global.cash_crops_states = 495 }
			add_to_array = { global.raw_goods_states = 1323 }
			add_to_array = { global.raw_goods_states = 497 }
			add_to_array = { global.cash_crops_states = 497 }
			add_to_array = { global.raw_goods_states = 1041 }
			add_to_array = { global.cash_crops_states = 1041 }
			add_to_array = { global.raw_goods_states = 498 }
			add_to_array = { global.cash_crops_states = 498 }
			add_to_array = { global.cash_crops_states = 1044 }
			add_to_array = { global.raw_goods_states = 1040 }
			add_to_array = { global.cash_crops_states = 1040 }
			add_to_array = { global.cash_crops_states = 499 }
			add_to_array = { global.cash_crops_states = 1038 }
			add_to_array = { global.cash_crops_states = 1039 }
			add_to_array = { global.cash_crops_states = 500 }
			add_to_array = { global.cash_crops_states = 501 }
			add_to_array = { global.raw_goods_states = 280 }
			add_to_array = { global.raw_goods_states = 1064 }
			add_to_array = { global.raw_goods_states = 502 }

			#Peru
			add_to_array = { global.raw_goods_states = 491 }
			add_to_array = { global.raw_goods_states = 303 }
			add_to_array = { global.coal_states = 303 }
			add_to_array = { global.raw_goods_states = 494 }
			add_to_array = { global.raw_goods_states = 492 }
			add_to_array = { global.raw_goods_states = 1131 }
			add_to_array = { global.raw_goods_states = 1085 }

			add_to_array = { global.valuable_goods_states = 1133 }
			add_to_array = { global.raw_goods_states = 1133 }

			#Bolivia
			
			#Paraguay

			#Chile

			#Uruguay

			#Argentina
		#




		for_each_scope_loop = {
			array = global.raw_goods_states
			set_state_flag = pops_rgos_raw_goods_flag
		}
		for_each_scope_loop = {
			array = global.valuable_goods_states
			set_state_flag = pops_rgos_valuable_goods_flag
		}
		for_each_scope_loop = {
			array = global.cash_crops_states
			set_state_flag = pops_rgos_cash_crops_flag
		}
		for_each_scope_loop = {
			array = global.coal_states
			set_state_flag = pops_rgos_coal_flag
		}
		for_each_scope_loop = {
			array = global.metals_states
			set_state_flag = pops_rgos_metals_flag
		}
		for_each_scope_loop = {
			array = global.petroleum_states
			set_state_flag = pops_rgos_petroleum_flag
		}

		#Country Setup
		every_country = {

			calibrate_tech_bonuses = yes

			#Goods
				set_variable = { life_goods_base_price = global.life_goods_base_price }
				set_variable = { life_goods_price = life_goods_base_price }

				set_variable = { everyday_goods_base_price = global.everyday_goods_base_price }
				set_variable = { everyday_goods_price = everyday_goods_base_price }
				
				set_variable = { luxury_goods_base_price = global.luxury_goods_base_price }
				set_variable = { luxury_goods_price = luxury_goods_base_price }
				
				set_variable = { services_base_price = global.services_base_price }
				set_variable = { services_price = services_base_price }
				
				set_variable = { raw_goods_base_price = global.raw_goods_base_price }
				set_variable = { raw_goods_price = raw_goods_base_price }
				
				set_variable = { industrial_goods_base_price = global.industrial_goods_base_price }
				set_variable = { industrial_goods_price = industrial_goods_base_price }
			#
			#Pops
				#Male/Female Workforce Participation
					if = {
						limit = {
							NOT = { has_variable = pops_male_workforce_participation }
						}
						set_variable = { pops_male_workforce_participation = global.pops_male_workforce_base_participation }
					}
					if = {
						limit = {
							NOT = { has_variable = pops_female_workforce_participation }
						}
						set_variable = { pops_female_workforce_participation = global.pops_female_workforce_base_participation }
					}
				#
			#

			set_variable = { treasury = 0 }

			reset_supply = yes
			reset_demand = yes

			#State Setup
			every_controlled_state = {
				#Reset
					set_variable = { life_goods_trade_amount = 0 } #Positive: Goods Bought / Negative: Goods Sold - Note, this only applies in this effect. It's always positive elsewhere.
					set_variable = { life_goods_trade_value = 0 } #Positive: Amount Recieved / Negative: Amount Paid

					set_variable = { everyday_goods_trade_amount = 0 }
					set_variable = { everyday_goods_trade_value = 0 }
					
					set_variable = { luxury_goods_trade_amount = 0 }
					set_variable = { luxury_goods_trade_value = 0 }
					
					set_variable = { services_trade_amount = 0 }
					set_variable = { services_trade_value = 0 }
					
					set_variable = { raw_goods_trade_amount = 0 }
					set_variable = { raw_goods_trade_value = 0 }
					
					set_variable = { industrial_goods_trade_amount = 0 }
					set_variable = { industrial_goods_trade_value = 0 }

					clear_variable = pops_rgos_valuable_goods_decay

					set_variable = { pops_earnings = 0 }
					set_variable = { pops_spending = 0 }
					set_variable = { pops_goods_spending = 0 }

					set_variable = { factory_earnings = 0 }
					set_variable = { factory_spending = 0 }
					set_variable = { factory_everyday_goods_sold = 0 }
					set_variable = { factory_luxury_goods_sold = 0 }
					set_variable = { factory_industrial_goods_sold = 0 }

					set_variable = { pops_life_goods_fulfilled_percentage = 1 }
					set_variable = { pops_everyday_goods_fulfilled_percentage = 1 }
					set_variable = { pops_luxury_goods_fulfilled_percentage = 1 }
					set_variable = { pops_services_fulfilled_percentage = 1 }

					set_variable = { pops_annual_life_goods_fulfilled_percentage = 1 }
					set_variable = { pops_annual_everyday_goods_fulfilled_percentage = 1 }
					set_variable = { pops_annual_luxury_goods_fulfilled_percentage = 1 }
					set_variable = { pops_annual_services_goods_fulfilled_percentage = 1 }

					set_variable = { pops_artisans_raw_goods_fulfilled_percentage = 1 }

					set_variable = { factory_raw_goods_fulfilled_percentage = 1 }
					set_variable = { factory_industrial_goods_fulfilled_percentage = 1 }

					set_variable = { infrastructure_industrial_goods_fulfilled_percentage = 1 }
					set_variable = { infrastructure_crumbling_ticks = 0 }

					clr_state_flag = factory_everyday_goods_in_construction
					clr_state_flag = factory_everyday_goods_construction_government_subsidized
					set_variable = { factory_everyday_goods_construction_investment_money = 0 }
					set_variable = { factory_everyday_goods_construction_industrial_goods_need = 0 }

					clr_state_flag = factory_luxury_goods_in_construction
					clr_state_flag = factory_luxury_goods_construction_government_subsidized
					set_variable = { factory_luxury_goods_construction_investment_money = 0 }
					set_variable = { factory_luxury_goods_construction_industrial_goods_need = 0 }

					clr_state_flag = factory_industrial_goods_in_construction
					clr_state_flag = factory_industrial_goods_construction_government_subsidized
					set_variable = { factory_industrial_goods_construction_investment_money = 0 }
					set_variable = { factory_industrial_goods_construction_industrial_goods_need = 0 }

					clr_state_flag = infrastructure_in_construction
					clr_state_flag = infrastructure_construction_government_subsidized
					set_variable = { infrastructure_construction_investment_money = 0 }
					set_variable = { infrastructure_construction_industrial_goods_need = 0 }

					clear_array = annual_gdp_amount_array

				#

				set_variable = { infrastructure_max_level = PREV.infrastructure_max_level }

				#State Categories
					if = {
						limit = {
							has_state_category = megalopolis
						}
						set_variable = { aristocrats_percentage = 0.10 }
						set_variable = { capitalists_percentage = 1.50 }
						set_variable = { artisans_percentage = 15.00 }
						set_variable = { specialists_percentage = 12.00 }
						set_variable = { professionals_percentage = 11.00 }
						set_variable = { officers_percentage = 0.20 }
						set_variable = { rgos_percentage = 8.00 }
						set_variable = { craftsmen_percentage = 27.5 }
						set_variable = { clerks_percentage = 22.00 }
						set_variable = { soldiers_percentage = 2.70 }
					}
					else_if = {
						limit = {
							has_state_category = metropolis
						}
						set_variable = { aristocrats_percentage = 0.20 }
						set_variable = { capitalists_percentage = 1.10 }
						set_variable = { artisans_percentage = 18.00 }
						set_variable = { specialists_percentage = 10.5 }
						set_variable = { professionals_percentage = 7.00 }
						set_variable = { officers_percentage = 0.30 }
						set_variable = { rgos_percentage = 13.70 }
						set_variable = { craftsmen_percentage = 26.00 }
						set_variable = { clerks_percentage = 20.00 }
						set_variable = { soldiers_percentage = 3.20 }
					}
					else_if = {
						limit = {
							has_state_category = large_city 
						}
						set_variable = { aristocrats_percentage = 0.40 }
						set_variable = { capitalists_percentage = 0.80 }
						set_variable = { artisans_percentage = 20.00 }
						set_variable = { specialists_percentage = 6.00 }
						set_variable = { professionals_percentage = 4.00 }
						set_variable = { officers_percentage = 0.30 }
						set_variable = { rgos_percentage = 26.90 }
						set_variable = { craftsmen_percentage = 24.00 }
						set_variable = { clerks_percentage = 14.00 }
						set_variable = { soldiers_percentage = 3.60 }
					}
					else_if = {
						limit = {
							has_state_category = city 
						}
						set_variable = { aristocrats_percentage = 0.70 }
						set_variable = { capitalists_percentage = 0.50 }
						set_variable = { artisans_percentage = 15.50 }
						set_variable = { specialists_percentage = 5.00 }
						set_variable = { professionals_percentage = 2.00 }
						set_variable = { officers_percentage = 0.30 }
						set_variable = { rgos_percentage = 45.00 }
						set_variable = { craftsmen_percentage = 17.00 }
						set_variable = { clerks_percentage = 10.00 }
						set_variable = { soldiers_percentage = 4.00 }
					}
					else_if = {
						limit = {
							has_state_category = large_town 
						}
						set_variable = { aristocrats_percentage = 1.20 }
						set_variable = { capitalists_percentage = 0.20 }
						set_variable = { artisans_percentage = 15.00 }
						set_variable = { specialists_percentage = 2.00 }
						set_variable = { professionals_percentage = 1.00 }
						set_variable = { officers_percentage = 0.40 }
						set_variable = { rgos_percentage = 61.00 }
						set_variable = { craftsmen_percentage = 9.00 }
						set_variable = { clerks_percentage = 6.00 }
						set_variable = { soldiers_percentage = 4.20 }
					}
					else_if = {
						limit = {
							has_state_category = town 
						}
						set_variable = { aristocrats_percentage = 1.70 }
						set_variable = { capitalists_percentage = 0.00 }
						set_variable = { artisans_percentage = 10.00 }
						set_variable = { specialists_percentage = 0.00 }
						set_variable = { professionals_percentage = 0.00 }
						set_variable = { officers_percentage = 0.40 }
						set_variable = { rgos_percentage = 76.00 }
						set_variable = { craftsmen_percentage = 3.00 }
						set_variable = { clerks_percentage = 4.50 }
						set_variable = { soldiers_percentage = 4.40 }
					}
					else_if = {
						limit = {
							has_state_category = rural 
						}
						set_variable = { aristocrats_percentage = 2.50 }
						set_variable = { capitalists_percentage = 0.00 }
						set_variable = { artisans_percentage = 5.50 }
						set_variable = { specialists_percentage = 0.00 }
						set_variable = { professionals_percentage = 0.00 }
						set_variable = { officers_percentage = 0.35 }
						set_variable = { rgos_percentage = 84.00 }
						set_variable = { craftsmen_percentage = 0.00 }
						set_variable = { clerks_percentage = 2.00 }
						set_variable = { soldiers_percentage = 3.65 }
					}
					else_if = {
						limit = {
							has_state_category = pastoral 
						}
						set_variable = { aristocrats_percentage = 1.25 }
						set_variable = { capitalists_percentage = 0.00 }
						set_variable = { artisans_percentage = 3.50 }
						set_variable = { specialists_percentage = 0.00 }
						set_variable = { professionals_percentage = 0.00 }
						set_variable = { officers_percentage = 0.25 }
						set_variable = { rgos_percentage = 91.00 }
						set_variable = { craftsmen_percentage = 0.00 }
						set_variable = { clerks_percentage = 1.00 }
						set_variable = { soldiers_percentage = 3.00 }
					}
					else_if = {
						limit = {
							has_state_category = wasteland 
						}
						set_variable = { aristocrats_percentage = 0.50 }
						set_variable = { capitalists_percentage = 0.00 }
						set_variable = { artisans_percentage = 2.00 }
						set_variable = { specialists_percentage = 0.00 }
						set_variable = { professionals_percentage = 0.00 }
						set_variable = { officers_percentage = 0.0 }
						set_variable = { rgos_percentage = 96.00 }
						set_variable = { craftsmen_percentage = 0.00 }
						set_variable = { clerks_percentage = 0.00 }
						set_variable = { soldiers_percentage = 1.50 }
					}
					else = {
						set_variable = { aristocrats_percentage = 2.00 }
						set_variable = { capitalists_percentage = 0.00 }
						set_variable = { artisans_percentage = 6.00 }
						set_variable = { specialists_percentage = 0.00 }
						set_variable = { professionals_percentage = 0.00 }
						set_variable = { officers_percentage = 0.30 }
						set_variable = { rgos_percentage = 86.00 }
						set_variable = { craftsmen_percentage = 0.00 }
						set_variable = { clerks_percentage = 2.00 }
						set_variable = { soldiers_percentage = 3.70 }
					}
				#

				#Pop Setup
					set_variable = { pops_amount = state_population_k }
					set_variable = { pops_money = pops_amount }
					divide_variable = { pops_money = 10 }

					#Pop Type Percentages
						#Aristocrats
							if = {
								limit = {
									NOT = { has_variable = aristocrats_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = aristocrats_percentage
										}
										set_variable = { PREV.aristocrats_percentage = aristocrats_percentage }
									}
									else = {
										set_variable = { PREV.aristocrats_percentage = global.aristocrats_percentage }
									}
								}
							}
						#Capitalists
							if = {
								limit = {
									NOT = { has_variable = capitalists_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = capitalists_percentage
										}
										set_variable = { PREV.capitalists_percentage = capitalists_percentage }
									}
									else = {
										set_variable = { PREV.capitalists_percentage = global.capitalists_percentage }
									}
								}
							}
						#Artisans
							if = {
								limit = {
									NOT = { has_variable = artisans_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = artisans_percentage
										}
										set_variable = { PREV.artisans_percentage = artisans_percentage }
									}
									else = {
										set_variable = { PREV.artisans_percentage = global.artisans_percentage }
									}
								}
							}
						#Specialists
							if = {
								limit = {
									NOT = { has_variable = specialists_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = specialists_percentage
										}
										set_variable = { PREV.specialists_percentage = specialists_percentage }
									}
									else = {
										set_variable = { PREV.specialists_percentage = global.specialists_percentage }
									}
								}
							}
						#Professionals
							if = {
								limit = {
									NOT = { has_variable = professionals_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = professionals_percentage
										}
										set_variable = { PREV.professionals_percentage = professionals_percentage }
									}
									else = {
										set_variable = { PREV.professionals_percentage = global.professionals_percentage }
									}
								}
							}
						#Officers
							if = {
								limit = {
									NOT = { has_variable = officers_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = officers_percentage
										}
										set_variable = { PREV.officers_percentage = officers_percentage }
									}
									else = {
										set_variable = { PREV.officers_percentage = global.officers_percentage }
									}
								}
							}
						#RGOs
							if = {
								limit = {
									NOT = { has_variable = rgos_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = rgos_percentage
										}
										set_variable = { PREV.rgos_percentage = rgos_percentage }
									}
									else = {
										set_variable = { PREV.rgos_percentage = global.rgos_percentage }
									}
								}
							}
						#Craftsmen
							if = {
								limit = {
									NOT = { has_variable = craftsmen_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = craftsmen_percentage
										}
										set_variable = { PREV.craftsmen_percentage = craftsmen_percentage }
									}
									else = {
										set_variable = { PREV.craftsmen_percentage = global.craftsmen_percentage }
									}
								}
							}
						#Clerks
							if = {
								limit = {
									NOT = { has_variable = clerks_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = clerks_percentage
										}
										set_variable = { PREV.clerks_percentage = clerks_percentage }
									}
									else = {
										set_variable = { PREV.clerks_percentage = global.clerks_percentage }
									}
								}
							}
						#Soldiers
							if = {
								limit = {
									NOT = { has_variable = soldiers_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = soldiers_percentage
										}
										set_variable = { PREV.soldiers_percentage = soldiers_percentage }
									}
									else = {
										set_variable = { PREV.soldiers_percentage = global.soldiers_percentage }
									}
								}
							}
					#
					#Pops Male to Female Ratio
						if = {
							limit = {
								NOT = { has_variable = pops_male_female_ratio }
							}
							PREV = {
								if = {
									limit = {
										has_variable = pops_male_female_ratio
									}
									set_variable = { PREV.pops_male_female_ratio = pops_male_female_ratio }
								}
								else = {
									set_variable = { PREV.pops_male_female_ratio = global.pops_male_female_ratio }
								}
							}
						}
					#
				#

				#Goods
					set_variable = { life_goods_base_price = PREV.life_goods_base_price }
					set_variable = { life_goods_price = life_goods_base_price }

					set_variable = { everyday_goods_base_price = PREV.everyday_goods_base_price }
					set_variable = { everyday_goods_price = everyday_goods_base_price }
					
					set_variable = { luxury_goods_base_price = PREV.luxury_goods_base_price }
					set_variable = { luxury_goods_price = luxury_goods_base_price }
					
					set_variable = { services_base_price = PREV.services_base_price }
					set_variable = { services_price = services_base_price }
					
					set_variable = { raw_goods_base_price = PREV.raw_goods_base_price }
					set_variable = { raw_goods_price = raw_goods_base_price }
					
					set_variable = { industrial_goods_base_price = PREV.industrial_goods_base_price }
					set_variable = { industrial_goods_price = industrial_goods_base_price }
				#
				
				update_modifiers_state_effects = yes
				
				calculate_demand = yes

				pops_update = yes

				factories_update = yes
				
				#MODIFIERS (To get true production amount)

				#Starting Factory Distribution:
					set_variable = { private_factory_amount = specialists_workforce_amount }
					add_to_variable = { private_factory_amount = craftsmen_workforce_amount }

					set_temp_variable = { govt_factories = industrial_complex_level }
					add_to_temp_variable = { govt_factories = arms_factory_level }
					add_to_temp_variable = { govt_factories = building_level@dockyard }
					set_temp_variable = { govt_employment_max_temp = govt_factories }
					multiply_temp_variable = { govt_employment_max_temp = global.factory_jobs_base_amount }
					subtract_from_variable = { private_factory_amount = govt_employment_max_temp }

					divide_variable = { private_factory_amount = factory_employment_amount_per_factory }
					add_to_variable = { private_factory_amount = 0.4 }
					round_variable = private_factory_amount
					if = {
						limit = {
							check_variable = { private_factory_amount < 0 }
						}
						set_variable = { private_factory_amount = 0 }
					}
					if = {
						limit = {
							check_variable = { factory_employment_amount_per_factory < 2.5 }
						}
						set_variable = { private_factory_amount = 0 }
					}
					
					set_variable = { total_factory_amount = private_factory_amount }
					add_to_variable = { total_factory_amount = govt_factories }

					#For setting different weights for each type. 0 is none, <1 is less, 1 is normal, >1 is more 
					set_temp_variable = { factory_everyday_goods_distribution_adjust_temp = 1 }
					set_temp_variable = { factory_luxury_goods_distribution_adjust_temp = 1 }
					set_temp_variable = { factory_industrial_goods_distribution_adjust_temp = 1 }

					#Change weights here


					#

					#Get Needs Amount adjusted by factory prodution
					set_temp_variable = { factory_everyday_goods_distribution_temp = pops_everyday_goods_need }
					divide_temp_variable = { factory_everyday_goods_distribution_temp = global.factory_everyday_goods_base_production } #TOOD - Use actual factory production amount, not the base one
					multiply_temp_variable = { factory_everyday_goods_distribution_temp = factory_everyday_goods_distribution_adjust_temp }


					set_temp_variable = { factory_luxury_goods_distribution_temp = pops_luxury_goods_need }
					divide_temp_variable = { factory_luxury_goods_distribution_temp = global.factory_luxury_goods_base_production } #TOOD
					multiply_temp_variable = { factory_luxury_goods_distribution_temp = factory_luxury_goods_distribution_adjust_temp }


					set_variable = { factory_industrial_goods_need = factory_everyday_goods_production }
					add_to_variable = { factory_industrial_goods_need = factory_luxury_goods_production }
					add_to_variable = { factory_industrial_goods_need = factory_industrial_goods_production }
					multiply_variable = { factory_industrial_goods_need = global.factory_industrial_goods_base_need }
					set_temp_variable = { modifier_temp = factory_industrial_goods_maintenance_effect }
					add_to_temp_variable = { modifier_temp = 1 }
					multiply_variable = { factory_industrial_goods_need = modifier_temp }

					set_temp_variable = { factory_industrial_goods_distribution_temp = factory_industrial_goods_need }
					divide_temp_variable = { factory_industrial_goods_distribution_temp = global.factory_industrial_goods_base_production } #TOOD
					multiply_temp_variable = { factory_industrial_goods_distribution_temp = factory_industrial_goods_distribution_adjust_temp }


					set_temp_variable = { total_distribution_temp = factory_everyday_goods_distribution_temp }
					add_to_temp_variable = { total_distribution_temp = factory_luxury_goods_distribution_temp }
					add_to_temp_variable = { total_distribution_temp = factory_industrial_goods_distribution_temp }

					divide_temp_variable = { factory_everyday_goods_distribution_temp = total_distribution_temp }
					multiply_temp_variable = { factory_everyday_goods_distribution_temp = private_factory_amount }
					set_temp_variable = { factory_everyday_goods_round_temp = factory_everyday_goods_distribution_temp }
					round_temp_variable = factory_everyday_goods_distribution_temp
					subtract_from_temp_variable = { factory_everyday_goods_round_temp = factory_everyday_goods_distribution_temp }

					divide_temp_variable = { factory_luxury_goods_distribution_temp = total_distribution_temp }
					multiply_temp_variable = { factory_luxury_goods_distribution_temp = private_factory_amount }
					set_temp_variable = { factory_luxury_goods_round_temp = factory_luxury_goods_distribution_temp }
					round_temp_variable = factory_luxury_goods_distribution_temp
					subtract_from_temp_variable = { factory_luxury_goods_round_temp = factory_luxury_goods_distribution_temp }

					divide_temp_variable = { factory_industrial_goods_distribution_temp = total_distribution_temp }
					multiply_temp_variable = { factory_industrial_goods_distribution_temp = private_factory_amount }
					set_temp_variable = { factory_industrial_goods_round_temp = factory_industrial_goods_distribution_temp }
					round_temp_variable = factory_industrial_goods_distribution_temp
					subtract_from_temp_variable = { factory_industrial_goods_round_temp = factory_industrial_goods_distribution_temp }

					set_temp_variable = { total_distribution_temp = factory_everyday_goods_distribution_temp }
					add_to_temp_variable = { total_distribution_temp = factory_luxury_goods_distribution_temp }
					add_to_temp_variable = { total_distribution_temp = factory_industrial_goods_distribution_temp }

					#Basically, what this does is that it adds a factory to the category that was the closest to being rounded
					#Positive: Rounded Down
					#Negative: Rounded Up
					if = {
						limit = {
							NOT = { check_variable = { total_distribution_temp = private_factory_amount } }
						}

						if = {
							limit = {
								check_variable = { total_distribution_temp > private_factory_amount }
							}

							if = {
								limit = {
									check_variable = { factory_everyday_goods_round_temp < factory_luxury_goods_round_temp }
									check_variable = { factory_everyday_goods_round_temp < factory_industrial_goods_round_temp }
								}
								subtract_from_temp_variable = { factory_everyday_goods_distribution_temp = 1 }
								subtract_from_temp_variable = { total_distribution_temp = 1 }
								
								if = {
									limit = {
										check_variable = { total_distribution_temp > private_factory_amount }
									}
									
									if = {
										limit = {
											check_variable = { factory_luxury_goods_round_temp < factory_industrial_goods_round_temp }
										}
										subtract_from_temp_variable = { factory_luxury_goods_distribution_temp = 1 }
									}
									else = {
										subtract_from_temp_variable = { factory_industrial_goods_distribution_temp = 1 }
									}
								}
							}
							else_if = {
								limit = {
									check_variable = { factory_luxury_goods_round_temp < factory_everyday_goods_round_temp }
									check_variable = { factory_luxury_goods_round_temp < factory_industrial_goods_round_temp }
								}
								subtract_from_temp_variable = { factory_luxury_goods_distribution_temp = 1 }
								subtract_from_temp_variable = { total_distribution_temp = 1 }
								
								if = {
									limit = {
										check_variable = { total_distribution_temp > private_factory_amount }
									}
									
									if = {
										limit = {
											check_variable = { factory_everyday_goods_round_temp < factory_industrial_goods_round_temp }
										}
										subtract_from_temp_variable = { factory_everyday_goods_distribution_temp = 1 }
									}
									else = {
										subtract_from_temp_variable = { factory_industrial_goods_distribution_temp = 1 }
									}
								}
							}
							else = {
								subtract_from_temp_variable = { factory_industrial_goods_distribution_temp = 1 }
								subtract_from_temp_variable = { total_distribution_temp = 1 }
								
								if = {
									limit = {
										check_variable = { total_distribution_temp > private_factory_amount }
									}
									
									if = {
										limit = {
											check_variable = { factory_everyday_goods_round_temp < factory_luxury_goods_round_temp }
										}
										subtract_from_temp_variable = { factory_everyday_goods_distribution_temp = 1 }
									}
									else = {
										subtract_from_temp_variable = { factory_luxury_goods_distribution_temp = 1 }
									}
								}
							}
						}
						else = {
							if = {
								limit = {
									check_variable = { factory_everyday_goods_round_temp > factory_luxury_goods_round_temp }
									check_variable = { factory_everyday_goods_round_temp > factory_industrial_goods_round_temp }
								}
								add_to_temp_variable = { factory_everyday_goods_distribution_temp = 1 }
								add_to_temp_variable = { total_distribution_temp = 1 }
								
								if = {
									limit = {
										check_variable = { total_distribution_temp > private_factory_amount }
									}
									
									if = {
										limit = {
											check_variable = { factory_luxury_goods_round_temp > factory_industrial_goods_round_temp }
										}
										add_to_temp_variable = { factory_luxury_goods_distribution_temp = 1 }
									}
									else = {
										add_to_temp_variable = { factory_industrial_goods_distribution_temp = 1 }
									}
								}
							}
							else_if = {
								limit = {
									check_variable = { factory_luxury_goods_round_temp > factory_everyday_goods_round_temp }
									check_variable = { factory_luxury_goods_round_temp > factory_industrial_goods_round_temp }
								}
								add_to_temp_variable = { factory_luxury_goods_distribution_temp = 1 }
								add_to_temp_variable = { total_distribution_temp = 1 }
								
								if = {
									limit = {
										check_variable = { total_distribution_temp > private_factory_amount }
									}
									
									if = {
										limit = {
											check_variable = { factory_everyday_goods_round_temp > factory_industrial_goods_round_temp }
										}
										add_to_temp_variable = { factory_everyday_goods_distribution_temp = 1 }
									}
									else = {
										add_to_temp_variable = { factory_industrial_goods_distribution_temp = 1 }
									}
								}
							}
							else = {
								add_to_temp_variable = { factory_industrial_goods_distribution_temp = 1 }
								add_to_temp_variable = { total_distribution_temp = 1 }
								
								if = {
									limit = {
										check_variable = { total_distribution_temp > private_factory_amount }
									}
									
									if = {
										limit = {
											check_variable = { factory_everyday_goods_round_temp > factory_luxury_goods_round_temp }
										}
										add_to_temp_variable = { factory_everyday_goods_distribution_temp = 1 }
									}
									else = {
										add_to_temp_variable = { factory_luxury_goods_distribution_temp = 1 }
									}
								}
							}
						}
					}



					set_variable = { factory_everyday_goods_amount = factory_everyday_goods_distribution_temp }
					set_variable = { factory_luxury_goods_amount = factory_luxury_goods_distribution_temp }
					set_variable = { factory_industrial_goods_amount = factory_industrial_goods_distribution_temp }
				#
				

				factories_update = yes
				set_variable = { factory_money = factory_money_limit }
				multiply_variable = { factory_money = 1.25 }
				update_production_maintenance = yes
				calculate_supply = yes

				clear_array = pops_life_goods_fulfilled_array
				clear_array = pops_everyday_goods_fulfilled_array
				clear_array = pops_luxury_goods_fulfilled_array
				clear_array = factory_earnings_array
				clear_array = factory_spending_array
				clear_array = gdp_amount_array

				pops_update = yes

				create_pie_chart_pop_type = yes
				calculate_price = yes
				calculate_demand = yes
				calculate_price = yes
				reset_demand = yes
			}
			reset_demand = yes
			every_controlled_state = {
				calculate_demand = yes
				add_to_variable = { update_state_econ_window = 1 }
			}
		}
	}
#

#Segment Scripts
	pops_shopping = {
		#life_goods
			set_temp_variable = { buy_amount = pops_life_goods_demand }
			set_temp_variable = { buy_amount_temp = 1 }
			subtract_from_temp_variable = { buy_amount_temp = pops_life_goods_fulfilled_percentage }
			multiply_temp_variable = { buy_amount = buy_amount_temp }
			set_temp_variable = { money_temp = pops_money } #Can theoretically be infinite
			set_temp_variable = { good_max_temp = pops_rgos_life_goods_production }
			subtract_from_temp_variable = { good_max_temp = pops_rgos_life_goods_sold }
			set_temp_variable = { good_price_temp = life_goods_price }

			#Effect
			shopping_algorithm = yes

			#Resolve
			#add_to_variable = { pops_money = cost_temp } #They are trading with themselves. No point in money exchange
			add_to_variable = { pops_earnings = cost_temp }
			add_to_variable = { rgos_earnings = cost_temp }
			add_to_variable = { pops_rgos_life_goods_sold = buy_amount }

			subtract_from_variable = { pops_money = cost_temp }
			add_to_variable = { pops_goods_spending = cost_temp }
			set_temp_variable = { needs_fulfilled_temp = buy_amount }
			divide_temp_variable = { needs_fulfilled_temp = pops_life_goods_need }
			add_to_variable = { pops_life_goods_fulfilled_percentage = needs_fulfilled_temp }

			clamp_variable = {
				var = pops_life_goods_fulfilled_percentage
				min = 0
				max = 1
			}

		#raw_goods
			set_temp_variable = { buy_amount = pops_artisans_raw_goods_demand }
			set_temp_variable = { buy_amount_temp = 1 }
			subtract_from_temp_variable = { buy_amount_temp = pops_artisans_raw_goods_fulfilled_percentage }
			multiply_temp_variable = { buy_amount = buy_amount_temp }
			set_temp_variable = { money_temp = pops_money } #Can theoretically be infinite
			set_temp_variable = { good_max_temp = pops_rgos_raw_goods_production }
			subtract_from_temp_variable = { good_max_temp = pops_rgos_raw_goods_sold }
			set_temp_variable = { good_price_temp = raw_goods_price }

			#Effect
			shopping_algorithm = yes

			#Resolve
			#add_to_variable = { pops_money = cost_temp } #This would upset the balance of money supply
			add_to_variable = { pops_earnings = cost_temp }
			add_to_variable = { rgos_earnings = cost_temp }
			add_to_variable = { pops_rgos_raw_goods_sold = buy_amount }

			subtract_from_variable = { pops_money = cost_temp }
			add_to_variable = { pops_spending = cost_temp }
			set_temp_variable = { needs_fulfilled_temp = buy_amount }
			divide_temp_variable = { needs_fulfilled_temp = pops_artisans_raw_goods_need }
			add_to_variable = { pops_artisans_raw_goods_fulfilled_percentage = needs_fulfilled_temp }

		#everyday_goods
			set_temp_variable = { buy_amount = pops_everyday_goods_demand }
			set_temp_variable = { buy_amount_temp = 1 }
			subtract_from_temp_variable = { buy_amount_temp = pops_everyday_goods_fulfilled_percentage }
			multiply_temp_variable = { buy_amount = buy_amount_temp }
			set_temp_variable = { money_temp = pops_money }
			set_temp_variable = { good_max_temp = factory_everyday_goods_production }
			add_to_temp_variable = { good_max_temp = pops_artisans_everyday_goods_production }
			subtract_from_temp_variable = { good_max_temp = factory_everyday_goods_sold }
			subtract_from_temp_variable = { good_max_temp = pops_artisans_everyday_goods_sold }
			set_temp_variable = { good_price_temp = everyday_goods_price }

			#Effect
			shopping_algorithm = yes

			#Resolve
			#Splitting between Factories and Artisans
			set_temp_variable = { artisan_share = pops_artisans_everyday_goods_production }
			multiply_temp_variable = { artisan_share = 100 }
			divide_temp_variable = { artisan_share = everyday_goods_produced_amount }

			set_temp_variable = { factory_share = factory_everyday_goods_production }
			multiply_temp_variable = { factory_share = 100 }
			divide_temp_variable = { factory_share = everyday_goods_produced_amount }

			set_temp_variable = { artisan_cost_temp = cost_temp }
			set_temp_variable = { artisan_buy_amount = buy_amount }
			multiply_temp_variable = { artisan_cost_temp = artisan_share }
			divide_temp_variable = { artisan_cost_temp = 100 }
			multiply_temp_variable = { artisan_buy_amount = artisan_share }
			divide_temp_variable = { artisan_buy_amount = 100 }

			set_temp_variable = { factory_cost_temp = cost_temp }
			set_temp_variable = { factory_buy_amount = buy_amount }
			multiply_temp_variable = { factory_cost_temp = factory_share }
			divide_temp_variable = { factory_cost_temp = 100 }
			multiply_temp_variable = { factory_buy_amount = factory_share }
			divide_temp_variable = { factory_buy_amount = 100 }

			set_temp_variable = { total_cost_temp = artisan_cost_temp }
			add_to_temp_variable = { total_cost_temp = factory_cost_temp }
			set_temp_variable = { total_buy_amount_temp = artisan_buy_amount }
			add_to_temp_variable = { total_buy_amount_temp = factory_buy_amount }

			if = {
				limit = {
					NOT = { check_variable = { total_cost_temp = cost_temp } }
				}
				subtract_from_temp_variable = { total_cost_temp = cost_temp }
				subtract_from_temp_variable = { factory_cost_temp = total_cost_temp }
			}
			if = {
				limit = {
					NOT = { check_variable = { total_buy_amount_temp = buy_amount } }
				}
				subtract_from_temp_variable = { total_buy_amount_temp = buy_amount }
				subtract_from_temp_variable = { factory_buy_amount = total_buy_amount_temp }
				subtract_from_temp_variable = { factory_buy_amount = 0.001 }
				add_to_temp_variable = { artisan_buy_amount = 0.001 }
			}
			
			add_to_variable = { factory_money = factory_cost_temp }
			add_to_variable = { factory_earnings = factory_cost_temp }
			add_to_variable = { factory_everyday_goods_sold = factory_buy_amount }

			if = { 
				limit = {
					check_variable = { factory_everyday_goods_sold > factory_everyday_goods_production }
				}
				add_to_temp_variable = { artisan_buy_amount = factory_everyday_goods_sold }
				subtract_from_temp_variable = { artisan_buy_amount = factory_everyday_goods_production }
				set_variable = { factory_everyday_goods_sold = factory_everyday_goods_production }
			}

			add_to_variable = { artisans_earnings = artisan_cost_temp }
			add_to_variable = { pops_earnings = artisan_cost_temp }
			add_to_variable = { pops_artisans_everyday_goods_sold = artisan_buy_amount }

			subtract_from_variable = { pops_money = cost_temp }
			add_to_variable = { pops_goods_spending = cost_temp }
			set_temp_variable = { needs_fulfilled_temp = buy_amount }
			divide_temp_variable = { needs_fulfilled_temp = pops_everyday_goods_need }
			add_to_variable = { pops_everyday_goods_fulfilled_percentage = needs_fulfilled_temp }

			clamp_variable = {
				var = pops_everyday_goods_fulfilled_percentage
				min = 0
				max = 1
			}

		#luxury_goods
			set_temp_variable = { buy_amount = pops_luxury_goods_demand }
			set_temp_variable = { buy_amount_temp = 1 }
			subtract_from_temp_variable = { buy_amount_temp = pops_luxury_goods_fulfilled_percentage }
			multiply_temp_variable = { buy_amount = buy_amount_temp }
			set_temp_variable = { money_temp = pops_money }
			set_temp_variable = { good_max_temp = factory_luxury_goods_production }
			add_to_temp_variable = { good_max_temp = pops_artisans_luxury_goods_production }
			subtract_from_temp_variable = { good_max_temp = factory_luxury_goods_sold }
			subtract_from_temp_variable = { good_max_temp = pops_artisans_luxury_goods_sold }
			set_temp_variable = { good_price_temp = luxury_goods_price }

			#Effect
			shopping_algorithm = yes

			#Resolve
			#Splitting between Factories and Artisans
			set_temp_variable = { artisan_share = pops_artisans_luxury_goods_production }
			multiply_temp_variable = { artisan_share = 100 }
			divide_temp_variable = { artisan_share = luxury_goods_produced_amount }

			set_temp_variable = { factory_share = factory_luxury_goods_production }
			multiply_temp_variable = { factory_share = 100 }
			divide_temp_variable = { factory_share = luxury_goods_produced_amount }

			set_temp_variable = { artisan_cost_temp = cost_temp }
			set_temp_variable = { artisan_buy_amount = buy_amount }
			multiply_temp_variable = { artisan_cost_temp = artisan_share }
			divide_temp_variable = { artisan_cost_temp = 100 }
			multiply_temp_variable = { artisan_buy_amount = artisan_share }
			divide_temp_variable = { artisan_buy_amount = 100 }

			set_temp_variable = { factory_cost_temp = cost_temp }
			set_temp_variable = { factory_buy_amount = buy_amount }
			multiply_temp_variable = { factory_cost_temp = factory_share }
			divide_temp_variable = { factory_cost_temp = 100 }
			multiply_temp_variable = { factory_buy_amount = factory_share }
			divide_temp_variable = { factory_buy_amount = 100 }

			set_temp_variable = { total_cost_temp = artisan_cost_temp }
			add_to_temp_variable = { total_cost_temp = factory_cost_temp }
			set_temp_variable = { total_buy_amount_temp = artisan_buy_amount }
			add_to_temp_variable = { total_buy_amount_temp = factory_buy_amount }

			if = {
				limit = {
					NOT = { check_variable = { total_cost_temp = cost_temp } }
				}
				subtract_from_temp_variable = { total_cost_temp = cost_temp }
				subtract_from_temp_variable = { factory_cost_temp = total_cost_temp }
			}
			if = {
				limit = {
					NOT = { check_variable = { total_buy_amount_temp = buy_amount } }
				}
				subtract_from_temp_variable = { total_buy_amount_temp = buy_amount }
				subtract_from_temp_variable = { factory_buy_amount = total_buy_amount_temp }
			}
			
			add_to_variable = { factory_money = factory_cost_temp }
			add_to_variable = { factory_earnings = factory_cost_temp }
			add_to_variable = { factory_luxury_goods_sold = factory_buy_amount }

			if = { 
				limit = {
					check_variable = { factory_luxury_goods_sold > factory_luxury_goods_production }
				}
				add_to_temp_variable = { artisan_buy_amount = factory_luxury_goods_sold }
				subtract_from_temp_variable = { artisan_buy_amount = factory_luxury_goods_production }
				set_variable = { factory_luxury_goods_sold = factory_luxury_goods_production }
			}

			add_to_variable = { artisans_earnings = artisan_cost_temp }
			add_to_variable = { pops_earnings = artisan_cost_temp }
			add_to_variable = { pops_artisans_luxury_goods_sold = artisan_buy_amount }

			subtract_from_variable = { pops_money = cost_temp }
			add_to_variable = { pops_goods_spending = cost_temp }
			set_temp_variable = { needs_fulfilled_temp = buy_amount }
			divide_temp_variable = { needs_fulfilled_temp = pops_luxury_goods_need }
			add_to_variable = { pops_luxury_goods_fulfilled_percentage = needs_fulfilled_temp }
			if = {
				limit = {
					check_variable = { pops_luxury_goods_fulfilled_percentage < 0.99 }
				}
				#Buy from Artisans
			}

			clamp_variable = {
				var = pops_luxury_goods_fulfilled_percentage
				min = 0
				max = 1
			}

		#services
			set_temp_variable = { buy_amount = pops_services_demand }
			set_temp_variable = { buy_amount_temp = 1 }
			subtract_from_temp_variable = { buy_amount_temp = pops_services_fulfilled_percentage }
			multiply_temp_variable = { buy_amount = buy_amount_temp }
			set_temp_variable = { money_temp = pops_money }
			set_temp_variable = { good_max_temp = pops_services_production }
			subtract_from_temp_variable = { good_max_temp = pops_services_sold }
			set_temp_variable = { good_price_temp = services_price }

			#Effect
			shopping_algorithm = yes

			#Resolve
			#add_to_variable = { pops_money = cost_temp }
			add_to_variable = { pops_earnings = cost_temp }

			set_temp_variable = { capitalists_share = pops_services_production }
			multiply_temp_variable = { capitalists_share = 50 }
			set_temp_variable = { clerks_share = pops_clerks_services_production }
			multiply_temp_variable = { clerks_share = 100 }
			set_temp_variable = { professionals_share = pops_professionals_services_production }
			multiply_temp_variable = { professionals_share = 100 }

			set_temp_variable = { share_total = capitalists_share }
			add_to_temp_variable = { share_total = clerks_share }
			add_to_temp_variable = { share_total = professionals_share }
			divide_temp_variable = { share_total = 100 }

			divide_temp_variable = { capitalists_share = share_total }
			divide_temp_variable = { clerks_share = share_total }
			divide_temp_variable = { professionals_share = share_total }

			set_temp_variable = { capitalists_value = cost_temp }
			multiply_temp_variable = { capitalists_value = capitalists_share }
			divide_temp_variable = { capitalists_value = 100 }
			set_temp_variable = { clerks_value = cost_temp }
			multiply_temp_variable = { clerks_value = clerks_share }
			divide_temp_variable = { clerks_value = 100 }
			set_temp_variable = { professionals_value = cost_temp }
			multiply_temp_variable = { professionals_value = professionals_share }
			divide_temp_variable = { professionals_value = 100 }

			add_to_variable = { capitalists_earnings = capitalists_value }
			add_to_variable = { clerks_earnings = clerks_value }
			add_to_variable = { professionals_earnings = professionals_value }

			add_to_variable = { pops_services_sold = buy_amount }

			subtract_from_variable = { pops_money = cost_temp }
			add_to_variable = { pops_goods_spending = cost_temp }
			set_temp_variable = { needs_fulfilled_temp = buy_amount }
			divide_temp_variable = { needs_fulfilled_temp = pops_services_demand }
			add_to_variable = { pops_services_fulfilled_percentage = needs_fulfilled_temp }

			clamp_variable = {
				var = pops_services_fulfilled_percentage
				min = 0
				max = 1
			}
	}
	factory_shopping = {
		#raw_goods
			set_temp_variable = { buy_amount = factory_raw_goods_demand }
			set_temp_variable = { money_temp = factory_money } #Can theoretically be infinite
			set_temp_variable = { good_max_temp = pops_rgos_raw_goods_production }
			subtract_from_temp_variable = { good_max_temp = pops_rgos_raw_goods_sold }
			set_temp_variable = { good_price_temp = raw_goods_price }

			#Effect
			shopping_algorithm = yes

			#Resolve
			#add_to_variable = { pops_money = cost_temp } #This would upset the balance of money supply
			add_to_variable = { pops_earnings = cost_temp }
			add_to_variable = { rgos_earnings = cost_temp }
			add_to_variable = { pops_rgos_raw_goods_sold = buy_amount }

			subtract_from_variable = { factory_money = cost_temp }
			add_to_variable = { factory_spending = cost_temp }
			set_temp_variable = { needs_fulfilled_temp = buy_amount }
			divide_temp_variable = { needs_fulfilled_temp = factory_raw_goods_need }
			add_to_variable = { factory_raw_goods_fulfilled_percentage = needs_fulfilled_temp }

			clamp_variable = {
				var = factory_raw_goods_fulfilled_percentage
				min = 0
				max = 1
			}
		#
		#industrial_goods
			set_temp_variable = { buy_amount = factory_industrial_goods_demand }
			set_temp_variable = { money_temp = factory_money }
			set_temp_variable = { good_max_temp = factory_industrial_goods_production }
			add_to_temp_variable = { good_max_temp = pops_artisans_industrial_goods_production }
			subtract_from_temp_variable = { good_max_temp = factory_industrial_goods_sold }
			subtract_from_temp_variable = { good_max_temp = pops_artisans_industrial_goods_sold }
			set_temp_variable = { good_price_temp = industrial_goods_price }

			#Effect
			shopping_algorithm = yes

			#Resolve
			#Splitting between Factories and Artisans
			set_temp_variable = { artisan_share = pops_artisans_industrial_goods_production }
			multiply_temp_variable = { artisan_share = 100 }
			divide_temp_variable = { artisan_share = industrial_goods_produced_amount }

			set_temp_variable = { factory_share = factory_industrial_goods_production }
			multiply_temp_variable = { factory_share = 100 }
			divide_temp_variable = { factory_share = industrial_goods_produced_amount }

			set_temp_variable = { artisan_cost_temp = cost_temp }
			set_temp_variable = { artisan_buy_amount = buy_amount }
			multiply_temp_variable = { artisan_cost_temp = artisan_share }
			divide_temp_variable = { artisan_cost_temp = 100 }
			multiply_temp_variable = { artisan_buy_amount = artisan_share }
			divide_temp_variable = { artisan_buy_amount = 100 }

			set_temp_variable = { factory_cost_temp = cost_temp }
			set_temp_variable = { factory_buy_amount = buy_amount }
			multiply_temp_variable = { factory_cost_temp = factory_share }
			divide_temp_variable = { factory_cost_temp = 100 }
			multiply_temp_variable = { factory_buy_amount = factory_share }
			divide_temp_variable = { factory_buy_amount = 100 }

			set_temp_variable = { total_cost_temp = artisan_cost_temp }
			add_to_temp_variable = { total_cost_temp = factory_cost_temp }
			set_temp_variable = { total_buy_amount_temp = artisan_buy_amount }
			add_to_temp_variable = { total_buy_amount_temp = factory_buy_amount }

			if = {
				limit = {
					NOT = { check_variable = { total_cost_temp = cost_temp } }
				}
				subtract_from_temp_variable = { total_cost_temp = cost_temp }
				subtract_from_temp_variable = { factory_cost_temp = total_cost_temp }
			}
			if = {
				limit = {
					NOT = { check_variable = { total_buy_amount_temp = buy_amount } }
				}
				subtract_from_temp_variable = { total_buy_amount_temp = buy_amount }
				subtract_from_temp_variable = { factory_buy_amount = total_buy_amount_temp }
				subtract_from_temp_variable = { factory_buy_amount = 0.001 }
				add_to_temp_variable = { artisan_buy_amount = 0.001 }
			}
			
			add_to_variable = { factory_money = factory_cost_temp }
			add_to_variable = { factory_earnings = factory_cost_temp }
			add_to_variable = { factory_industrial_goods_sold = factory_buy_amount }

			if = { 
				limit = {
					check_variable = { factory_industrial_goods_sold > factory_industrial_goods_production }
				}
				add_to_temp_variable = { artisan_buy_amount = factory_industrial_goods_sold }
				subtract_from_temp_variable = { artisan_buy_amount = factory_industrial_goods_production }
				set_variable = { factory_industrial_goods_sold = factory_industrial_goods_production }
			}

			add_to_variable = { artisans_earnings = artisan_cost_temp }
			add_to_variable = { pops_earnings = artisan_cost_temp }
			add_to_variable = { pops_artisans_industrial_goods_sold = artisan_buy_amount }

			subtract_from_variable = { factory_money = cost_temp }
			add_to_variable = { factory_spending = cost_temp }
			set_temp_variable = { needs_fulfilled_temp = buy_amount }
			divide_temp_variable = { needs_fulfilled_temp = factory_industrial_goods_need }
			add_to_variable = { factory_industrial_goods_fulfilled_percentage = needs_fulfilled_temp }

			clamp_variable = {
				var = factory_industrial_goods_fulfilled_percentage
				min = 0
				max = 1
			}
		#
		#Construction
			#Everyday Goods Factory
				set_temp_variable = { buy_amount = factory_everyday_goods_construction_industrial_goods_demand }
				set_temp_variable = { money_temp = factory_everyday_goods_construction_investment_money }
				set_temp_variable = { good_max_temp = factory_industrial_goods_production }
				add_to_temp_variable = { good_max_temp = pops_artisans_industrial_goods_production }
				subtract_from_temp_variable = { good_max_temp = factory_industrial_goods_sold }
				subtract_from_temp_variable = { good_max_temp = pops_artisans_industrial_goods_sold }
				set_temp_variable = { good_price_temp = industrial_goods_price }

				#Effect
				shopping_algorithm = yes

				#Resolve
				#Splitting between Factories and Artisans
				set_temp_variable = { artisan_share = pops_artisans_industrial_goods_production }
				multiply_temp_variable = { artisan_share = 100 }
				divide_temp_variable = { artisan_share = industrial_goods_produced_amount }

				set_temp_variable = { factory_share = factory_industrial_goods_production }
				multiply_temp_variable = { factory_share = 100 }
				divide_temp_variable = { factory_share = industrial_goods_produced_amount }

				set_temp_variable = { artisan_cost_temp = cost_temp }
				set_temp_variable = { artisan_buy_amount = buy_amount }
				multiply_temp_variable = { artisan_cost_temp = artisan_share }
				divide_temp_variable = { artisan_cost_temp = 100 }
				multiply_temp_variable = { artisan_buy_amount = artisan_share }
				divide_temp_variable = { artisan_buy_amount = 100 }

				set_temp_variable = { factory_cost_temp = cost_temp }
				set_temp_variable = { factory_buy_amount = buy_amount }
				multiply_temp_variable = { factory_cost_temp = factory_share }
				divide_temp_variable = { factory_cost_temp = 100 }
				multiply_temp_variable = { factory_buy_amount = factory_share }
				divide_temp_variable = { factory_buy_amount = 100 }

				set_temp_variable = { total_cost_temp = artisan_cost_temp }
				add_to_temp_variable = { total_cost_temp = factory_cost_temp }
				set_temp_variable = { total_buy_amount_temp = artisan_buy_amount }
				add_to_temp_variable = { total_buy_amount_temp = factory_buy_amount }

				if = {
					limit = {
						NOT = { check_variable = { total_cost_temp = cost_temp } }
					}
					subtract_from_temp_variable = { total_cost_temp = cost_temp }
					subtract_from_temp_variable = { factory_cost_temp = total_cost_temp }
				}
				if = {
					limit = {
						NOT = { check_variable = { total_buy_amount_temp = buy_amount } }
					}
					subtract_from_temp_variable = { total_buy_amount_temp = buy_amount }
					subtract_from_temp_variable = { factory_buy_amount = total_buy_amount_temp }
					subtract_from_temp_variable = { factory_buy_amount = 0.001 }
					add_to_temp_variable = { artisan_buy_amount = 0.001 }
				}
				
				add_to_variable = { factory_money = factory_cost_temp }
				add_to_variable = { factory_earnings = factory_cost_temp }
				add_to_variable = { factory_industrial_goods_sold = factory_buy_amount }

				if = { 
					limit = {
						check_variable = { factory_industrial_goods_sold > factory_industrial_goods_production }
					}
					add_to_temp_variable = { artisan_buy_amount = factory_industrial_goods_sold }
					subtract_from_temp_variable = { artisan_buy_amount = factory_industrial_goods_production }
					set_variable = { factory_industrial_goods_sold = factory_industrial_goods_production }
				}

				add_to_variable = { artisans_earnings = artisan_cost_temp }
				add_to_variable = { pops_earnings = artisan_cost_temp }
				add_to_variable = { pops_artisans_industrial_goods_sold = artisan_buy_amount }

				subtract_from_variable = { factory_everyday_goods_construction_investment_money = cost_temp }
				subtract_from_variable = { factory_everyday_goods_construction_industrial_goods_need = buy_amount }
			#
			#Luxury Goods Factory
				set_temp_variable = { buy_amount = factory_luxury_goods_construction_industrial_goods_demand }
				set_temp_variable = { money_temp = factory_luxury_goods_construction_investment_money }
				set_temp_variable = { good_max_temp = factory_industrial_goods_production }
				add_to_temp_variable = { good_max_temp = pops_artisans_industrial_goods_production }
				subtract_from_temp_variable = { good_max_temp = factory_industrial_goods_sold }
				subtract_from_temp_variable = { good_max_temp = pops_artisans_industrial_goods_sold }
				set_temp_variable = { good_price_temp = industrial_goods_price }

				#Effect
				shopping_algorithm = yes

				#Resolve
				#Splitting between Factories and Artisans
				set_temp_variable = { artisan_share = pops_artisans_industrial_goods_production }
				multiply_temp_variable = { artisan_share = 100 }
				divide_temp_variable = { artisan_share = industrial_goods_produced_amount }

				set_temp_variable = { factory_share = factory_industrial_goods_production }
				multiply_temp_variable = { factory_share = 100 }
				divide_temp_variable = { factory_share = industrial_goods_produced_amount }

				set_temp_variable = { artisan_cost_temp = cost_temp }
				set_temp_variable = { artisan_buy_amount = buy_amount }
				multiply_temp_variable = { artisan_cost_temp = artisan_share }
				divide_temp_variable = { artisan_cost_temp = 100 }
				multiply_temp_variable = { artisan_buy_amount = artisan_share }
				divide_temp_variable = { artisan_buy_amount = 100 }

				set_temp_variable = { factory_cost_temp = cost_temp }
				set_temp_variable = { factory_buy_amount = buy_amount }
				multiply_temp_variable = { factory_cost_temp = factory_share }
				divide_temp_variable = { factory_cost_temp = 100 }
				multiply_temp_variable = { factory_buy_amount = factory_share }
				divide_temp_variable = { factory_buy_amount = 100 }

				set_temp_variable = { total_cost_temp = artisan_cost_temp }
				add_to_temp_variable = { total_cost_temp = factory_cost_temp }
				set_temp_variable = { total_buy_amount_temp = artisan_buy_amount }
				add_to_temp_variable = { total_buy_amount_temp = factory_buy_amount }

				if = {
					limit = {
						NOT = { check_variable = { total_cost_temp = cost_temp } }
					}
					subtract_from_temp_variable = { total_cost_temp = cost_temp }
					subtract_from_temp_variable = { factory_cost_temp = total_cost_temp }
				}
				if = {
					limit = {
						NOT = { check_variable = { total_buy_amount_temp = buy_amount } }
					}
					subtract_from_temp_variable = { total_buy_amount_temp = buy_amount }
					subtract_from_temp_variable = { factory_buy_amount = total_buy_amount_temp }
					subtract_from_temp_variable = { factory_buy_amount = 0.001 }
					add_to_temp_variable = { artisan_buy_amount = 0.001 }
				}
				
				add_to_variable = { factory_money = factory_cost_temp }
				add_to_variable = { factory_earnings = factory_cost_temp }
				add_to_variable = { factory_industrial_goods_sold = factory_buy_amount }

				if = { 
					limit = {
						check_variable = { factory_industrial_goods_sold > factory_industrial_goods_production }
					}
					add_to_temp_variable = { artisan_buy_amount = factory_industrial_goods_sold }
					subtract_from_temp_variable = { artisan_buy_amount = factory_industrial_goods_production }
					set_variable = { factory_industrial_goods_sold = factory_industrial_goods_production }
				}

				add_to_variable = { artisans_earnings = artisan_cost_temp }
				add_to_variable = { pops_earnings = artisan_cost_temp }
				add_to_variable = { pops_artisans_industrial_goods_sold = artisan_buy_amount }

				subtract_from_variable = { factory_luxury_goods_construction_investment_money = cost_temp }
				subtract_from_variable = { factory_luxury_goods_construction_industrial_goods_need = buy_amount }
			#
			#Industrial Goods Factory
				set_temp_variable = { buy_amount = factory_industrial_goods_construction_industrial_goods_demand }
				set_temp_variable = { money_temp = factory_industrial_goods_construction_investment_money }
				set_temp_variable = { good_max_temp = factory_industrial_goods_production }
				add_to_temp_variable = { good_max_temp = pops_artisans_industrial_goods_production }
				subtract_from_temp_variable = { good_max_temp = factory_industrial_goods_sold }
				subtract_from_temp_variable = { good_max_temp = pops_artisans_industrial_goods_sold }
				set_temp_variable = { good_price_temp = industrial_goods_price }

				#Effect
				shopping_algorithm = yes

				#Resolve
				#Splitting between Factories and Artisans
				set_temp_variable = { artisan_share = pops_artisans_industrial_goods_production }
				multiply_temp_variable = { artisan_share = 100 }
				divide_temp_variable = { artisan_share = industrial_goods_produced_amount }

				set_temp_variable = { factory_share = factory_industrial_goods_production }
				multiply_temp_variable = { factory_share = 100 }
				divide_temp_variable = { factory_share = industrial_goods_produced_amount }

				set_temp_variable = { artisan_cost_temp = cost_temp }
				set_temp_variable = { artisan_buy_amount = buy_amount }
				multiply_temp_variable = { artisan_cost_temp = artisan_share }
				divide_temp_variable = { artisan_cost_temp = 100 }
				multiply_temp_variable = { artisan_buy_amount = artisan_share }
				divide_temp_variable = { artisan_buy_amount = 100 }

				set_temp_variable = { factory_cost_temp = cost_temp }
				set_temp_variable = { factory_buy_amount = buy_amount }
				multiply_temp_variable = { factory_cost_temp = factory_share }
				divide_temp_variable = { factory_cost_temp = 100 }
				multiply_temp_variable = { factory_buy_amount = factory_share }
				divide_temp_variable = { factory_buy_amount = 100 }

				set_temp_variable = { total_cost_temp = artisan_cost_temp }
				add_to_temp_variable = { total_cost_temp = factory_cost_temp }
				set_temp_variable = { total_buy_amount_temp = artisan_buy_amount }
				add_to_temp_variable = { total_buy_amount_temp = factory_buy_amount }

				if = {
					limit = {
						NOT = { check_variable = { total_cost_temp = cost_temp } }
					}
					subtract_from_temp_variable = { total_cost_temp = cost_temp }
					subtract_from_temp_variable = { factory_cost_temp = total_cost_temp }
				}
				if = {
					limit = {
						NOT = { check_variable = { total_buy_amount_temp = buy_amount } }
					}
					subtract_from_temp_variable = { total_buy_amount_temp = buy_amount }
					subtract_from_temp_variable = { factory_buy_amount = total_buy_amount_temp }
					subtract_from_temp_variable = { factory_buy_amount = 0.001 }
					add_to_temp_variable = { artisan_buy_amount = 0.001 }
				}
				
				add_to_variable = { factory_money = factory_cost_temp }
				add_to_variable = { factory_earnings = factory_cost_temp }
				add_to_variable = { factory_industrial_goods_sold = factory_buy_amount }

				if = { 
					limit = {
						check_variable = { factory_industrial_goods_sold > factory_industrial_goods_production }
					}
					add_to_temp_variable = { artisan_buy_amount = factory_industrial_goods_sold }
					subtract_from_temp_variable = { artisan_buy_amount = factory_industrial_goods_production }
					set_variable = { factory_industrial_goods_sold = factory_industrial_goods_production }
				}

				add_to_variable = { artisans_earnings = artisan_cost_temp }
				add_to_variable = { pops_earnings = artisan_cost_temp }
				add_to_variable = { pops_artisans_industrial_goods_sold = artisan_buy_amount }

				subtract_from_variable = { factory_industrial_goods_construction_investment_money = cost_temp }
				subtract_from_variable = { factory_industrial_goods_construction_industrial_goods_need = buy_amount }
			#
		#
	}
	infra_shopping = {

		#industrial_goods
			set_temp_variable = { buy_amount = infrastructure_industrial_goods_demand }
			set_temp_variable = { money_temp = infrastructure_money } #Can theoretically be infinite
			set_temp_variable = { good_max_temp = factory_industrial_goods_production }
			add_to_temp_variable = { good_max_temp = pops_artisans_industrial_goods_production }
			subtract_from_temp_variable = { good_max_temp = factory_industrial_goods_sold }
			subtract_from_temp_variable = { good_max_temp = pops_artisans_industrial_goods_sold }
			set_temp_variable = { good_price_temp = industrial_goods_price }

			#Effect
			shopping_algorithm = yes

			#Resolve
			#add_to_variable = { pops_money = cost_temp } #This would upset the balance of money supply
			add_to_variable = { pops_earnings = cost_temp }
			add_to_variable = { rgos_earnings = cost_temp }
			add_to_variable = { pops_rgos_industrial_goods_sold = buy_amount }

			subtract_from_variable = { infrastructure_money = cost_temp }
			set_temp_variable = { needs_fulfilled_temp = buy_amount }
			divide_temp_variable = { needs_fulfilled_temp = infrastructure_industrial_goods_need }
			add_to_variable = { infrastructure_industrial_goods_fulfilled_percentage = needs_fulfilled_temp }

			clamp_variable = {
				var = infrastructure_industrial_goods_fulfilled_percentage
				min = 0
				max = 1
			}
		#
		#Construction

			#Infrastructure
				set_temp_variable = { buy_amount = infrastructure_construction_industrial_goods_demand }
				set_temp_variable = { money_temp = infrastructure_construction_investment_money }
				set_temp_variable = { good_max_temp = factory_industrial_goods_production }
				add_to_temp_variable = { good_max_temp = pops_artisans_industrial_goods_production }
				subtract_from_temp_variable = { good_max_temp = factory_industrial_goods_sold }
				subtract_from_temp_variable = { good_max_temp = pops_artisans_industrial_goods_sold }
				set_temp_variable = { good_price_temp = industrial_goods_price }

				#Effect
				shopping_algorithm = yes

				#Resolve
				#Splitting between Factories and Artisans
				set_temp_variable = { artisan_share = pops_artisans_industrial_goods_production }
				multiply_temp_variable = { artisan_share = 100 }
				divide_temp_variable = { artisan_share = industrial_goods_produced_amount }

				set_temp_variable = { factory_share = factory_industrial_goods_production }
				multiply_temp_variable = { factory_share = 100 }
				divide_temp_variable = { factory_share = industrial_goods_produced_amount }

				set_temp_variable = { artisan_cost_temp = cost_temp }
				set_temp_variable = { artisan_buy_amount = buy_amount }
				multiply_temp_variable = { artisan_cost_temp = artisan_share }
				divide_temp_variable = { artisan_cost_temp = 100 }
				multiply_temp_variable = { artisan_buy_amount = artisan_share }
				divide_temp_variable = { artisan_buy_amount = 100 }

				set_temp_variable = { factory_cost_temp = cost_temp }
				set_temp_variable = { factory_buy_amount = buy_amount }
				multiply_temp_variable = { factory_cost_temp = factory_share }
				divide_temp_variable = { factory_cost_temp = 100 }
				multiply_temp_variable = { factory_buy_amount = factory_share }
				divide_temp_variable = { factory_buy_amount = 100 }

				set_temp_variable = { total_cost_temp = artisan_cost_temp }
				add_to_temp_variable = { total_cost_temp = factory_cost_temp }
				set_temp_variable = { total_buy_amount_temp = artisan_buy_amount }
				add_to_temp_variable = { total_buy_amount_temp = factory_buy_amount }

				if = {
					limit = {
						NOT = { check_variable = { total_cost_temp = cost_temp } }
					}
					subtract_from_temp_variable = { total_cost_temp = cost_temp }
					subtract_from_temp_variable = { factory_cost_temp = total_cost_temp }
				}
				if = {
					limit = {
						NOT = { check_variable = { total_buy_amount_temp = buy_amount } }
					}
					subtract_from_temp_variable = { total_buy_amount_temp = buy_amount }
					subtract_from_temp_variable = { factory_buy_amount = total_buy_amount_temp }
					subtract_from_temp_variable = { factory_buy_amount = 0.001 }
					add_to_temp_variable = { artisan_buy_amount = 0.001 }
				}
				
				add_to_variable = { factory_money = factory_cost_temp }
				add_to_variable = { factory_earnings = factory_cost_temp }
				add_to_variable = { factory_industrial_goods_sold = factory_buy_amount }

				if = { 
					limit = {
						check_variable = { factory_industrial_goods_sold > factory_industrial_goods_production }
					}
					add_to_temp_variable = { artisan_buy_amount = factory_industrial_goods_sold }
					subtract_from_temp_variable = { artisan_buy_amount = factory_industrial_goods_production }
					set_variable = { factory_industrial_goods_sold = factory_industrial_goods_production }
				}

				add_to_variable = { artisans_earnings = artisan_cost_temp }
				add_to_variable = { pops_earnings = artisan_cost_temp }
				add_to_variable = { pops_artisans_industrial_goods_sold = artisan_buy_amount }

				subtract_from_variable = { infrastructure_construction_investment_money = cost_temp }
				subtract_from_variable = { infrastructure_construction_industrial_goods_need = buy_amount }
			#
		#
	}
#

#Update Scripts
	pops_update = {

		#Males/Females
		set_temp_variable = { divisor_temp = 1 }
		add_to_temp_variable = { divisor_temp = pops_male_female_ratio }

		set_variable = { pops_females_amount = pops_amount }
		divide_variable = { pops_females_amount = divisor_temp }

		set_variable = { pops_males_amount = pops_amount }
		subtract_from_variable = { pops_males_amount = pops_females_amount }

		#Workforce
		set_temp_variable = { women_in_workforce_temp = pops_females_amount }
		set_temp_variable = { men_in_workforce_temp = pops_males_amount }
		owner = {
			multiply_temp_variable = { PREV.women_in_workforce_temp = pops_female_workforce_participation }
			multiply_temp_variable = { PREV.men_in_workforce_temp = pops_male_workforce_participation }
		}
		set_variable = { pops_workforce_amount = women_in_workforce_temp }
		add_to_variable = { pops_workforce_amount = men_in_workforce_temp }
		set_variable = { pops_workforce_percentage = pops_workforce_amount }
		multiply_variable = { pops_workforce_percentage = 100 }
		divide_variable = { pops_workforce_percentage = pops_amount }

		#Pop Types
			#Upper Strata
			#Aristocrats
				set_variable = { aristocrats_amount = pops_amount }
				divide_variable = { aristocrats_amount = 100 }
				multiply_variable = { aristocrats_amount = aristocrats_percentage }

				set_variable = { aristocrats_workforce_amount = pops_workforce_amount }
				divide_variable = { aristocrats_workforce_amount = 100 }
				multiply_variable = { aristocrats_workforce_amount = aristocrats_percentage }
			#
			#Capitalists
				set_variable = { capitalists_amount = pops_amount }
				divide_variable = { capitalists_amount = 100 }
				multiply_variable = { capitalists_amount = capitalists_percentage }

				set_variable = { capitalists_workforce_amount = pops_workforce_amount }
				divide_variable = { capitalists_workforce_amount = 100 }
				multiply_variable = { capitalists_workforce_amount = capitalists_percentage }
			#

			#Middle Strata
			#Artisans
				set_variable = { artisans_amount = pops_amount }
				divide_variable = { artisans_amount = 100 }
				multiply_variable = { artisans_amount = artisans_percentage }

				set_variable = { artisans_workforce_amount = pops_workforce_amount }
				divide_variable = { artisans_workforce_amount = 100 }
				multiply_variable = { artisans_workforce_amount = artisans_percentage }
			#
			#Specialists
				set_variable = { specialists_amount = pops_amount }
				divide_variable = { specialists_amount = 100 }
				multiply_variable = { specialists_amount = specialists_percentage }

				set_variable = { specialists_workforce_amount = pops_workforce_amount }
				divide_variable = { specialists_workforce_amount = 100 }
				multiply_variable = { specialists_workforce_amount = specialists_percentage }
			#
			#Professionals
				set_variable = { professionals_amount = pops_amount }
				divide_variable = { professionals_amount = 100 }
				multiply_variable = { professionals_amount = professionals_percentage }

				set_variable = { professionals_workforce_amount = pops_workforce_amount }
				divide_variable = { professionals_workforce_amount = 100 }
				multiply_variable = { professionals_workforce_amount = professionals_percentage }
			#
			#Officers
				set_variable = { officers_amount = pops_amount }
				divide_variable = { officers_amount = 100 }
				multiply_variable = { officers_amount = officers_percentage }

				set_variable = { officers_workforce_amount = pops_workforce_amount }
				divide_variable = { officers_workforce_amount = 100 }
				multiply_variable = { officers_workforce_amount = officers_percentage }
			#

			#Lower Strata
			#RGOs
				set_variable = { rgos_amount = pops_amount }
				divide_variable = { rgos_amount = 100 }
				multiply_variable = { rgos_amount = rgos_percentage }

				set_variable = { rgos_workforce_amount = pops_workforce_amount }
				divide_variable = { rgos_workforce_amount = 100 }
				multiply_variable = { rgos_workforce_amount = rgos_percentage }
			#
			#Craftsmen
				set_variable = { craftsmen_amount = pops_amount }
				divide_variable = { craftsmen_amount = 100 }
				multiply_variable = { craftsmen_amount = craftsmen_percentage }

				set_variable = { craftsmen_workforce_amount = pops_workforce_amount }
				divide_variable = { craftsmen_workforce_amount = 100 }
				multiply_variable = { craftsmen_workforce_amount = craftsmen_percentage }
			#
			#Clerks
				set_variable = { clerks_amount = pops_amount }
				divide_variable = { clerks_amount = 100 }
				multiply_variable = { clerks_amount = clerks_percentage }

				set_variable = { clerks_workforce_amount = pops_workforce_amount }
				divide_variable = { clerks_workforce_amount = 100 }
				multiply_variable = { clerks_workforce_amount = clerks_percentage }
			#
			#Soldiers
				set_variable = { soldiers_amount = pops_amount }
				divide_variable = { soldiers_amount = 100 }
				multiply_variable = { soldiers_amount = soldiers_percentage }

				set_variable = { soldiers_workforce_amount = pops_workforce_amount }
				divide_variable = { soldiers_workforce_amount = 100 }
				multiply_variable = { soldiers_workforce_amount = soldiers_percentage }
			#
		#
		#Pop Strata
			#Upper Strata
				set_variable = { upper_strata_amount = aristocrats_amount }
				add_to_variable = { upper_strata_amount = capitalists_amount }
				set_variable = { upper_strata_percentage = upper_strata_amount }
				multiply_variable = { upper_strata_percentage = 100 }
				divide_variable = { upper_strata_percentage = pops_amount }
			#
			#Middle Strata
				set_variable = { middle_strata_amount = artisans_amount }
				add_to_variable = { middle_strata_amount = specialists_amount }
				add_to_variable = { middle_strata_amount = professionals_amount }
				add_to_variable = { middle_strata_amount = officers_amount }
				set_variable = { middle_strata_percentage = middle_strata_amount }
				multiply_variable = { middle_strata_percentage = 100 }
				divide_variable = { middle_strata_percentage = pops_amount }
			#
			#Lower Strata
				set_variable = { lower_strata_amount = rgos_amount }
				add_to_variable = { lower_strata_amount = craftsmen_amount }
				add_to_variable = { lower_strata_amount = clerks_amount }
				add_to_variable = { lower_strata_amount = soldiers_amount }
				set_variable = { lower_strata_percentage = lower_strata_amount }
				multiply_variable = { lower_strata_percentage = 100 }
				divide_variable = { lower_strata_percentage = pops_amount }
			#
		#
		
		#Employment & Unemployment
			#RGOs and Aristocrats
				set_variable = { rgos_employed_amount = rgos_workforce_amount }
				set_variable = { rgos_max_employment = pops_workforce_amount }
				set_temp_variable = { rgo_size = 1 } #TODO, rgo_size 
				divide_variable = { rgos_max_employment = rgo_size }
				if = {
					limit = {
						check_variable = { rgos_employed_amount > rgos_max_employment }
					}
					set_variable = { rgos_employed_amount = rgos_max_employment }
				}

				set_variable = { rgos_unemployed_amount = rgos_workforce_amount }
				subtract_from_variable = { rgos_unemployed_amount = rgos_employed_amount }
				set_variable = { rgos_unemployment_percentage = rgos_unemployed_amount }
				multiply_variable = { rgos_unemployment_percentage = 100 }
				divide_variable = { rgos_unemployment_percentage = rgos_workforce_amount }
				if = {
					limit = {
						check_variable = { rgos_unemployment_percentage < 0 }
					}
					set_variable = { rgos_unemployment_percentage = 0 }
				}

				set_variable = { aristocrats_employed_amount = aristocrats_workforce_amount }
				set_temp_variable = { aristocrats_max_employment_temp = rgos_employed_amount }
				divide_temp_variable = { aristocrats_max_employment_temp = 20 }
				if = {
					limit = {
						check_variable = { aristocrats_employed_amount > aristocrats_max_employment_temp }
					}
					set_variable = { aristocrats_employed_amount = aristocrats_max_employment_temp }
					set_variable = { aristocrats_rgo_output_modifier = global.aristocrats_rgo_output_modifier }
				}
				else = {
					set_variable = { aristocrats_rgo_output_modifier = capitalists_employed_amount }
					divide_variable = { aristocrats_rgo_output_modifier = capitalists_max_employment_temp }

					multiply_variable = { aristocrats_rgo_output_modifier = global.aristocrats_rgo_output_modifier }
				}

				set_variable = { aristocrats_unemployed_amount = aristocrats_workforce_amount }
				subtract_from_variable = { aristocrats_unemployed_amount = aristocrats_employed_amount }
				set_variable = { aristocrats_unemployment_percentage = aristocrats_unemployed_amount }
				multiply_variable = { aristocrats_unemployment_percentage = 100 }
				divide_variable = { aristocrats_unemployment_percentage = aristocrats_workforce_amount }
				if = {
					limit = {
						check_variable = { aristocrats_unemployment_percentage < 0 }
					}
					set_variable = { aristocrats_unemployment_percentage = 0 }
				}
			#
			#Artisans
				set_variable = { artisans_employed_amount = artisans_workforce_amount }
				set_variable = { artisans_unemployed_amount = 0 }
				set_variable = { artisans_unemployment_percentage = 0 }
			#
			#Craftsmen and Specialists
				set_temp_variable = { factory_employment_amount_temp = factory_employment_amount }
				subtract_from_temp_variable = { factory_employment_amount_temp = specialists_workforce_amount }
				if = {
					limit = {
						check_variable = { factory_employment_amount_temp < 0 }
					}
					set_variable = { specialists_employed_amount = factory_employment_amount }
					set_variable = { craftsmen_employed_amount = 0 }
				}
				else = {
					set_variable = { specialists_employed_amount = specialists_workforce_amount }
					if = {
						limit = {
							check_variable = { factory_employment_amount_temp < craftsmen_workforce_amount }
						}
						set_variable = { craftsmen_employed_amount = factory_employment_amount_temp }
					}
					else = {
						set_variable = { craftsmen_employed_amount = craftsmen_workforce_amount }
					}
				}

				set_variable = { craftsmen_unemployed_amount = craftsmen_workforce_amount }
				subtract_from_variable = { craftsmen_unemployed_amount = craftsmen_employed_amount }
				set_variable = { craftsmen_unemployment_percentage = craftsmen_unemployed_amount }
				multiply_variable = { craftsmen_unemployment_percentage = 100 }
				divide_variable = { craftsmen_unemployment_percentage = craftsmen_workforce_amount }
				if = {
					limit = {
						check_variable = { craftsmen_unemployment_percentage < 0 }
					}
					set_variable = { craftsmen_unemployment_percentage = 0 }
				}

				set_variable = { specialists_unemployed_amount = specialists_workforce_amount }
				subtract_from_variable = { specialists_unemployed_amount = specialists_employed_amount }
				set_variable = { specialists_unemployment_percentage = specialists_unemployed_amount }
				multiply_variable = { specialists_unemployment_percentage = 100 }
				divide_variable = { specialists_unemployment_percentage = specialists_workforce_amount }
				if = {
					limit = {
						check_variable = { specialists_unemployment_percentage < 0 }
					}
					set_variable = { specialists_unemployment_percentage = 0 }
				}
			#
			#Clerks and Professionals
				set_variable = { clerks_employed_amount = clerks_workforce_amount }
				set_variable = { clerks_unemployed_amount = 0 }
				set_variable = { clerks_unemployment_percentage = 0 }

				set_variable = { professionals_employed_amount = professionals_workforce_amount }
				set_variable = { professionals_unemployed_amount = 0 }
				set_variable = { professionals_unemployment_percentage = 0 }
			#
			#Capitalists

				set_variable = { capitalists_employed_amount = capitalists_workforce_amount }
				set_temp_variable = { capitalists_max_employment_temp = specialists_employed_amount }
				add_to_temp_variable = { capitalists_max_employment_temp = craftsmen_employed_amount }
				add_to_temp_variable = { capitalists_max_employment_temp = clerks_employed_amount }
				add_to_temp_variable = { capitalists_max_employment_temp = professionals_employed_amount }
				divide_temp_variable = { capitalists_max_employment_temp = 10 }
				if = {
					limit = {
						check_variable = { capitalists_employed_amount > capitalists_max_employment_temp }
					}
					set_variable = { capitalists_employed_amount = capitalists_max_employment_temp }
					set_variable = { capitalists_factory_raw_goods_input_modifier = global.capitalists_factory_raw_goods_input_modifier }
					set_variable = { capitalists_services_output_modifier = global.capitalists_services_output_modifier }
				}
				else = {
					set_variable = { capitalists_factory_raw_goods_input_modifier = capitalists_employed_amount }
					divide_variable = { capitalists_factory_raw_goods_input_modifier = capitalists_max_employment_temp }
					set_variable = { capitalists_services_output_modifier = capitalists_factory_raw_goods_input_modifier }

					multiply_variable = { capitalists_factory_raw_goods_input_modifier = global.capitalists_factory_raw_goods_input_modifier }
					multiply_variable = { capitalists_services_output_modifier = global.capitalists_services_output_modifier }
				}

				set_variable = { capitalists_unemployed_amount = capitalists_workforce_amount }
				subtract_from_variable = { capitalists_unemployed_amount = capitalists_employed_amount }
				set_variable = { capitalists_unemployment_percentage = capitalists_unemployed_amount }
				multiply_variable = { capitalists_unemployment_percentage = 100 }
				divide_variable = { capitalists_unemployment_percentage = capitalists_workforce_amount }
				if = {
					limit = {
						check_variable = { capitalists_unemployment_percentage < 0 }
					}
					set_variable = { capitalists_unemployment_percentage = 0 }
				}
			#
			#Soldiers and Officers
				set_variable = { soldiers_employed_amount = soldiers_workforce_amount }
				set_variable = { soldiers_unemployed_amount = 0 }
				set_variable = { soldiers_unemployment_percentage = 0 }

				set_variable = { officers_employed_amount = officers_workforce_amount }
				set_temp_variable = { officers_max_employment_temp = soldiers_employed_amount }
				divide_temp_variable = { officers_max_employment_temp = 10 }
				if = {
					limit = {
						check_variable = { officers_employed_amount > officers_max_employment_temp }
					}
					set_variable = { officers_employed_amount = officers_max_employment_temp }
				}

				set_variable = { officers_unemployed_amount = officers_workforce_amount }
				subtract_from_variable = { officers_unemployed_amount = officers_employed_amount }
				set_variable = { officers_unemployment_percentage = officers_unemployed_amount }
				multiply_variable = { officers_unemployment_percentage = 100 }
				divide_variable = { officers_unemployment_percentage = officers_workforce_amount }
				if = {
					limit = {
						check_variable = { officers_unemployment_percentage < 0 }
					}
					set_variable = { officers_unemployment_percentage = 0 }
				}
			#
		#

		#Life Needs. Do these before Artisan Production
		set_temp_variable = { upper_strata_life_goods_need = upper_strata_amount }
		multiply_temp_variable = { upper_strata_life_goods_need = global.pops_upper_strata_life_goods_base_need }
		set_temp_variable = { middle_strata_life_goods_need = middle_strata_amount }
		multiply_temp_variable = { middle_strata_life_goods_need = global.pops_middle_strata_life_goods_base_need }
		set_temp_variable = { lower_strata_life_goods_need = lower_strata_amount }
		multiply_temp_variable = { lower_strata_life_goods_need = global.pops_lower_strata_life_goods_base_need }
		
		set_variable = { pops_life_goods_need = upper_strata_life_goods_need }
		add_to_variable = { pops_life_goods_need = middle_strata_life_goods_need }
		add_to_variable = { pops_life_goods_need = lower_strata_life_goods_need }
		divide_variable = { pops_life_goods_need = 100 }

		#Everyday
		set_temp_variable = { upper_strata_everyday_goods_need = upper_strata_amount }
		multiply_temp_variable = { upper_strata_everyday_goods_need = global.pops_upper_strata_everyday_goods_base_need }
		set_temp_variable = { middle_strata_everyday_goods_need = middle_strata_amount }
		multiply_temp_variable = { middle_strata_everyday_goods_need = global.pops_middle_strata_everyday_goods_base_need }
		set_temp_variable = { lower_strata_everyday_goods_need = lower_strata_amount }
		multiply_temp_variable = { lower_strata_everyday_goods_need = global.pops_lower_strata_everyday_goods_base_need }
		
		set_variable = { pops_everyday_goods_need = upper_strata_everyday_goods_need }
		add_to_variable = { pops_everyday_goods_need = middle_strata_everyday_goods_need }
		add_to_variable = { pops_everyday_goods_need = lower_strata_everyday_goods_need }
		divide_variable = { pops_everyday_goods_need = 100 }

		#Luxury
		set_temp_variable = { upper_strata_luxury_goods_need = upper_strata_amount }
		multiply_temp_variable = { upper_strata_luxury_goods_need = global.pops_upper_strata_luxury_goods_base_need }
		set_temp_variable = { middle_strata_luxury_goods_need = middle_strata_amount }
		multiply_temp_variable = { middle_strata_luxury_goods_need = global.pops_middle_strata_luxury_goods_base_need }
		set_temp_variable = { lower_strata_luxury_goods_need = lower_strata_amount }
		multiply_temp_variable = { lower_strata_luxury_goods_need = global.pops_lower_strata_luxury_goods_base_need }
		
		set_variable = { pops_luxury_goods_need = upper_strata_luxury_goods_need }
		add_to_variable = { pops_luxury_goods_need = middle_strata_luxury_goods_need }
		add_to_variable = { pops_luxury_goods_need = lower_strata_luxury_goods_need }
		divide_variable = { pops_luxury_goods_need = 100 }

		if = {
			limit = {
				check_variable = { pops_life_goods_fulfilled_percentage > 0.989 }
			}
			set_variable = { pops_life_goods_fulfilled_percentage = 1 }
		}
		if = {
			limit = {
				check_variable = { pops_everyday_goods_fulfilled_percentage > 0.989 }
			}
			set_variable = { pops_everyday_goods_fulfilled_percentage = 1 }
		}
		if = {
			limit = {
				check_variable = { pops_luxury_goods_fulfilled_percentage > 0.989 }
			}
			set_variable = { pops_luxury_goods_fulfilled_percentage = 1 }
		}

		set_temp_variable = { life_goods_fulfilled_temp = 0 }
		for_each_loop = { 
			array = pops_life_goods_fulfilled_array
			value = vv
			add_to_temp_variable = { life_goods_fulfilled_temp = vv }
		}
		set_variable = { pops_annual_life_goods_fulfilled_percentage = life_goods_fulfilled_temp }
		divide_variable = { pops_annual_life_goods_fulfilled_percentage = pops_life_goods_fulfilled_array^num }
		if = {
			limit = {
				check_variable = { pops_life_goods_fulfilled_array^num < 1 }
			}
			set_variable = { pops_annual_life_goods_fulfilled_percentage = 1 }
		}

		set_temp_variable = { everyday_goods_fulfilled_temp = 0 }
		for_each_loop = { 
			array = pops_everyday_goods_fulfilled_array
			value = vv
			add_to_temp_variable = { everyday_goods_fulfilled_temp = vv }
		}
		set_variable = { pops_annual_everyday_goods_fulfilled_percentage = everyday_goods_fulfilled_temp }
		divide_variable = { pops_annual_everyday_goods_fulfilled_percentage = pops_everyday_goods_fulfilled_array^num }
		if = {
			limit = {
				check_variable = { pops_everyday_goods_fulfilled_array^num < 1 }
			}
			set_variable = { pops_annual_everyday_goods_fulfilled_percentage = 1 }
		}

		set_temp_variable = { luxury_goods_fulfilled_temp = 0 }
		for_each_loop = { 
			array = pops_luxury_goods_fulfilled_array
			value = vv
			add_to_temp_variable = { luxury_goods_fulfilled_temp = vv }
		}
		set_variable = { pops_annual_luxury_goods_fulfilled_percentage = luxury_goods_fulfilled_temp }
		divide_variable = { pops_annual_luxury_goods_fulfilled_percentage = pops_luxury_goods_fulfilled_array^num }
		if = {
			limit = {
				check_variable = { pops_luxury_goods_fulfilled_array^num < 1 }
			}
			set_variable = { pops_annual_luxury_goods_fulfilled_percentage = 1 }
		}

		set_variable = { pops_life_needs_fulfilled_frame = pops_annual_life_goods_fulfilled_percentage }
		multiply_variable = { pops_life_needs_fulfilled_frame = 10 }
		round_variable = pops_life_needs_fulfilled_frame
		add_to_variable = { pops_life_needs_fulfilled_frame = 1 }

		set_variable = { pops_everyday_needs_fulfilled_frame = pops_annual_everyday_goods_fulfilled_percentage }
		multiply_variable = { pops_everyday_needs_fulfilled_frame = 10 }
		round_variable = pops_everyday_needs_fulfilled_frame
		add_to_variable = { pops_everyday_needs_fulfilled_frame = 1 }

		set_variable = { pops_luxury_needs_fulfilled_frame = pops_annual_luxury_goods_fulfilled_percentage }
		multiply_variable = { pops_luxury_needs_fulfilled_frame = 10 }
		round_variable = pops_luxury_needs_fulfilled_frame
		add_to_variable = { pops_luxury_needs_fulfilled_frame = 1 }
	}

	factories_update = {
		#Factory Employment
		set_variable = { factory_employment_amount_per_factory = global.factory_jobs_base_amount }

		set_temp_variable = { pops_amount_temp = pops_amount }
		set_temp_variable = { magnitude_temp = 1 }
		if = {
			limit = {
				check_variable = { pops_amount_temp > 50 }
			}
			while_loop_effect = {
				limit = {
					check_variable = { pops_amount_temp > 100 }
				}
				divide_temp_variable = { pops_amount_temp = 2 }
				add_to_temp_variable = { magnitude_temp = 0.5 }
			}
			multiply_variable = { factory_employment_amount_per_factory = magnitude_temp }
		}
		else_if = {
			limit = {
				check_variable = { pops_amount_temp < 25 }
			}
			while_loop_effect = {
				limit = {
					check_variable = { pops_amount_temp < 50 }
					check_variable = { magnitude_temp < 2.5 }
				}
				multiply_temp_variable = { pops_amount_temp = 2 }
				add_to_temp_variable = { magnitude_temp = 0.5 }
			}
			divide_variable = { factory_employment_amount_per_factory = magnitude_temp }
		}

		set_variable = { private_factory_amount = factory_everyday_goods_amount }
		add_to_variable = { private_factory_amount = factory_luxury_goods_amount }
		add_to_variable = { private_factory_amount = factory_industrial_goods_amount }

		set_variable = { total_factory_amount = industrial_complex_level }
		add_to_variable = { total_factory_amount = arms_factory_level }
		add_to_variable = { total_factory_amount = building_level@dockyard }
		add_to_variable = { total_factory_amount = private_factory_amount }

		set_variable = { factory_employment_amount_max = private_factory_amount }
		multiply_variable = { factory_employment_amount_max = factory_employment_amount_per_factory }
		
		set_temp_variable = { govt_employment_max_temp = industrial_complex_level }
		add_to_temp_variable = { govt_employment_max_temp = arms_factory_level }
		add_to_temp_variable = { govt_employment_max_temp = building_level@dockyard }
		multiply_temp_variable = { govt_employment_max_temp = global.factory_jobs_base_amount }
		add_to_variable = { factory_employment_amount_max = govt_employment_max_temp }

		set_temp_variable = { factory_employment_max_temp = specialists_workforce_amount }
		add_to_temp_variable = { factory_employment_max_temp = craftsmen_workforce_amount }
		set_variable = { factory_employment_amount = factory_employment_amount_max }
		if = {
			limit = {
				check_variable = { factory_employment_amount > factory_employment_max_temp }
			}
			set_variable = { factory_employment_amount = factory_employment_max_temp }
		}

		set_variable = { factory_employment_percentage = factory_employment_amount }
		multiply_variable = { factory_employment_percentage = 100 }
		divide_variable = { factory_employment_percentage = factory_employment_amount_max }

		#Money Limit
		set_temp_variable = { everyday_goods_factory_money_limit_temp = global.factory_money_limit }
		multiply_temp_variable = { everyday_goods_factory_money_limit_temp = factory_everyday_goods_amount }
		multiply_temp_variable = { everyday_goods_factory_money_limit_temp = everyday_goods_base_price }
		
		set_temp_variable = { luxury_goods_factory_money_limit_temp = global.factory_money_limit }
		multiply_temp_variable = { luxury_goods_factory_money_limit_temp = factory_luxury_goods_amount }
		multiply_temp_variable = { luxury_goods_factory_money_limit_temp = luxury_goods_base_price }
		
		set_temp_variable = { industrial_goods_factory_money_limit_temp = global.factory_money_limit }
		multiply_temp_variable = { industrial_goods_factory_money_limit_temp = factory_industrial_goods_amount }
		multiply_temp_variable = { industrial_goods_factory_money_limit_temp = industrial_goods_base_price }

		set_variable = { factory_money_limit = everyday_goods_factory_money_limit_temp }
		add_to_variable = { factory_money_limit = luxury_goods_factory_money_limit_temp }
		add_to_variable = { factory_money_limit = industrial_goods_factory_money_limit_temp }
		divide_variable = { factory_money_limit = 100 }
		multiply_variable = { factory_money_limit = factory_employment_amount_per_factory }

		#Profitability
		set_variable = { factory_profitability_this_month = factory_profit }
		divide_variable = { factory_profitability_this_month = factory_earnings }

		set_temp_variable = { factory_earnings_temp = 0 }
		set_temp_variable = { factory_spending_temp = 0 }
		for_each_loop = { 
			array = factory_earnings_array
			value = vv
			add_to_temp_variable = { factory_earnings_temp = vv }
		}
		for_each_loop = { 
			array = factory_spending_array
			value = vv
			add_to_temp_variable = { factory_spending_temp = vv }
		}
		set_variable = { factory_profitability = factory_earnings_temp }
		subtract_from_variable ={ factory_profitability = factory_spending_temp }
		divide_variable = { factory_profitability = factory_earnings_temp }
	}

	update_production_maintenance = {
		#State Scope
		#Updates the production and input reqs for factories/pops
		#Should be done before setting the fulfilled %s to 0

		#RGOs Goods Production

			if = {
				limit = {
					has_state_flag = pops_rgos_valuable_goods_flag
				}
				set_variable = { pops_rgos_valuable_goods_production = rgos_workforce_amount }
				multiply_variable = { pops_rgos_valuable_goods_production = global.pops_rgos_valuable_goods_base_production }
				divide_variable = { pops_rgos_valuable_goods_production = 100 }

				set_temp_variable = { modifier_temp = valuable_goods_output_effect }
				add_to_temp_variable = { modifier_temp = 1 }
				multiply_variable = { pops_rgos_valuable_goods_production = modifier_temp }
				
				if = {
					limit = {
						has_state_flag = pops_rgos_valuable_goods_untapped_flag
					}
					multiply_variable = { pops_rgos_valuable_goods_production = global.pops_rgos_valuable_goods_untapped_output_multiplier }
				}
				else_if = {
					limit = {
						has_state_flag = pops_rgos_valuable_goods_plentiful_flag
					}
					multiply_variable = { pops_rgos_valuable_goods_production = global.pops_rgos_valuable_goods_plentiful_output_multiplier }
				}
				else_if = {
					limit = {
						has_state_flag = pops_rgos_valuable_goods_depleted_flag
					}
					multiply_variable = { pops_rgos_valuable_goods_production = global.pops_rgos_valuable_goods_depleted_output_multiplier }
				}
				else = {
					multiply_variable = { pops_rgos_valuable_goods_production = global.pops_rgos_valuable_goods_exploited_output_multiplier }
				}

				set_variable = { pops_rgos_raw_goods_production = 0 }
				set_variable = { pops_rgos_life_goods_production = 0 }
			}
			else_if = {
				limit = {
					has_state_flag = pops_rgos_raw_goods_flag
				}
				set_variable = { pops_rgos_raw_goods_production = rgos_workforce_amount }
				multiply_variable = { pops_rgos_raw_goods_production = global.pops_rgos_raw_goods_base_production }
				divide_variable = { pops_rgos_raw_goods_production = 100 }

				set_temp_variable = { modifier_temp = raw_goods_output_effect }
				add_to_temp_variable = { modifier_temp = 1 }
				multiply_variable = { pops_rgos_raw_goods_production = modifier_temp }

				set_variable = { pops_rgos_life_goods_production = 0 }
				set_variable = { pops_rgos_valuable_goods_production = 0 }

				if = {
					limit = {
						has_state_flag = pops_rgos_cash_crops_flag
					}
					multiply_variable = { pops_rgos_raw_goods_production = global.pops_rgos_cash_crops_output_multiplier }
				}
				if = {
					limit = {
						has_state_flag = pops_rgos_coal_flag
					} 
					multiply_variable = { pops_rgos_raw_goods_production = global.pops_rgos_coal_output_multiplier }
				}
				if = {
					limit = {
						has_state_flag = pops_rgos_metals_flag
					}
					multiply_variable = { pops_rgos_raw_goods_production = global.pops_rgos_metals_output_multiplier }
				}
				if = {
					limit = {
						has_state_flag = pops_rgos_petroleum_flag
					}
					multiply_variable = { pops_rgos_raw_goods_production = global.pops_rgos_petroleum_output_multiplier }
				}
			}
			else = {
				set_variable = { pops_rgos_life_goods_production = rgos_workforce_amount }
				multiply_variable = { pops_rgos_life_goods_production = global.pops_rgos_life_goods_base_production }
				divide_variable = { pops_rgos_life_goods_production = 100 }

				set_temp_variable = { modifier_temp = life_goods_output_effect }
				add_to_temp_variable = { modifier_temp = 1 }
				multiply_variable = { pops_rgos_life_goods_production = modifier_temp }

				set_variable = { pops_rgos_raw_goods_production = 0 }
				set_variable = { pops_rgos_valuable_goods_production = 0 }

				if = {
					limit = {
						has_state_flag = pops_rgos_cash_crops_flag
					}
					multiply_variable = { pops_rgos_life_goods_production = global.pops_rgos_cash_crops_output_multiplier }
				}
			}
		#

		#Artisans Goods Production
			#Get excess demand after industrial production
			#Divide it from the production per artisan
			#Get ratios
			#Use those for artisan production
			set_temp_variable = { artisans_everyday_goods_distribution_temp = everyday_goods_price }
			multiply_temp_variable = { artisans_everyday_goods_distribution_temp = global.pops_artisans_everyday_goods_base_production } #TODO - Change this to actual production
			if = {
				limit = {
					check_variable = { artisans_everyday_goods_distribution_temp < 0.001 }
				}
				set_temp_variable = { artisans_everyday_goods_distribution_temp = 0.001 }
			}
			
			set_temp_variable = { artisans_luxury_goods_distribution_temp = luxury_goods_price }
			multiply_temp_variable = { artisans_luxury_goods_distribution_temp = global.pops_artisans_luxury_goods_base_production } #TODO - Change this to actual production
			if = {
				limit = {
					check_variable = { artisans_luxury_goods_distribution_temp < 0.001 }
				}
				set_temp_variable = { artisans_luxury_goods_distribution_temp = 0.001 }
			}

			set_temp_variable = { artisans_industrial_goods_distribution_temp = industrial_goods_price }
			multiply_temp_variable = { artisans_industrial_goods_distribution_temp = global.pops_artisans_industrial_goods_base_production } #TODO - Change this to actual production
			if = {
				limit = {
					check_variable = { artisans_industrial_goods_distribution_temp < 0.001 }
				}
				set_temp_variable = { artisans_industrial_goods_distribution_temp = 0.001 }
			}

			set_temp_variable = { total_distribution_temp = artisans_everyday_goods_distribution_temp }
			add_to_temp_variable = { total_distribution_temp = artisans_luxury_goods_distribution_temp }
			add_to_temp_variable = { total_distribution_temp = artisans_industrial_goods_distribution_temp }

			divide_temp_variable = { artisans_everyday_goods_distribution_temp = total_distribution_temp }
			divide_temp_variable = { artisans_luxury_goods_distribution_temp = total_distribution_temp }
			divide_temp_variable = { artisans_industrial_goods_distribution_temp = total_distribution_temp }

			set_variable = { pops_artisans_everyday_goods_amount = artisans_workforce_amount }
			set_variable = { pops_artisans_luxury_goods_amount = artisans_workforce_amount }
			set_variable = { pops_artisans_industrial_goods_amount = artisans_workforce_amount }

			multiply_variable = { pops_artisans_everyday_goods_amount = artisans_everyday_goods_distribution_temp }
			multiply_variable = { pops_artisans_luxury_goods_amount = artisans_luxury_goods_distribution_temp }
			multiply_variable = { pops_artisans_industrial_goods_amount = artisans_industrial_goods_distribution_temp }

			set_variable = { pops_artisans_everyday_goods_production = pops_artisans_everyday_goods_amount }
			multiply_variable = { pops_artisans_everyday_goods_production = global.pops_artisans_everyday_goods_base_production } #TODO - Change this to actual production
			divide_variable = { pops_artisans_everyday_goods_production = 100 }

			set_variable = { pops_artisans_luxury_goods_production = pops_artisans_luxury_goods_amount }
			multiply_variable = { pops_artisans_luxury_goods_production = global.pops_artisans_luxury_goods_base_production } #TODO - Change this to actual production
			divide_variable = { pops_artisans_luxury_goods_production = 100 }

			set_variable = { pops_artisans_industrial_goods_production = pops_artisans_industrial_goods_amount }
			multiply_variable = { pops_artisans_industrial_goods_production = global.pops_artisans_industrial_goods_base_production } #TODO - Change this to actual production
			divide_variable = { pops_artisans_industrial_goods_production = 100 }

			#Needs
			set_variable = { pops_artisans_everyday_goods_raw_goods_need = global.pops_artisans_everyday_goods_raw_goods_base_need }
			multiply_variable = { pops_artisans_everyday_goods_raw_goods_need = pops_artisans_everyday_goods_production }

			set_variable = { pops_artisans_luxury_goods_raw_goods_need = global.pops_artisans_luxury_goods_raw_goods_base_need }
			multiply_variable = { pops_artisans_luxury_goods_raw_goods_need = pops_artisans_luxury_goods_production }

			set_variable = { pops_artisans_industrial_goods_raw_goods_need = global.pops_artisans_industrial_goods_raw_goods_base_need }
			multiply_variable = { pops_artisans_industrial_goods_raw_goods_need = pops_artisans_industrial_goods_production }

			set_variable = { pops_artisans_raw_goods_need = pops_artisans_everyday_goods_raw_goods_need }
			add_to_variable = { pops_artisans_raw_goods_need = pops_artisans_luxury_goods_raw_goods_need }
			add_to_variable = { pops_artisans_raw_goods_need = pops_artisans_industrial_goods_raw_goods_need }

			#Fulfilled
			multiply_variable = { pops_artisans_everyday_goods_production = pops_artisans_raw_goods_fulfilled_percentage }
			multiply_variable = { pops_artisans_luxury_goods_production = pops_artisans_raw_goods_fulfilled_percentage }
			multiply_variable = { pops_artisans_industrial_goods_production = pops_artisans_raw_goods_fulfilled_percentage }

		#	

		#Professionals Services Production
			set_variable = { pops_services_workforce_amount = professionals_workforce_amount }
			set_variable = { pops_professionals_services_production = professionals_workforce_amount }
			multiply_variable = { pops_professionals_services_production = global.pops_professionals_services_base_production }
			divide_variable = { pops_professionals_services_production = 100 }
			set_variable = { pops_services_production = pops_professionals_services_production }
		#
		#Clerks Services Production
			add_to_variable = { pops_services_workforce_amount = clerks_workforce_amount }
			set_variable = { pops_clerks_services_production = clerks_workforce_amount }
			multiply_variable = { pops_clerks_services_production = global.pops_clerks_services_base_production }
			divide_variable = { pops_clerks_services_production = 100 }
			add_to_variable = { pops_services_production = pops_clerks_services_production }

			set_temp_variable = { modifier_temp = services_output_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { pops_services_production = modifier_temp}
		#

		#Factories Production
			set_temp_variable = { specialists_bonus_multiplier = 1 }
			set_temp_variable = { specialists_percentage_temp = specialists_workforce_amount }
			divide_temp_variable = { specialists_percentage_temp = factory_employment_amount }
			multiply_temp_variable = { specialists_percentage_temp = global.pops_specialists_production_bonus }
			add_to_temp_variable = { specialists_bonus_multiplier = specialists_percentage_temp }

			#Throughput
			set_variable = { factory_everyday_goods_production = factory_employment_amount_per_factory }
			multiply_variable = { factory_everyday_goods_production = global.factory_everyday_goods_base_production }
			multiply_variable = { factory_everyday_goods_production = factory_everyday_goods_amount }
			multiply_variable = { factory_everyday_goods_production = specialists_bonus_multiplier }
			divide_variable = { factory_everyday_goods_production = 100 }
			multiply_variable = { factory_everyday_goods_production = factory_employment_percentage }
			divide_variable = { factory_everyday_goods_production = 100 }
			set_temp_variable = { modifier_temp = factory_everyday_goods_throughput_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_everyday_goods_production = modifier_temp }

			set_variable = { factory_luxury_goods_production = factory_employment_amount_per_factory }
			multiply_variable = { factory_luxury_goods_production = global.factory_luxury_goods_base_production }
			multiply_variable = { factory_luxury_goods_production = factory_luxury_goods_amount }
			multiply_variable = { factory_luxury_goods_production = specialists_bonus_multiplier }
			divide_variable = { factory_luxury_goods_production = 100 }
			multiply_variable = { factory_luxury_goods_production = factory_employment_percentage }
			divide_variable = { factory_luxury_goods_production = 100 }
			set_temp_variable = { modifier_temp = factory_luxury_goods_throughput_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_luxury_goods_production = modifier_temp }

			set_variable = { factory_industrial_goods_production = factory_employment_amount_per_factory }
			multiply_variable = { factory_industrial_goods_production = global.factory_industrial_goods_base_production }
			multiply_variable = { factory_industrial_goods_production = factory_industrial_goods_amount }
			multiply_variable = { factory_industrial_goods_production = specialists_bonus_multiplier }
			divide_variable = { factory_industrial_goods_production = 100 }
			multiply_variable = { factory_industrial_goods_production = factory_employment_percentage }
			divide_variable = { factory_industrial_goods_production = 100 }
			set_temp_variable = { modifier_temp = factory_industrial_goods_throughput_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_industrial_goods_production = modifier_temp }

			#Maintenance
			set_variable = { factory_industrial_goods_need = factory_everyday_goods_production }
			add_to_variable = { factory_industrial_goods_need = factory_luxury_goods_production }
			add_to_variable = { factory_industrial_goods_need = factory_industrial_goods_production }
			multiply_variable = { factory_industrial_goods_need = global.factory_industrial_goods_base_need }
			set_temp_variable = { modifier_temp = factory_industrial_goods_maintenance_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_industrial_goods_need = modifier_temp }

			#Input
			set_variable = { factory_everyday_goods_raw_goods_need = global.factory_everyday_goods_raw_goods_base_need }
			multiply_variable = { factory_everyday_goods_raw_goods_need = factory_everyday_goods_production }
			set_temp_variable = { modifier_temp = factory_everyday_goods_raw_goods_input_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_everyday_goods_raw_goods_need = modifier_temp }

			set_variable = { factory_luxury_goods_raw_goods_need = global.factory_luxury_goods_raw_goods_base_need }
			multiply_variable = { factory_luxury_goods_raw_goods_need = factory_luxury_goods_production }
			set_temp_variable = { modifier_temp = factory_luxury_goods_raw_goods_input_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_luxury_goods_raw_goods_need = modifier_temp }

			set_variable = { factory_industrial_goods_raw_goods_need = global.factory_industrial_goods_raw_goods_base_need }
			multiply_variable = { factory_industrial_goods_raw_goods_need = factory_industrial_goods_production }
			set_temp_variable = { modifier_temp = factory_industrial_goods_raw_goods_input_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_industrial_goods_raw_goods_need = modifier_temp }

			set_variable = { factory_raw_goods_need = factory_everyday_goods_raw_goods_need }
			add_to_variable = { factory_raw_goods_need = factory_luxury_goods_raw_goods_need }
			add_to_variable = { factory_raw_goods_need = factory_industrial_goods_raw_goods_need }

			#Fulfilled
			set_temp_variable = { fulfilled_temp = factory_raw_goods_fulfilled_percentage }
			add_to_temp_variable = { fulfilled_temp = factory_industrial_goods_fulfilled_percentage }
			divide_temp_variable = { fulfilled_temp = 2 }

			#Output
			multiply_variable = { factory_everyday_goods_production = fulfilled_temp }
			set_temp_variable = { modifier_temp = factory_everyday_goods_output_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_everyday_goods_production = modifier_temp }

			multiply_variable = { factory_luxury_goods_production = fulfilled_temp }
			set_temp_variable = { modifier_temp = factory_luxury_goods_output_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_luxury_goods_production = modifier_temp }

			multiply_variable = { factory_industrial_goods_production = fulfilled_temp }
			set_temp_variable = { modifier_temp = factory_industrial_goods_output_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_industrial_goods_production = modifier_temp }
		#

		#Infrastructure Maintenance
			set_variable = { infrastructure_industrial_goods_need = infrastructure_level }
			multiply_variable = { infrastructure_industrial_goods_need = global.infrastructure_industrial_goods_base_need }

			set_temp_variable = { infra_need_temp = infrastructure_level }
			add_to_temp_variable = { infra_need_temp = 1 }
			multiply_temp_variable = { infra_need_temp = infrastructure_level }
			divide_temp_variable = { infra_need_temp = 2 }
			multiply_temp_variable = { infra_need_temp = global.infrastructure_industrial_goods_base_need_increase_per_level }
			add_to_variable = { infrastructure_industrial_goods_need = infra_need_temp }

			set_temp_variable = { infra_need_temp = infrastructure_level }
			multiply_temp_variable = { infra_need_temp = infra_need_temp }
			multiply_temp_variable = { infra_need_temp = global.infrastructure_industrial_goods_base_need_squared }
			add_to_variable = { infrastructure_industrial_goods_need = infra_need_temp }

			set_temp_variable = { modifier_temp = infrastructure_maintenance_cost_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { infrastructure_industrial_goods_need = modifier_temp }
		#

		#State Category Maintenance

		#
	}

	create_pie_chart_pop_type = {
		# this creates a pie chart of popularities - can be easily adapted to show anything that adds up to 100%
		# This code is much different from Yard's, but I'll credit him anyway
		# State Scope

		clear_array = pie_chart_pop_type
		resize_array = {
			array = pie_chart_pop_type
			value = 1 # 1 is value for RGO frame
			size = 100 # 100 pieces, each percent is one piece
		}

		clear_temp_array = pop_types_percentage
		add_to_temp_array = { pop_types_percentage = 0 }
		add_to_temp_array = { pop_types_percentage = rgos_percentage }
		add_to_temp_array = { pop_types_percentage = artisans_percentage }
		add_to_temp_array = { pop_types_percentage = craftsmen_percentage }
		add_to_temp_array = { pop_types_percentage = specialists_percentage }
		add_to_temp_array = { pop_types_percentage = clerks_percentage }
		add_to_temp_array = { pop_types_percentage = professionals_percentage }
		add_to_temp_array = { pop_types_percentage = soldiers_percentage }
		add_to_temp_array = { pop_types_percentage = officers_percentage }
		add_to_temp_array = { pop_types_percentage = capitalists_percentage }
		add_to_temp_array = { pop_types_percentage = aristocrats_percentage }

		set_temp_variable = { pie_pop = 0 }
		set_temp_variable = { excess_pop = 0 }
		for_each_loop = {
			array = pop_types_percentage
			index = rr
			value = vv

			set_variable = { last_idx = pie_pop }
			set_temp_variable = { pie_pop = vv }
			round_temp_variable = pie_pop

			#Excess
			set_temp_variable = { excess_temp = vv }
			subtract_from_temp_variable = { excess_temp = pie_pop }
			add_to_temp_variable = { excess_pop = pie_pop }
			if = {
				limit = {
					NOT = { check_variable = { excess_pop < 1 } }
				}
				subtract_from_temp_variable = { excess_pop = 1 }
				add_to_temp_variable = { pie_pop = 1 }
			}
			
			add_to_temp_variable = { pie_pop = last_idx }
			subtract_from_temp_variable = { pie_pop = 1 }
			if = {
				limit = {
					check_variable = { pie_pop > 100 }
				}
				set_temp_variable = { pie_pop = 100 }
			}
			for_loop_effect = {
				start = last_idx
				end = pie_pop
				set_variable = { pie_chart_pop_type^v = rr }
			}
			set_variable = { last_idx = pie_pop }
		}
		clear_variable = last_idx

		add_to_variable = { update_state_econ_window = 1 }
	}

	create_state_gdp_graph = {
		set_variable = { gdp_graph_min = 2000000 }
		set_variable = { gdp_graph_max = 0 }
		clr_state_flag = gdp_graph_thousands
		clear_array = gdp_graph_amount_array
		clear_array = gdp_graph_color_array
		clear_array = gdp_graph_y_array

		for_each_loop = {
			array = annual_gdp_amount_array
			value = vv
			index = ii
			if = {
				limit = {
					check_variable = { vv > gdp_graph_max }
				}
				set_variable = { gdp_graph_max = vv }
			}
			if = {
				limit = {
					check_variable = { vv < gdp_graph_min }
				}
				set_variable = { gdp_graph_min = vv }
			}
			
			if = {
				limit = {
					check_variable = { ii > 0 }
				}
				set_temp_variable = { prev_i = ii }
				subtract_from_temp_variable = { prev_i = 1 }

				set_temp_variable = { value_temp = vv }
				add_to_temp_variable = { value_temp = annual_gdp_amount_array^prev_i }
				divide_temp_variable = { value_temp = 2 }
				add_to_array = { gdp_graph_amount_array = value_temp }

				if = {
					limit = {
						check_variable = { vv > annual_gdp_amount_array^prev_i }
					}
					add_to_array = { gdp_graph_color_array = 1 }
					add_to_array = { gdp_graph_color_array = 1 }
				}
				else_if = {
					limit = {
						check_variable = { vv = annual_gdp_amount_array^prev_i }
					}
					add_to_array = { gdp_graph_color_array = 2 }
					add_to_array = { gdp_graph_color_array = 2 }
				}
				else = {
					add_to_array = { gdp_graph_color_array = 3 }
					add_to_array = { gdp_graph_color_array = 3 }
				}

				add_to_array = { gdp_graph_amount_array = vv }
			}
			else = {
				add_to_array = { gdp_graph_amount_array = vv }
				add_to_array = { gdp_graph_color_array = 2 }
			}
		}

		#Creating the Graph
		for_each_loop = {
			array = gdp_graph_amount_array
			value = vv
			index = ii

			set_temp_variable = { gdp_per_y_temp = gdp_graph_max }
			subtract_from_temp_variable = { gdp_per_y_temp = gdp_graph_min }
			divide_temp_variable = { gdp_per_y_temp = -75 } #75 Pixels, making it negative b/c going from top to bottom

			set_temp_variable = { y_temp = vv }
			subtract_from_temp_variable = { y_temp = gdp_graph_max }
			divide_temp_variable = { y_temp = gdp_per_y_temp }
			round_temp_variable = y_temp
			if = {
				limit = {
					check_variable = { y_temp > 76 }
				}
				set_temp_variable = { y_temp = 76 }
			}
			add_to_array = { gdp_graph_y_array = y_temp }
		}



		#Correcting the max/min
		if = {
			limit = {
				check_variable = { gdp_graph_max > 1000 } #gdp_graph_min should always be less than max, so there's no point to checking it
			}
			divide_variable = { gdp_graph_min = 1000 }
			divide_variable = { gdp_graph_max = 1000 }
			set_state_flag = gdp_graph_thousands
		}
		else_if = {
			limit = {
				check_variable = { gdp_graph_max > 100 }
			}
			divide_variable = { gdp_graph_min = 100 } #This gets rid of some decimals so there's only up to 4 digits
			divide_variable = { gdp_graph_max = 100 }
			multiply_variable = { gdp_graph_min = 100 }
			multiply_variable = { gdp_graph_max = 100 }
		}
		else_if = {
			limit = {
				check_variable = { gdp_graph_max > 10 }
			}
			divide_variable = { gdp_graph_min = 10 } #This gets rid of some decimals so there's only up to 4 digits
			divide_variable = { gdp_graph_max = 10 }
			multiply_variable = { gdp_graph_min = 10 }
			multiply_variable = { gdp_graph_max = 10 }
		}
		add_to_variable = { update_state_econ_window = 1 }
	}


	taxes_update = {
		#Country Scope

		#Income Taxes
		set_variable = { income_tax_upper_strata_revenue = 0 }
		set_variable = { income_tax_middle_strata_revenue = 0 }
		set_variable = { income_tax_lower_strata_revenue = 0 }

		every_controlled_state = {
			#Upper Strata
			set_temp_variable = { tax_temp = aristocrats_earnings }
			add_to_temp_variable = { tax_temp = capitalists_earnings }
			multiply_temp_variable = { tax_temp = PREV.income_tax_upper_strata_percentage }
			add_to_variable = { PREV.income_tax_upper_strata_revenue = tax_temp }

			#Middle Strata
			set_temp_variable = { tax_temp = artisans_earnings }
			add_to_temp_variable = { tax_temp = professionals_earnings }
			add_to_temp_variable = { tax_temp = specialists_earnings }
			multiply_temp_variable = { tax_temp = PREV.income_tax_middle_strata_percentage }
			add_to_variable = { PREV.income_tax_middle_strata_revenue = tax_temp }

			#Lower Strata
			set_temp_variable = { tax_temp = rgos_earnings }
			add_to_temp_variable = { tax_temp = craftsmen_earnings }
			add_to_temp_variable = { tax_temp = clerks_earnings }
			multiply_temp_variable = { tax_temp = PREV.income_tax_lower_strata_percentage }
			add_to_variable = { PREV.income_tax_lower_strata_revenue = tax_temp }
		}
		divide_variable = { income_tax_upper_strata_revenue = 100 }
		divide_variable = { income_tax_middle_strata_revenue = 100 }
		divide_variable = { income_tax_lower_strata_revenue = 100 }

		set_variable = { income_tax_revenue = income_tax_upper_strata_revenue }
		add_to_variable = { income_tax_revenue = income_tax_middle_strata_revenue }
		add_to_variable = { income_tax_revenue = income_tax_lower_strata_revenue }

		#Sales Tax
			set_variable = { sales_tax_revenue = pops_goods_spending }
			multiply_variable = { sales_tax_revenue = sales_tax_percentage }
			divide_variable = { sales_tax_revenue = 100 }
		#

		#Corporate
		#

		#Tariffs
			set_variable = { export_tariff_revenue = 0 }
			set_variable = { import_tariff_revenue = 0 }
			#life_goods
				if = {
					limit = {
						check_variable = { life_goods_global_trade_actual_value < 0 }
					}
					set_temp_variable = { tax_temp = life_goods_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = -1 }
					multiply_temp_variable = { tax_temp = import_tariff_percentage }
					add_to_variable = { import_tariff_revenue = tax_temp }
				}
				else_if = {
					limit = {
						check_variable = { life_goods_global_trade_actual_value > 0 }
					}
					set_temp_variable = { tax_temp = life_goods_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = export_tariff_percentage }
					add_to_variable = { export_tariff_revenue = tax_temp }
				}
			#
			#everyday_goods
				if = {
					limit = {
						check_variable = { everyday_goods_global_trade_actual_value < 0 }
					}
					set_temp_variable = { tax_temp = everyday_goods_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = -1 }
					multiply_temp_variable = { tax_temp = import_tariff_percentage }
					add_to_variable = { import_tariff_revenue = tax_temp }
				}
				else_if = {
					limit = {
						check_variable = { everyday_goods_global_trade_actual_value > 0 }
					}
					set_temp_variable = { tax_temp = everyday_goods_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = export_tariff_percentage }
					add_to_variable = { export_tariff_revenue = tax_temp }
				}
			#
			#luxury_goods
				if = {
					limit = {
						check_variable = { luxury_goods_global_trade_actual_value < 0 }
					}
					set_temp_variable = { tax_temp = luxury_goods_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = -1 }
					multiply_temp_variable = { tax_temp = import_tariff_percentage }
					add_to_variable = { import_tariff_revenue = tax_temp }
				}
				else_if = {
					limit = {
						check_variable = { luxury_goods_global_trade_actual_value > 0 }
					}
					set_temp_variable = { tax_temp = luxury_goods_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = export_tariff_percentage }
					add_to_variable = { export_tariff_revenue = tax_temp }
				}
			#
			#services
				if = {
					limit = {
						check_variable = { services_global_trade_actual_value < 0 }
					}
					set_temp_variable = { tax_temp = services_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = -1 }
					multiply_temp_variable = { tax_temp = import_tariff_percentage }
					add_to_variable = { import_tariff_revenue = tax_temp }
				}
				else_if = {
					limit = {
						check_variable = { services_global_trade_actual_value > 0 }
					}
					set_temp_variable = { tax_temp = services_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = export_tariff_percentage }
					add_to_variable = { export_tariff_revenue = tax_temp }
				}
			#
			#raw_goods
				if = {
					limit = {
						check_variable = { raw_goods_global_trade_actual_value < 0 }
					}
					set_temp_variable = { tax_temp = raw_goods_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = -1 }
					multiply_temp_variable = { tax_temp = import_tariff_percentage }
					add_to_variable = { import_tariff_revenue = tax_temp }
				}
				else_if = {
					limit = {
						check_variable = { raw_goods_global_trade_actual_value > 0 }
					}
					set_temp_variable = { tax_temp = raw_goods_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = export_tariff_percentage }
					add_to_variable = { export_tariff_revenue = tax_temp }
				}
			#
			#industrial_goods
				if = {
					limit = {
						check_variable = { industrial_goods_global_trade_actual_value < 0 }
					}
					set_temp_variable = { tax_temp = industrial_goods_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = -1 }
					multiply_temp_variable = { tax_temp = import_tariff_percentage }
					add_to_variable = { import_tariff_revenue = tax_temp }
				}
				else_if = {
					limit = {
						check_variable = { industrial_goods_global_trade_actual_value > 0 }
					}
					set_temp_variable = { tax_temp = industrial_goods_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = export_tariff_percentage }
					add_to_variable = { export_tariff_revenue = tax_temp }
				}
			#
			divide_variable = { import_tariff_revenue = 100 }
			divide_variable = { export_tariff_revenue = 100 }

			set_variable = { tariff_revenue = import_tariff_revenue }
			add_to_variable = { tariff_revenue = export_tariff_revenue }
		#

		set_variable = { revenue = income_tax_revenue }
		add_to_variable = { revenue = sales_tax_revenue }
		add_to_variable = { revenue = import_tariff_revenue }
		add_to_variable = { revenue = export_tariff_revenue }
	}
	spending_update = {
		set_variable = { construction_spending_expense = 0 }
		set_variable = { industrial_subsidy_expense = 0 }
		set_variable = { infrastructure_subsidy_expense = 0 }
		every_controlled_state = {
			set_temp_variable = { raw_goods_temp = factory_raw_goods_need }
			multiply_temp_variable = { raw_goods_temp = raw_goods_price }
			set_temp_variable = { industrial_goods_temp = factory_industrial_goods_need }
			multiply_temp_variable = { industrial_goods_temp = industrial_goods_price }

			set_temp_variable = { industrial_spending_temp = raw_goods_temp }
			add_to_temp_variable = { industrial_spending_temp = industrial_goods_temp }
			multiply_temp_variable = { industrial_spending_temp = PREV.industrial_subsidy_percentage }
			divide_temp_variable = { industrial_spending_temp = 100 }
			add_to_variable = { PREV.industrial_subsidy_expense = industrial_spending_temp }

			set_temp_variable = { infrastructure_money_temp = infrastructure_industrial_goods_demand }
			multiply_temp_variable = { infrastructure_money_temp = industrial_goods_price }
			multiply_temp_variable = { infrastructure_money_temp = PREV.infrastructure_subsidy_percentage }
			divide_temp_variable = { infrastructure_money_temp = 100 }
			add_to_variable = { PREV.infrastructure_subsidy_expense = infrastructure_money_temp }

			if = {
				limit = {
					has_state_flag = infrastructure_construction_government_subsidized
				}
				set_temp_variable = { infra_construction_funds_temp = global.infrastructure_construction_base_speed }
				multiply_temp_variable = { infra_construction_funds_temp = industrial_goods_price }
				multiply_temp_variable = { infra_construction_funds_temp = PREV.construction_spending_percentage }
				divide_temp_variable = { infra_construction_funds_temp = 100 }
				subtract_from_temp_variable = { infra_construction_funds_temp = infrastructure_construction_investment_money }
				if = {
					limit = {
						check_variable = { infra_construction_funds_temp > 0 }
					}
					add_to_variable = { PREV.construction_spending_expense = infra_construction_funds_temp }
				}
			}
			if = {
				limit = {
					has_state_flag = factory_everyday_goods_construction_government_subsidized
				}
				set_temp_variable = { infra_construction_funds_temp = global.factory_everyday_goods_construction_base_speed }
				multiply_temp_variable = { infra_construction_funds_temp = industrial_goods_price }
				multiply_temp_variable = { infra_construction_funds_temp = PREV.construction_spending_percentage }
				divide_temp_variable = { infra_construction_funds_temp = 100 }
				subtract_from_temp_variable = { infra_construction_funds_temp = factory_everyday_goods_construction_investment_money }
				if = {
					limit = {
						check_variable = { infra_construction_funds_temp > 0 }
					}
					add_to_variable = { PREV.construction_spending_expense = infra_construction_funds_temp }
				}
			}
			if = {
				limit = {
					has_state_flag = factory_luxury_goods_construction_government_subsidized
				}
				set_temp_variable = { infra_construction_funds_temp = global.factory_luxury_goods_construction_base_speed }
				multiply_temp_variable = { infra_construction_funds_temp = industrial_goods_price }
				multiply_temp_variable = { infra_construction_funds_temp = PREV.construction_spending_percentage }
				divide_temp_variable = { infra_construction_funds_temp = 100 }
				subtract_from_temp_variable = { infra_construction_funds_temp = factory_luxury_goods_construction_investment_money }
				if = {
					limit = {
						check_variable = { infra_construction_funds_temp > 0 }
					}
					add_to_variable = { PREV.construction_spending_expense = infra_construction_funds_temp }
				}
			}
			if = {
				limit = {
					has_state_flag = factory_industrial_goods_construction_government_subsidized
				}
				set_temp_variable = { infra_construction_funds_temp = global.factory_industrial_goods_construction_base_speed }
				multiply_temp_variable = { infra_construction_funds_temp = industrial_goods_price }
				multiply_temp_variable = { infra_construction_funds_temp = PREV.construction_spending_percentage }
				divide_temp_variable = { infra_construction_funds_temp = 100 }
				subtract_from_temp_variable = { infra_construction_funds_temp = factory_industrial_goods_construction_investment_money }
				if = {
					limit = {
						check_variable = { infra_construction_funds_temp > 0 }
					}
					add_to_variable = { PREV.construction_spending_expense = infra_construction_funds_temp }
				}
			}
		}

		set_variable = { subsidy_expense = infrastructure_subsidy_expense }
		add_to_variable = { subsidy_expense = industrial_subsidy_expense }

		set_variable = { discretionary_spending = subsidy_expense }
		add_to_variable = { discretionary_spending = construction_spending_expense }
	}

#

#Functions (With Inputs & Outputs)
	shopping_algorithm = {
		#INPUT: 
			#buy_amount - Amount of goods that the buyer wants to buy (regardless of cost)
			#money_temp - Max amount of money to spend
			#good_max_temp - Maximum Goods that the seller can sell
			#good_price_temp - Price of the Goods

		#OUTPUT:
			#buy_amount - Amount of goods sold
			#cost_temp - Total price for all goods sold

		#Shopping
		clamp_temp_variable = {
			var = buy_amount
			max = good_max_temp
		}
		clamp_temp_variable = {
			var = buy_amount
			min = 0
		}
		set_temp_variable = { cost_temp = buy_amount }
		multiply_temp_variable = { cost_temp = good_price_temp }

		if = {
			limit = {
				check_variable = { cost_temp > money_temp }
			}
			set_temp_variable = { cost_temp = money_temp }
			set_temp_variable = { buy_amount = money_temp }
			divide_temp_variable = { buy_amount = good_price_temp }
			clamp_temp_variable = {
				var = buy_amount
				max = good_max_temp
			}
			clamp_temp_variable = {
				var = buy_amount
				min = 0
			}
		}
	}

	start_everyday_goods_factory_construction = {
		#Scope: State
		#Starts the construction of an everyday goods factory. If one is already in construction, this does nothing.
		#INPUT:
			#investment_money_temp - Money put into the initial construction
			#factory_everyday_goods_construction_government_subsidized - state flag
				# - If the flag exists, then the government will pay all additional costs after the initial investment 
		#OUTPUT:
			#investment_money_temp - Money left over after investment

		if = {
			limit = {
				NOT = { has_state_flag = factory_everyday_goods_in_construction }
			}
			set_state_flag = factory_everyday_goods_in_construction

			set_variable = { factory_everyday_goods_construction_investment_money = investment_money_temp }
			
			set_variable = { factory_everyday_goods_construction_industrial_goods_need = global.factory_everyday_goods_construction_industrial_goods_base_need }
			multiply_variable = { factory_everyday_goods_construction_industrial_goods_need = factory_employment_amount_per_factory }
			divide_variable = { factory_everyday_goods_construction_industrial_goods_need = 100 }
			set_temp_variable = { modifier_temp = factory_build_cost_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_everyday_goods_construction_industrial_goods_need = modifier_temp }
			
			set_temp_variable = { investment_money_max_temp = factory_everyday_goods_construction_industrial_goods_need }
			multiply_temp_variable = { investment_money_max_temp = industrial_goods_price }
			multiply_temp_variable = { investment_money_max_temp = 2 }
			if = {
				limit = {
					check_variable = { investment_money_max_temp < factory_everyday_goods_construction_investment_money }
				}
				set_variable = { factory_everyday_goods_construction_investment_money = investment_money_max_temp }
				subtract_from_temp_variable = { investment_money_temp = factory_everyday_goods_construction_investment_money }
			}
			else = {
				set_temp_variable = { investment_money_temp = 0 }
			}
			factories_update = yes
			add_to_variable = { update_state_econ_window = 1 }
		}
	}
	end_everyday_goods_factory_construction = {
		#Scope: State
		if = {
			limit = {
				has_state_flag = factory_everyday_goods_in_construction
				check_variable = { factory_everyday_goods_construction_industrial_goods_need < 0.001 }
			}
			clr_state_flag = factory_everyday_goods_in_construction
			clr_state_flag = factory_everyday_goods_construction_government_subsidized

			add_to_variable = { factory_everyday_goods_amount = 1 }
			add_to_variable = { factory_money = factory_everyday_goods_construction_investment_money }
			set_variable = { factory_everyday_goods_construction_investment_money = 0 }
			set_variable = { factory_everyday_goods_construction_industrial_goods_need = 0 }

			factories_update = yes
		}
	}
	start_luxury_goods_factory_construction = {
		#Scope: State
		#Starts the construction of an luxury goods factory. If one is already in construction, this does nothing.
		#INPUT:
			#investment_money_temp - Money put into the initial construction
			#factory_luxury_goods_construction_government_subsidized - state flag
				# - If the flag exists, then the government will pay all additional costs after the initial investment 
		#OUTPUT:
			#investment_money_temp - Money left over after investment

		if = {
			limit = {
				NOT = { has_state_flag = factory_luxury_goods_in_construction }
			}
			set_state_flag = factory_luxury_goods_in_construction

			set_variable = { factory_luxury_goods_construction_investment_money = investment_money_temp }
			
			set_variable = { factory_luxury_goods_construction_industrial_goods_need = global.factory_luxury_goods_construction_industrial_goods_base_need }
			multiply_variable = { factory_luxury_goods_construction_industrial_goods_need = factory_employment_amount_per_factory }
			divide_variable = { factory_luxury_goods_construction_industrial_goods_need = 100 }
			set_temp_variable = { modifier_temp = factory_build_cost_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_luxury_goods_construction_industrial_goods_need = modifier_temp }
			
			set_temp_variable = { investment_money_max_temp = factory_luxury_goods_construction_industrial_goods_need }
			multiply_temp_variable = { investment_money_max_temp = industrial_goods_price }
			multiply_temp_variable = { investment_money_max_temp = 2 }
			if = {
				limit = {
					check_variable = { investment_money_max_temp < factory_luxury_goods_construction_investment_money }
				}
				set_variable = { factory_luxury_goods_construction_investment_money = investment_money_max_temp }
				subtract_from_temp_variable = { investment_money_temp = factory_luxury_goods_construction_investment_money }
			}
			else = {
				set_temp_variable = { investment_money_temp = 0 }
			}
			factories_update = yes
			add_to_variable = { update_state_econ_window = 1 }
		}
	}
	end_luxury_goods_factory_construction = {
		#Scope: State
		if = {
			limit = {
				has_state_flag = factory_luxury_goods_in_construction
				check_variable = { factory_luxury_goods_construction_industrial_goods_need < 0.001 }
			}
			clr_state_flag = factory_luxury_goods_in_construction
			clr_state_flag = factory_luxury_goods_construction_government_subsidized

			add_to_variable = { factory_luxury_goods_amount = 1 }
			add_to_variable = { factory_money = factory_luxury_goods_investment_money }
			set_variable = { factory_luxury_goods_investment_money = 0 }
			set_variable = { factory_luxury_goods_construction_industrial_goods_need = 0 }

			factories_update = yes
		}
	}
	start_industrial_goods_factory_construction = {
		#Scope: State
		#Starts the construction of an industrial goods factory. If one is already in construction, this does nothing.
		#INPUT:
			#investment_money_temp - Money put into the initial construction
			#factory_industrial_goods_construction_government_subsidized - state flag
				# - If the flag exists, then the government will pay all additional costs after the initial investment 
		#OUTPUT:
			#investment_money_temp - Money left over after investment

		if = {
			limit = {
				NOT = { has_state_flag = factory_industrial_goods_in_construction }
			}
			set_state_flag = factory_industrial_goods_in_construction

			set_variable = { factory_industrial_goods_construction_investment_money = investment_money_temp }
			
			set_variable = { factory_industrial_goods_construction_industrial_goods_need = global.factory_industrial_goods_construction_industrial_goods_base_need }
			multiply_variable = { factory_industrial_goods_construction_industrial_goods_need = factory_employment_amount_per_factory }
			divide_variable = { factory_industrial_goods_construction_industrial_goods_need = 100 }
			set_temp_variable = { modifier_temp = factory_build_cost_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_industrial_goods_construction_industrial_goods_need = modifier_temp }
			
			set_temp_variable = { investment_money_max_temp = factory_industrial_goods_construction_industrial_goods_need }
			multiply_temp_variable = { investment_money_max_temp = industrial_goods_price }
			multiply_temp_variable = { investment_money_max_temp = 2 }
			if = {
				limit = {
					check_variable = { investment_money_max_temp < factory_industrial_goods_construction_investment_money }
				}
				set_variable = { factory_industrial_goods_construction_investment_money = investment_money_max_temp }
				subtract_from_temp_variable = { investment_money_temp = factory_industrial_goods_construction_investment_money }
			}
			else = {
				set_temp_variable = { investment_money_temp = 0 }
			}
			factories_update = yes
			add_to_variable = { update_state_econ_window = 1 }
		}
	}
	end_industrial_goods_factory_construction = {
		#Scope: State
		if = {
			limit = {
				has_state_flag = factory_industrial_goods_in_construction
				check_variable = { factory_industrial_goods_construction_industrial_goods_need < 0.001 }
			}
			clr_state_flag = factory_industrial_goods_in_construction
			clr_state_flag = factory_industrial_goods_construction_government_subsidized

			add_to_variable = { factory_industrial_goods_amount = 1 }
			add_to_variable = { factory_money = factory_industrial_goods_investment_money }
			set_variable = { factory_industrial_goods_investment_money = 0 }
			set_variable = { factory_industrial_goods_construction_industrial_goods_need = 0 }

			factories_update = yes
		}
	}

	start_infrastructure_construction = {
		#Scope: State
		#Starts the construction of an industrial goods factory. If one is already in construction, this does nothing.
		#INPUT:
			#investment_money_temp - Money put into the initial construction
			#infrastructure_construction_government_subsidized - state flag
				# - If the flag exists, then the government will pay all additional costs after the initial investment 
		#OUTPUT:
			#investment_money_temp - Money left over after investment

		if = {
			limit = {
				NOT = { has_state_flag = infrastructure_in_construction }
			}
			set_state_flag = infrastructure_in_construction

			set_variable = { infrastructure_construction_investment_money = investment_money_temp }
			
			set_variable = { infrastructure_construction_industrial_goods_need = global.infrastructure_construction_industrial_goods_base_need }
			set_temp_variable = { construction_need_temp = infrastructure_level }
			multiply_temp_variable = { construction_need_temp = global.infrastructure_construction_industrial_goods_base_need_increase_per_level }
			add_to_variable = { infrastructure_construction_industrial_goods_need = construction_need_temp }
			set_temp_variable = { modifier_temp = infrastructure_build_cost_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { infrastructure_construction_industrial_goods_need = modifier_temp }
			
			set_temp_variable = { investment_money_max_temp = infrastructure_construction_industrial_goods_need }
			multiply_temp_variable = { investment_money_max_temp = industrial_goods_price }
			multiply_temp_variable = { investment_money_max_temp = 2 }
			if = {
				limit = {
					check_variable = { investment_money_max_temp < infrastructure_construction_investment_money }
				}
				set_variable = { infrastructure_construction_investment_money = investment_money_max_temp }
				subtract_from_temp_variable = { investment_money_temp = infrastructure_construction_investment_money }
			}
			else = {
				set_temp_variable = { investment_money_temp = 0 }
			}
			add_to_variable = { update_state_econ_window = 1 }
		}
	}
	end_infrastructure_construction = {
		#Scope: State
		if = {
			limit = {
				has_state_flag = infrastructure_in_construction
				check_variable = { infrastructure_construction_industrial_goods_need < 0.001 }
			}
			clr_state_flag = infrastructure_in_construction
			clr_state_flag = infrastructure_construction_government_subsidized

			add_building_construction = {
				type = infrastructure
				level = 1
				instant_build = yes
			}
			add_to_variable = { pops_money = infrastructure_investment_money }
			set_variable = { infrastructure_investment_money = 0 }
			set_variable = { infrastructure_construction_industrial_goods_need = 0 }
		}
	}


	change_upper_strata_income_tax = {
		#Scope: Country
		#Increases/Decreases the Upper Strata Income Tax level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { income_tax_upper_strata_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - Upper class get angerry

			if = {
				limit = {
					check_variable = { income_tax_upper_strata_percentage > 100 }
				}
				set_variable = { income_tax_upper_strata_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - Upper Class become happy

			if = {
				limit = {
					check_variable = { income_tax_upper_strata_percentage < 0 }
				}
				set_variable = { income_tax_upper_strata_percentage = 0 }
			}
		}
		taxes_update = yes
	}
	change_middle_strata_income_tax = {
		#Scope: Country
		#Increases/Decreases the Middle Strata Income Tax level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { income_tax_middle_strata_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - Middle class get angerry

			if = {
				limit = {
					check_variable = { income_tax_middle_strata_percentage > 100 }
				}
				set_variable = { income_tax_middle_strata_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - Middle Class become happy

			if = {
				limit = {
					check_variable = { income_tax_middle_strata_percentage < 0 }
				}
				set_variable = { income_tax_middle_strata_percentage = 0 }
			}
		}
		taxes_update = yes
	}
	change_lower_strata_income_tax = {
		#Scope: Country
		#Increases/Decreases the Lower Strata Income Tax level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { income_tax_lower_strata_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - Lower class get angerry

			if = {
				limit = {
					check_variable = { income_tax_lower_strata_percentage > 100 }
				}
				set_variable = { income_tax_lower_strata_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - Lower Class become happy

			if = {
				limit = {
					check_variable = { income_tax_lower_strata_percentage < 0 }
				}
				set_variable = { income_tax_lower_strata_percentage = 0 }
			}
		}
		taxes_update = yes
	}
	
	change_sales_tax = {
		#Scope: Country
		#Increases/Decreases the Sales Tax level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { sales_tax_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - People get angerry

			if = {
				limit = {
					check_variable = { sales_tax_percentage > 100 }
				}
				set_variable = { sales_tax_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - People become happy

			if = {
				limit = {
					check_variable = { sales_tax_percentage < 0 }
				}
				set_variable = { sales_tax_percentage = 0 }
			}
		}
		taxes_update = yes
	}
	change_corporate_tax = {
		#Scope: Country
		#Increases/Decreases the Corporate Tax level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { corporate_tax_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - Corporations get angerry

			if = {
				limit = {
					check_variable = { corporate_tax_percentage > 100 }
				}
				set_variable = { corporate_tax_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - Corporations become happy

			if = {
				limit = {
					check_variable = { corporate_tax_percentage < 0 }
				}
				set_variable = { corporate_tax_percentage = 0 }
			}
		}
		taxes_update = yes
	}
	change_import_tariff = {
		#Scope: Country
		#Increases/Decreases the Import Tariff level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { import_tariff_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - People get angerry

			if = {
				limit = {
					check_variable = { import_tariff_percentage > 100 }
				}
				set_variable = { import_tariff_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - People become happy

			if = {
				limit = {
					check_variable = { import_tariff_percentage < 0 }
				}
				set_variable = { import_tariff_percentage = 0 }
			}
		}
		taxes_update = yes
	}
	change_export_tariff = {
		#Scope: Country
		#Increases/Decreases the Export Tariff level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { export_tariff_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - People get angerry

			if = {
				limit = {
					check_variable = { export_tariff_percentage > 100 }
				}
				set_variable = { export_tariff_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - People become happy

			if = {
				limit = {
					check_variable = { export_tariff_percentage < 0 }
				}
				set_variable = { export_tariff_percentage = 0 }
			}
		}
		taxes_update = yes
	}
	
	change_military_spending = {
		#Scope: Country
		#Increases/Decreases the Military Spending level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { military_spending_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - People get angerry

			if = {
				limit = {
					check_variable = { military_spending_percentage > 100 }
				}
				set_variable = { military_spending_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - People become happy

			if = {
				limit = {
					check_variable = { military_spending_percentage < 0 }
				}
				set_variable = { military_spending_percentage = 0 }
			}
		}
		spending_update = yes
	}
	change_intelligence_spending = {
		#Scope: Country
		#Increases/Decreases the Intelligence Spending level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { intelligence_spending_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - People get angerry

			if = {
				limit = {
					check_variable = { intelligence_spending_percentage > 100 }
				}
				set_variable = { intelligence_spending_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - People become happy

			if = {
				limit = {
					check_variable = { intelligence_spending_percentage < 0 }
				}
				set_variable = { intelligence_spending_percentage = 0 }
			}
		}
		spending_update = yes
	}
	change_construction_spending = {
		#Scope: Country
		#Increases/Decreases the Construction Spending level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { construction_spending_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - People get angerry

			if = {
				limit = {
					check_variable = { construction_spending_percentage > 100 }
				}
				set_variable = { construction_spending_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - People become happy

			if = {
				limit = {
					check_variable = { construction_spending_percentage < 0 }
				}
				set_variable = { construction_spending_percentage = 0 }
			}
		}
		spending_update = yes
	}
	change_infrastructure_subsidy = {
		#Scope: Country
		#Increases/Decreases the Infrastructure Subsidy level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { infrastructure_subsidy_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - People get angerry

			if = {
				limit = {
					check_variable = { infrastructure_subsidy_percentage > 100 }
				}
				set_variable = { infrastructure_subsidy_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - People become happy

			if = {
				limit = {
					check_variable = { infrastructure_subsidy_percentage < 0 }
				}
				set_variable = { infrastructure_subsidy_percentage = 0 }
			}
		}
		spending_update = yes
	} 
	change_industrial_subsidy = {
		#Scope: Country
		#Increases/Decreases the Industrial Subsidy level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { industrial_subsidy_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - People get angerry

			if = {
				limit = {
					check_variable = { industrial_subsidy_percentage > 100 }
				}
				set_variable = { industrial_subsidy_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - People become happy

			if = {
				limit = {
					check_variable = { industrial_subsidy_percentage < 0 }
				}
				set_variable = { industrial_subsidy_percentage = 0 }
			}
		}
		spending_update = yes
	}
#

#Supply, Demand, Price
	reset_supply = {
		#Should be done at the start
		#Country Scope
		set_variable = { life_goods_supply = 0 }
		set_variable = { life_goods_produced_amount = 0 }

		set_variable = { everyday_goods_supply = 0 }
		set_variable = { everyday_goods_produced_amount = 0 }

		set_variable = { luxury_goods_supply = 0 }
		set_variable = { luxury_goods_produced_amount = 0 }

		set_variable = { services_supply = 0 }
		set_variable = { services_produced_amount = 0 }

		set_variable = { raw_goods_supply = 0 }
		set_variable = { raw_goods_produced_amount = 0 }

		set_variable = { industrial_goods_supply = 0 }
		set_variable = { industrial_goods_produced_amount = 0 }
	}
	calculate_supply = {
		#This should only be done once near the start of the script.
		#State Scope

		set_variable = { life_goods_produced_amount = pops_rgos_life_goods_production }
		set_variable = { everyday_goods_produced_amount = factory_everyday_goods_production }
		add_to_variable = { everyday_goods_produced_amount = pops_artisans_everyday_goods_production }
		set_variable = { luxury_goods_produced_amount = factory_luxury_goods_production }
		add_to_variable = { luxury_goods_produced_amount = pops_artisans_luxury_goods_production }
		set_variable = { services_produced_amount = pops_services_production }
		set_variable = { industrial_goods_produced_amount = factory_industrial_goods_production }
		add_to_variable = { industrial_goods_produced_amount = pops_artisans_industrial_goods_production }
		set_variable = { raw_goods_produced_amount = pops_rgos_raw_goods_production }

		set_variable = { life_goods_supply = life_goods_produced_amount }
		set_variable = { everyday_goods_supply = everyday_goods_produced_amount }
		set_variable = { luxury_goods_supply = luxury_goods_produced_amount }
		set_variable = { services_supply = services_produced_amount }
		set_variable = { raw_goods_supply = raw_goods_produced_amount }
		set_variable = { industrial_goods_supply = industrial_goods_produced_amount }

		controller = {
			add_to_variable = { life_goods_produced_amount = PREV.life_goods_produced_amount }
			add_to_variable = { life_goods_supply = PREV.life_goods_supply }

			add_to_variable = { everyday_goods_produced_amount = PREV.everyday_goods_produced_amount }
			add_to_variable = { everyday_goods_supply = PREV.everyday_goods_supply }

			add_to_variable = { luxury_goods_produced_amount = PREV.luxury_goods_produced_amount }
			add_to_variable = { luxury_goods_supply = PREV.luxury_goods_supply }
			
			add_to_variable = { services_produced_amount = PREV.services_produced_amount }
			add_to_variable = { services_supply = PREV.services_supply }
			
			add_to_variable = { raw_goods_produced_amount = PREV.raw_goods_produced_amount }
			add_to_variable = { raw_goods_supply = PREV.raw_goods_supply }
			
			add_to_variable = { industrial_goods_produced_amount = PREV.industrial_goods_produced_amount }
			add_to_variable = { industrial_goods_supply = PREV.industrial_goods_supply }
		}
	}

	reset_demand = {
		#Country Scope
		set_variable = { life_goods_need = 0 }
		set_variable = { everyday_goods_need = 0 }
		set_variable = { luxury_goods_need = 0 }
		set_variable = { services_need = 0 }
		set_variable = { raw_goods_need = 0 }
		set_variable = { industrial_goods_need = 0 }

		set_variable = { life_goods_demand = 0 }
		set_variable = { everyday_goods_demand = 0 }
		set_variable = { luxury_goods_demand = 0 }
		set_variable = { services_demand = 0 }
		set_variable = { raw_goods_demand = 0 }
		set_variable = { industrial_goods_demand = 0 }
	}
	calculate_demand = {
		#reset_demand on the national scope should be done before this
		#Do this before pops get paid or after they spend it
		#State Scope
		set_variable = { life_goods_need = pops_life_goods_need }
		set_variable = { everyday_goods_need = pops_everyday_goods_need }
		set_variable = { luxury_goods_need = pops_luxury_goods_need }
		set_variable = { services_need = pops_services_demand }
		set_variable = { raw_goods_need = factory_raw_goods_need }
		add_to_variable = { raw_goods_need = pops_artisans_raw_goods_need }
		set_variable = { industrial_goods_need = factory_industrial_goods_need }
		add_to_variable = { industrial_goods_need = factory_everyday_goods_construction_industrial_goods_need }
		add_to_variable = { industrial_goods_need = factory_luxury_goods_construction_industrial_goods_need }
		add_to_variable = { industrial_goods_need = factory_industrial_goods_construction_industrial_goods_need }
		add_to_variable = { industrial_goods_need = infrastructure_industrial_goods_need }
		add_to_variable = { industrial_goods_need = infrastructure_construction_industrial_goods_need }

		set_variable = { life_goods_demand = 0 }
		set_variable = { everyday_goods_demand = 0 }
		set_variable = { luxury_goods_demand = 0 }
		set_variable = { services_demand = 0 }
		set_variable = { raw_goods_demand = 0 }
		set_variable = { industrial_goods_demand = 0 }
		#Pop Demand
			calculate_pop_demand = yes

			add_to_variable = { life_goods_demand = pops_life_goods_demand }
			add_to_variable = { everyday_goods_demand = pops_everyday_goods_demand }
			add_to_variable = { luxury_goods_demand = pops_luxury_goods_demand }
			add_to_variable = { services_demand = pops_services_demand }
			add_to_variable = { raw_goods_demand = pops_artisans_raw_goods_demand }
			
			add_to_variable = { industrial_goods_demand = infrastructure_industrial_goods_demand }
			add_to_variable = { industrial_goods_demand = infrastructure_construction_industrial_goods_demand }

		#Industry Demand
			calculate_factory_demand = yes
			add_to_variable = { raw_goods_demand = factory_raw_goods_demand }
			add_to_variable = { industrial_goods_demand = factory_industrial_goods_demand }
			add_to_variable = { industrial_goods_demand = factory_everyday_goods_construction_industrial_goods_demand }
			add_to_variable = { industrial_goods_demand = factory_luxury_goods_construction_industrial_goods_demand }
			add_to_variable = { industrial_goods_demand = factory_industrial_goods_construction_industrial_goods_demand }

		controller = {
			add_to_variable = { life_goods_demand = PREV.life_goods_demand }
			add_to_variable = { everyday_goods_demand = PREV.everyday_goods_demand }
			add_to_variable = { luxury_goods_demand = PREV.luxury_goods_demand }
			add_to_variable = { services_demand = PREV.services_demand }
			add_to_variable = { raw_goods_demand = PREV.raw_goods_demand }
			add_to_variable = { industrial_goods_demand = PREV.industrial_goods_demand }

			add_to_variable = { life_goods_need = PREV.life_goods_need }
			add_to_variable = { everyday_goods_need = PREV.everyday_goods_need }
			add_to_variable = { luxury_goods_need = PREV.luxury_goods_need }
			add_to_variable = { services_need = PREV.services_need }
			add_to_variable = { raw_goods_need = PREV.raw_goods_need }
			add_to_variable = { industrial_goods_need = PREV.industrial_goods_need }
		}
	}
	calculate_demand_no_adjust = {
		#For the times when you just need demand to be recalculated on the state scope. Idk why, but it's here
		#Do this before pops get paid or after they spend it
		#State Scope

		calculate_demand = yes

		controller = {
			subtract_from_variable = { life_goods_demand = PREV.life_goods_demand }
			subtract_from_variable = { everyday_goods_demand = PREV.everyday_goods_demand }
			subtract_from_variable = { luxury_goods_demand = PREV.luxury_goods_demand }
			subtract_from_variable = { services_demand = PREV.services_demand }
			subtract_from_variable = { raw_goods_demand = PREV.raw_goods_demand }
			subtract_from_variable = { industrial_goods_demand = PREV.industrial_goods_demand }

			subtract_from_variable = { life_goods_need = PREV.life_goods_need }
			subtract_from_variable = { everyday_goods_need = PREV.everyday_goods_need }
			subtract_from_variable = { luxury_goods_need = PREV.luxury_goods_need }
			subtract_from_variable = { services_need = PREV.services_need }
			subtract_from_variable = { raw_goods_need = PREV.raw_goods_need }
			subtract_from_variable = { industrial_goods_need = PREV.industrial_goods_need }
		}
	}
	
	calculate_pop_demand = {
		#State Scope

		set_temp_variable = { money_left_temp = pops_money }
		add_to_temp_variable = { money_left_temp = pops_earnings }


		#Pop Demand is a factor of A: How much they want the resource and B: How much they are willing to spend

		#
		set_temp_variable = { sales_tax_temp = controller:sales_tax_percentage }
		add_to_temp_variable = { sales_tax_temp = 100 }
		#Life Goods
			set_temp_variable = { money_life_goods_temp = money_left_temp }
			multiply_temp_variable = { money_life_goods_temp = global.pops_life_goods_spending } #Pops will spend up to 75% of their money on Life Goods

			set_temp_variable = { actual_price_temp = life_goods_price }
			multiply_temp_variable = { actual_price_temp = sales_tax_temp }
			divide_temp_variable = { actual_price_temp = 100 }

			set_temp_variable = { price_temp = actual_price_temp }
			set_temp_variable = { magnitude_temp = 1 }
			if = {
				limit = {
					divide_temp_variable = { price_temp = 1.1 }
					check_variable = { price_temp > life_goods_base_price }
				}
				while_loop_effect = {
					limit = {
						check_variable = { price_temp > life_goods_base_price }
						check_variable = { magnitude_temp < 5 }
					}
					divide_temp_variable = { price_temp = 1.1 }
					add_to_temp_variable = { magnitude_temp = 0.1 }
				}
				divide_temp_variable = { money_life_goods_temp = magnitude_temp }
			}
			else_if = {
				limit = {
					multiply_temp_variable = { price_temp = 1.21 }
					check_variable = { price_temp < life_goods_base_price }
				}
				while_loop_effect = {
					limit = {
						check_variable = { price_temp < life_goods_base_price }
						check_variable = { magnitude_temp < 5 }
					}
					multiply_temp_variable = { price_temp = 1.1 }
					add_to_temp_variable = { magnitude_temp = 0.1 }
				}
				multiply_temp_variable = { money_life_goods_temp = magnitude_temp }
			}

			set_variable = { pops_life_goods_demand = money_life_goods_temp }
			divide_variable = { pops_life_goods_demand = actual_price_temp }
			multiply_variable = { pops_life_goods_demand = 0.99 }

			if = {
				limit = {
					check_variable = { pops_life_goods_demand > pops_life_goods_need }
				}
				set_variable = { pops_life_goods_demand = pops_life_goods_need }
			}
			if = {
				limit = {
					check_variable = { pops_life_goods_demand < 0 }
				}
				set_variable = { pops_life_goods_demand = 0 }
			}
			set_temp_variable = { cost_temp = pops_life_goods_demand }
			multiply_temp_variable = { cost_temp = actual_price_temp }

			subtract_from_temp_variable = { money_left_temp = cost_temp }
			subtract_from_temp_variable = { money_life_goods_temp = cost_temp }
		#

		#Industrial Goods
			set_temp_variable = { money_industrial_goods_temp = money_left_temp }
			
			set_variable = { infrastructure_industrial_goods_demand = money_industrial_goods_temp }
			divide_variable = { infrastructure_industrial_goods_demand = industrial_goods_price }
			multiply_variable = { infrastructure_industrial_goods_demand = 0.99 }

			if = {
				limit = {
					check_variable = { infrastructure_industrial_goods_demand > infrastructure_industrial_goods_need }
				}
				set_variable = { infrastructure_industrial_goods_demand = infrastructure_industrial_goods_need }
			}
			if = {
				limit = {
					check_variable = { infrastructure_industrial_goods_demand < 0 }
				}
				set_variable = { infrastructure_industrial_goods_demand = 0 }
			}
			set_temp_variable = { cost_temp = infrastructure_industrial_goods_demand }
			multiply_temp_variable = { cost_temp = industrial_goods_price }

			subtract_from_temp_variable = { money_left_temp = cost_temp }
		#

		#Raw Goods
			set_temp_variable = { money_raw_goods_temp = money_left_temp }
			multiply_temp_variable = { money_raw_goods_temp = global.pops_artisans_raw_goods_spending } #Pops/Artisans will spend up to 30% of their money on Raw Goods
			add_to_variable = { money_raw_goods_temp = money_life_goods_temp }
			if = {
				limit = {
					check_variable = { money_raw_goods_temp > money_left_temp }
				}
				set_temp_variable = { money_raw_goods_temp = money_left_temp }
			}

			set_temp_variable = { money_raw_goods_max_temp = money_left_temp }
			multiply_temp_variable = { money_raw_goods_max_temp = global.pops_artisans_raw_goods_spending_max }
			if = {
				limit = {
					check_variable = { money_raw_goods_max_temp < money_raw_goods_temp }
				}
				set_temp_variable = { money_raw_goods_temp = money_raw_goods_max_temp }
			}

			set_temp_variable = { price_temp = raw_goods_price }
			set_temp_variable = { magnitude_temp = 1 }
			if = {
				limit = {
					divide_temp_variable = { price_temp = 1.1 }
					check_variable = { price_temp > raw_goods_base_price }
				}
				while_loop_effect = {
					limit = {
						check_variable = { price_temp > raw_goods_base_price }
						check_variable = { magnitude_temp < 5 }
					}
					divide_temp_variable = { price_temp = 1.1 }
					add_to_temp_variable = { magnitude_temp = 0.1 }
				}
				divide_temp_variable = { money_raw_goods_temp = magnitude_temp }
			}
			else_if = {
				limit = {
					multiply_temp_variable = { price_temp = 1.21 }
					check_variable = { price_temp < raw_goods_base_price }
				}
				while_loop_effect = {
					limit = {
						check_variable = { price_temp < raw_goods_base_price }
						check_variable = { magnitude_temp < 5 }
					}
					multiply_temp_variable = { price_temp = 1.1 }
					add_to_temp_variable = { magnitude_temp = 0.1 }
				}
				multiply_temp_variable = { money_raw_goods_temp = magnitude_temp }
			}

			set_variable = { pops_artisans_raw_goods_demand = money_raw_goods_temp }
			divide_variable = { pops_artisans_raw_goods_demand = raw_goods_price }
			multiply_variable = { pops_artisans_raw_goods_demand = 0.99 }

			if = {
				limit = {
					check_variable = { pops_artisans_raw_goods_demand > pops_artisans_raw_goods_need }
				}
				set_variable = { pops_artisans_raw_goods_demand = pops_artisans_raw_goods_need }
			}
			if = {
				limit = {
					check_variable = { pops_artisans_raw_goods_demand < 0 }
				}
				set_variable = { pops_artisans_raw_goods_demand = 0 }
			}

			set_temp_variable = { cost_temp = pops_artisans_raw_goods_demand }
			multiply_temp_variable = { cost_temp = raw_goods_price }

			subtract_from_temp_variable = { money_left_temp = cost_temp }
			subtract_from_temp_variable = { money_raw_goods_temp = cost_temp }
		#

		#Everyday Goods
			set_temp_variable = { money_everyday_goods_temp = money_left_temp }
			multiply_temp_variable = { money_everyday_goods_temp = global.pops_everyday_goods_spending } #Pops will spend a base of 50% of their money on Everyday Goods
			add_to_variable = { money_everyday_goods_temp = money_life_goods_temp }

			set_temp_variable = { money_everyday_goods_max_temp = money_left_temp }
			multiply_temp_variable = { money_everyday_goods_max_temp = global.pops_everyday_goods_spending_max }
			if = {
				limit = {
					check_variable = { money_everyday_goods_max_temp < money_everyday_goods_temp }
				}
				set_temp_variable = { money_everyday_goods_temp = money_everyday_goods_max_temp }
			}

			set_temp_variable = { actual_price_temp = everyday_goods_price }
			multiply_temp_variable = { actual_price_temp = sales_tax_temp }
			divide_temp_variable = { actual_price_temp = 100 }

			set_temp_variable = { price_temp = actual_price_temp }
			set_temp_variable = { magnitude_temp = 1 }
			if = {
				limit = {
					divide_temp_variable = { price_temp = 1.1 }
					check_variable = { price_temp > everyday_goods_base_price }
				}
				while_loop_effect = {
					limit = {
						check_variable = { price_temp > everyday_goods_base_price }
						check_variable = { magnitude_temp < 5 }
					}
					divide_temp_variable = { price_temp = 1.1 }
					add_to_temp_variable = { magnitude_temp = 0.1 }
				}
				divide_temp_variable = { money_everyday_goods_temp = magnitude_temp }
			}
			else_if = {
				limit = {
					multiply_temp_variable = { price_temp = 1.21 }
					check_variable = { price_temp < everyday_goods_base_price }
				}
				while_loop_effect = {
					limit = {
						check_variable = { price_temp < everyday_goods_base_price }
						check_variable = { magnitude_temp < 5 }
					}
					multiply_temp_variable = { price_temp = 1.1 }
					add_to_temp_variable = { magnitude_temp = 0.1 }
				}
				multiply_temp_variable = { money_everyday_goods_temp = magnitude_temp }
			}

			set_variable = { pops_everyday_goods_demand = money_everyday_goods_temp }
			divide_variable = { pops_everyday_goods_demand = actual_price_temp }
			multiply_variable = { pops_everyday_goods_demand = 0.99 }

			if = {
				limit = {
					check_variable = { pops_everyday_goods_demand > pops_everyday_goods_need }
				}
				set_variable = { pops_everyday_goods_demand = pops_everyday_goods_need }
			}
			if = {
				limit = {
					check_variable = { pops_everyday_goods_demand < 0 }
				}
				set_variable = { pops_everyday_goods_demand = 0 }
			}
			set_temp_variable = { cost_temp = pops_everyday_goods_demand }
			multiply_temp_variable = { cost_temp = actual_price_temp }

			subtract_from_temp_variable = { money_left_temp = cost_temp }
			subtract_from_temp_variable = { money_everyday_goods_temp = cost_temp }
		#

		#Luxury Goods
			set_temp_variable = { money_luxury_goods_temp = money_left_temp }
			multiply_temp_variable = { money_luxury_goods_temp = global.pops_luxury_goods_spending } #Pops will spend up to 75% of their money on Luxury Goods
			add_to_variable = { money_luxury_goods_temp = money_everyday_goods_temp }

			set_temp_variable = { money_luxury_goods_max_temp = money_left_temp }
			multiply_temp_variable = { money_luxury_goods_max_temp = global.pops_luxury_goods_spending_max }
			if = {
				limit = {
					check_variable = { money_luxury_goods_max_temp < money_luxury_goods_temp }
				}
				set_temp_variable = { money_luxury_goods_temp = money_luxury_goods_max_temp }
			}

			set_temp_variable = { actual_price_temp = luxury_goods_price }
			multiply_temp_variable = { actual_price_temp = sales_tax_temp }
			divide_temp_variable = { actual_price_temp = 100 }

			set_temp_variable = { price_temp = actual_price_temp }
			set_temp_variable = { magnitude_temp = 1 }
			if = {
				limit = {
					divide_temp_variable = { price_temp = 1.1 }
					check_variable = { price_temp > luxury_goods_base_price }
				}
				while_loop_effect = {
					limit = {
						check_variable = { price_temp > luxury_goods_base_price }
						check_variable = { magnitude_temp < 5 }
					}
					divide_temp_variable = { price_temp = 1.1 }
					add_to_temp_variable = { magnitude_temp = 0.1 }
				}
				divide_temp_variable = { money_luxury_goods_temp = magnitude_temp }
			}
			else_if = {
				limit = {
					multiply_temp_variable = { price_temp = 1.21 }
					check_variable = { price_temp < luxury_goods_base_price }
				}
				while_loop_effect = {
					limit = {
						check_variable = { price_temp < luxury_goods_base_price }
						check_variable = { magnitude_temp < 5 }
					}
					multiply_temp_variable = { price_temp = 1.1 }
					add_to_temp_variable = { magnitude_temp = 0.1 }
				}
				multiply_temp_variable = { money_luxury_goods_temp = magnitude_temp }
			}

			set_variable = { pops_luxury_goods_demand = money_luxury_goods_temp }
			divide_variable = { pops_luxury_goods_demand = actual_price_temp }
			multiply_variable = { pops_luxury_goods_demand = 0.99 }

			if = {
				limit = {
					check_variable = { pops_luxury_goods_demand > pops_luxury_goods_need }
				}
				set_variable = { pops_luxury_goods_demand = pops_luxury_goods_need }
			}
			if = {
				limit = {
					check_variable = { pops_luxury_goods_demand < 0 }
				}
				set_variable = { pops_luxury_goods_demand = 0 }
			}
			set_temp_variable = { cost_temp = pops_luxury_goods_demand }
			multiply_temp_variable = { cost_temp = actual_price_temp }

			subtract_from_temp_variable = { money_left_temp = cost_temp }
			subtract_from_temp_variable = { money_luxury_goods_temp = cost_temp }
		#

		#Services
			set_temp_variable = { money_services_temp = money_left_temp }
			multiply_temp_variable = { money_services_temp = global.pops_services_spending } #Pops will spend up to 75% of their money on Services
			add_to_variable = { money_services_temp = money_luxury_goods_temp }
			
			set_temp_variable = { money_services_max_temp = money_left_temp }
			multiply_temp_variable = { money_services_max_temp = global.pops_services_spending_max }
			if = {
				limit = {
					check_variable = { money_services_max_temp < money_services_temp }
				}
				set_temp_variable = { money_services_temp = money_services_max_temp }
			}

			set_temp_variable = { actual_price_temp = services_price }
			multiply_temp_variable = { actual_price_temp = sales_tax_temp }
			divide_temp_variable = { actual_price_temp = 100 }

			set_temp_variable = { price_temp = actual_price_temp }
			set_temp_variable = { magnitude_temp = 1 }
			if = {
				limit = {
					divide_temp_variable = { price_temp = 1.1 }
					check_variable = { price_temp > services_base_price }
				}
				while_loop_effect = {
					limit = {
						check_variable = { price_temp > services_base_price }
						check_variable = { magnitude_temp < 5 }
					}
					divide_temp_variable = { price_temp = 1.1 }
					add_to_temp_variable = { magnitude_temp = 0.1 }
				}
				divide_temp_variable = { money_services_temp = magnitude_temp }
			}
			else_if = {
				limit = {
					multiply_temp_variable = { price_temp = 1.21 }
					check_variable = { price_temp < services_base_price }
				}
				while_loop_effect = {
					limit = {
						check_variable = { price_temp < services_base_price }
						check_variable = { magnitude_temp < 5 }
					}
					multiply_temp_variable = { price_temp = 1.1 }
					add_to_temp_variable = { magnitude_temp = 0.1 }
				}
				multiply_temp_variable = { money_services_temp = magnitude_temp }
			}

			set_variable = { pops_services_demand = money_services_temp }
			divide_variable = { pops_services_demand = actual_price_temp }
			multiply_variable = { pops_services_demand = 0.99 }

			if = {
				limit = {
					check_variable = { pops_services_demand < 0 }
				}
				set_variable = { pops_services_demand = 0 }
			}
			set_temp_variable = { cost_temp = pops_services_demand }
			multiply_temp_variable = { cost_temp = actual_price_temp }

			subtract_from_temp_variable = { money_left_temp = cost_temp }
			subtract_from_temp_variable = { money_services_temp = cost_temp }
		
		#

		#Construction
			set_temp_variable = { max_demand_temp = global.infrastructure_construction_base_speed }
			#Infrastructure
				set_variable = { infrastructure_construction_industrial_goods_demand = infrastructure_construction_investment_money }
				divide_variable = { infrastructure_construction_industrial_goods_demand = industrial_goods_price }
				divide_variable = { infrastructure_construction_industrial_goods_demand = 2 }
				if = {
					limit = {
						check_variable = { infrastructure_construction_industrial_goods_demand > max_demand_temp }
					}
					set_variable = { infrastructure_construction_industrial_goods_demand = max_demand_temp }
				}
				if = {
					limit = {
						check_variable = { infrastructure_construction_industrial_goods_demand > infrastructure_construction_industrial_goods_need }
					}
					set_variable = { infrastructure_construction_industrial_goods_demand = infrastructure_construction_industrial_goods_need }
				}
	}
	calculate_factory_demand = {
		#State Scope

		set_temp_variable = { money_left_temp = factory_money }
		add_to_temp_variable = { money_left_temp = factory_earnings }

		#Factory Demand is a factor of A: How much they need the resource and B: How much they are willing to spend

		#Raw Goods
			set_temp_variable = { money_raw_goods_temp = money_left_temp }
			multiply_temp_variable = { money_raw_goods_temp = global.factory_raw_goods_spending_max } #Factories will spend up to 30% of their money on Raw Goods
			
			set_temp_variable = { price_temp = raw_goods_price }
			set_temp_variable = { magnitude_temp = 1 }
			if = {
				limit = {
					divide_temp_variable = { price_temp = 1.1 }
					check_variable = { price_temp > raw_goods_base_price }
				}
				while_loop_effect = {
					limit = {
						check_variable = { price_temp > raw_goods_base_price }
						check_variable = { magnitude_temp < 5 }
					}
					divide_temp_variable = { price_temp = 1.1 }
					add_to_temp_variable = { magnitude_temp = 0.1 }
				}
				divide_temp_variable = { money_raw_goods_temp = magnitude_temp }
			}
			else_if = {
				limit = {
					multiply_temp_variable = { price_temp = 1.21 }
					check_variable = { price_temp < raw_goods_base_price }
				}
				while_loop_effect = {
					limit = {
						check_variable = { price_temp < raw_goods_base_price }
						check_variable = { magnitude_temp < 5 }
					}
					multiply_temp_variable = { price_temp = 1.1 }
					add_to_temp_variable = { magnitude_temp = 0.1 }
				}
				multiply_temp_variable = { money_raw_goods_temp = magnitude_temp }
			}

			set_variable = { factory_raw_goods_demand = money_raw_goods_temp }
			divide_variable = { factory_raw_goods_demand = raw_goods_price }
			multiply_variable = { factory_raw_goods_demand = 0.99 }

			if = {
				limit = {
					check_variable = { factory_raw_goods_demand > factory_raw_goods_need }
				}
				set_variable = { factory_raw_goods_demand = factory_raw_goods_need }
			}

		#Industrial Goods
			set_temp_variable = { money_industrial_goods_temp = money_left_temp }
			multiply_temp_variable = { money_industrial_goods_temp = global.factory_industrial_goods_spending_max } #Factories will spend up to 30% of their money on Industrial Goods
			
			set_temp_variable = { price_temp = industrial_goods_price }
			set_temp_variable = { magnitude_temp = 1 }
			if = {
				limit = {
					divide_temp_variable = { price_temp = 1.1 }
					check_variable = { price_temp > industrial_goods_base_price }
				}
				while_loop_effect = {
					limit = {
						check_variable = { price_temp > industrial_goods_base_price }
						check_variable = { magnitude_temp < 5 }
					}
					divide_temp_variable = { price_temp = 1.1 }
					add_to_temp_variable = { magnitude_temp = 0.1 }
				}
				divide_temp_variable = { money_industrial_goods_temp = magnitude_temp }
			}
			else_if = {
				limit = {
					multiply_temp_variable = { price_temp = 1.21 }
					check_variable = { price_temp < industrial_goods_base_price }
				}
				while_loop_effect = {
					limit = {
						check_variable = { price_temp < industrial_goods_base_price }
						check_variable = { magnitude_temp < 5 }
					}
					multiply_temp_variable = { price_temp = 1.1 }
					add_to_temp_variable = { magnitude_temp = 0.1 }
				}
				multiply_temp_variable = { money_industrial_goods_temp = magnitude_temp }
			}

			set_variable = { factory_industrial_goods_demand = money_industrial_goods_temp }
			divide_variable = { factory_industrial_goods_demand = industrial_goods_price }
			multiply_variable = { factory_industrial_goods_demand = 0.99 }

			if = {
				limit = {
					check_variable = { factory_industrial_goods_demand > factory_industrial_goods_need }
				}
				set_variable = { factory_industrial_goods_demand = factory_industrial_goods_need }
			}
		#Construction
			set_temp_variable = { max_demand_temp = factory_employment_amount_per_factory }
			divide_temp_variable = { max_demand_temp = 20 }
			#Everyday Goods Factory
				set_variable = { factory_everyday_goods_construction_industrial_goods_demand = factory_everyday_goods_construction_investment_money }
				divide_variable = { factory_everyday_goods_construction_industrial_goods_demand = industrial_goods_price }
				divide_variable = { factory_everyday_goods_construction_industrial_goods_demand = 2 }
				if = {
					limit = {
						check_variable = { factory_everyday_goods_construction_industrial_goods_demand > max_demand_temp }
					}
					set_variable = { factory_everyday_goods_construction_industrial_goods_demand = max_demand_temp }
				}
				if = {
					limit = {
						check_variable = { factory_everyday_goods_construction_industrial_goods_demand > factory_everyday_goods_construction_industrial_goods_need }
					}
					set_variable = { factory_everyday_goods_construction_industrial_goods_demand = factory_everyday_goods_construction_industrial_goods_need }
				}
			#Luxury Goods Factory
				set_variable = { factory_luxury_goods_construction_industrial_goods_demand = factory_luxury_goods_construction_investment_money }
				divide_variable = { factory_luxury_goods_construction_industrial_goods_demand = industrial_goods_price }
				divide_variable = { factory_luxury_goods_construction_industrial_goods_demand = 2 }

				if = {
					limit = {
						check_variable = { factory_luxury_goods_construction_industrial_goods_demand > max_demand_temp }
					}
					set_variable = { factory_luxury_goods_construction_industrial_goods_demand = max_demand_temp }
				}
				if = {
					limit = {
						check_variable = { factory_luxury_goods_construction_industrial_goods_demand > factory_luxury_goods_construction_industrial_goods_need }
					}
					set_variable = { factory_luxury_goods_construction_industrial_goods_demand = factory_luxury_goods_construction_industrial_goods_need }
				}
			#Industrial Goods Factory
				set_variable = { factory_industrial_goods_construction_industrial_goods_demand = factory_industrial_goods_construction_investment_money }
				divide_variable = { factory_industrial_goods_construction_industrial_goods_demand = industrial_goods_price }
				divide_variable = { factory_industrial_goods_construction_industrial_goods_demand = 2 }

				if = {
					limit = {
						check_variable = { factory_industrial_goods_construction_industrial_goods_demand > max_demand_temp }
					}
					set_variable = { factory_industrial_goods_construction_industrial_goods_demand = max_demand_temp }
				}
				if = {
					limit = {
						check_variable = { factory_industrial_goods_construction_industrial_goods_demand > factory_industrial_goods_construction_industrial_goods_need }
					}
					set_variable = { factory_industrial_goods_construction_industrial_goods_demand = factory_industrial_goods_construction_industrial_goods_need }
				}

	}

	calculate_price = {
		#life_goods
			set_temp_variable = { life_goods_prev_price_temp = life_goods_price }
			multiply_temp_variable = { life_goods_prev_price_temp = 2 }
			if = {
				limit = {
					check_variable = { life_goods_supply > 0 }
				}
				if = {
					limit = {
						check_variable = { life_goods_supply < 1 }
					}
					divide_variable = { life_goods_price = life_goods_supply }
					multiply_variable = { life_goods_price = life_goods_demand }
				}
				else = {
					multiply_variable = { life_goods_price = life_goods_demand }
					divide_variable = { life_goods_price = life_goods_supply }
				}
				add_to_variable = { life_goods_price = life_goods_prev_price_temp }
				divide_variable = { life_goods_price = 3 }
			}
			else_if = {
				limit = {
					check_variable = { life_goods_demand > 0 }
				}
				multiply_variable = { life_goods_price = 1.2 }
			}
			if = {
				limit = {
					check_variable = { life_goods_price < 0.01 }
				}
				set_variable = { life_goods_price = 0.01 }
			}
			else_if = {
				limit = {
					set_temp_variable = { price_temp = life_goods_base_price }
					multiply_temp_variable = { price_temp = 10 }
					check_variable = { life_goods_price > price_temp }
				}
				set_variable = { life_goods_price = price_temp }
			}

		#everyday_goods
			set_temp_variable = { everyday_goods_prev_price_temp = everyday_goods_price }
			multiply_temp_variable = { everyday_goods_prev_price_temp = 2 }
			if = {
				limit = {
					check_variable = { everyday_goods_supply > 0 }
				}
				if = {
					limit = {
						check_variable = { everyday_goods_supply < 1 }
					}
					divide_variable = { everyday_goods_price = everyday_goods_supply }
					multiply_variable = { everyday_goods_price = everyday_goods_demand }
				}
				else = {
					multiply_variable = { everyday_goods_price = everyday_goods_demand }
					divide_variable = { everyday_goods_price = everyday_goods_supply }
				}
				add_to_variable = { everyday_goods_price = everyday_goods_prev_price_temp }
				divide_variable = { everyday_goods_price = 3 }
			}
			else_if = {
				limit = {
					check_variable = { everyday_goods_demand > 0 }
				}
				multiply_variable = { everyday_goods_price = 1.2 }
			}
			if = {
				limit = {
					check_variable = { everyday_goods_price < 0.01 }
				}
				set_variable = { everyday_goods_price = 0.01 }
			}
			else_if = {
				limit = {
					set_temp_variable = { price_temp = everyday_goods_base_price }
					multiply_temp_variable = { price_temp = 10 }
					check_variable = { everyday_goods_price > price_temp }
				}
				set_variable = { everyday_goods_price = price_temp }
			}

		#luxury_goods
			set_temp_variable = { luxury_goods_prev_price_temp = luxury_goods_price }
			multiply_temp_variable = { luxury_goods_prev_price_temp = 2 }
			if = {
				limit = {
					check_variable = { luxury_goods_supply > 0 }
				}
				if = {
					limit = {
						check_variable = { luxury_goods_supply < 1 }
					}
					divide_variable = { luxury_goods_price = luxury_goods_supply }
					multiply_variable = { luxury_goods_price = luxury_goods_demand }
				}
				else = {
					multiply_variable = { luxury_goods_price = luxury_goods_demand }
					divide_variable = { luxury_goods_price = luxury_goods_supply }
				}
				add_to_variable = { luxury_goods_price = luxury_goods_prev_price_temp }
				divide_variable = { luxury_goods_price = 3 }
			}
			else_if = {
				limit = {
					check_variable = { luxury_goods_demand > 0 }
				}
				multiply_variable = { luxury_goods_price = 1.2 }
			}
			if = {
				limit = {
					check_variable = { luxury_goods_price < 0.01 }
				}
				set_variable = { luxury_goods_price = 0.01 }
			}
			else_if = {
				limit = {
					set_temp_variable = { price_temp = luxury_goods_base_price }
					multiply_temp_variable = { price_temp = 10 }
					check_variable = { luxury_goods_price > price_temp }
				}
				set_variable = { luxury_goods_price = price_temp }
			}

		#services
			set_temp_variable = { services_prev_price_temp = services_price }
			multiply_temp_variable = { services_prev_price_temp = 2 }
			if = {
				limit = {
					check_variable = { services_supply > 0 }
				}
				if = {
					limit = {
						check_variable = { services_supply < 1 }
					}
					divide_variable = { services_price = services_supply }
					multiply_variable = { services_price = services_demand }
				}
				else = {
					multiply_variable = { services_price = services_demand }
					divide_variable = { services_price = services_supply }
				}
				add_to_variable = { services_price = services_prev_price_temp }
				divide_variable = { services_price = 3 }
			}
			else_if = {
				limit = {
					check_variable = { services_demand > 0 }
				}
				multiply_variable = { services_price = 1.2 }
			}
			if = {
				limit = {
					check_variable = { services_price < 0.01 }
				}
				set_variable = { services_price = 0.01 }
			}
			else_if = {
				limit = {
					set_temp_variable = { price_temp = services_base_price }
					multiply_temp_variable = { price_temp = 10 }
					check_variable = { services_price > price_temp }
				}
				set_variable = { services_price = price_temp }
			}

		#raw_goods
			set_temp_variable = { raw_goods_prev_price_temp = raw_goods_price }
			multiply_temp_variable = { raw_goods_prev_price_temp = 2 }
			if = {
				limit = {
					check_variable = { raw_goods_supply > 0 }
				}
				if = {
					limit = {
						check_variable = { raw_goods_supply < 1 }
					}
					divide_variable = { raw_goods_price = raw_goods_supply }
					multiply_variable = { raw_goods_price = raw_goods_demand }
				}
				else = {
					multiply_variable = { raw_goods_price = raw_goods_demand }
					divide_variable = { raw_goods_price = raw_goods_supply }
				}
				add_to_variable = { raw_goods_price = raw_goods_prev_price_temp }
				divide_variable = { raw_goods_price = 3 }
			}
			else_if = {
				limit = {
					check_variable = { raw_goods_demand > 0 }
				}
				multiply_variable = { raw_goods_price = 1.2 }
			}
			if = {
				limit = {
					check_variable = { raw_goods_price < 0.01 }
				}
				set_variable = { raw_goods_price = 0.01 }
			}
			else_if = {
				limit = {
					set_temp_variable = { price_temp = raw_goods_base_price }
					multiply_temp_variable = { price_temp = 10 }
					check_variable = { raw_goods_price > price_temp }
				}
				set_variable = { raw_goods_price = price_temp }
			}

		#industrial_goods
			set_temp_variable = { industrial_goods_prev_price_temp = industrial_goods_price }
			multiply_temp_variable = { industrial_goods_prev_price_temp = 2 }
			if = {
				limit = {
					check_variable = { industrial_goods_supply > 0 }
				}
				if = {
					limit = {
						check_variable = { industrial_goods_supply < 1 }
					}
					divide_variable = { industrial_goods_price = industrial_goods_supply }
					multiply_variable = { industrial_goods_price = industrial_goods_demand }
				}
				else = {
					multiply_variable = { industrial_goods_price = industrial_goods_demand }
					divide_variable = { industrial_goods_price = industrial_goods_supply }
				}
				add_to_variable = { industrial_goods_price = industrial_goods_prev_price_temp }
				divide_variable = { industrial_goods_price = 3 }
			}
			else_if = {
				limit = {
					check_variable = { industrial_goods_demand > 0 }
				}
				multiply_variable = { industrial_goods_price = 1.2 }
			}
			if = {
				limit = {
					check_variable = { industrial_goods_price < 0.01 }
				}
				set_variable = { industrial_goods_price = 0.01 }
			}
			else_if = {
				limit = {
					set_temp_variable = { price_temp = industrial_goods_base_price }
					multiply_temp_variable = { price_temp = 10 }
					check_variable = { industrial_goods_price > price_temp }
				}
				set_variable = { industrial_goods_price = price_temp }
			}
	}
	calculate_base_priced = {
		if = {
			limit = {
				check_variable = { everyday_goods_supply > everyday_goods_demand }
			}
			#set_temp_variable = { everyday_goods_ff = 1 }
			#subtract_from_variable = { everyday_goods_base_price = 0.001 }
			#divide_variable = { everyday_goods_base_price = 1.01 }
			set_temp_variable = { demand_temp = everyday_goods_demand }
			if = {
				limit = {
					multiply_temp_variable = { demand_temp = 1.1 }
					check_variable = { everyday_goods_supply > demand_temp }
				}
				subtract_from_variable = { everyday_goods_base_price = 0.001 }
				divide_variable = { everyday_goods_base_price = 1.01 }
				if = {
					limit = {
						multiply_temp_variable = { demand_temp = 1.5 }
						check_variable = { everyday_goods_supply > demand_temp }
					}
					subtract_from_variable = { everyday_goods_base_price = 0.001 }
					divide_variable = { everyday_goods_base_price = 1.01 }
					if = {
						limit = {
							multiply_temp_variable = { demand_temp = 1.5 }
							check_variable = { everyday_goods_supply > demand_temp }
						}
						subtract_from_variable = { everyday_goods_base_price = 0.001 }
						divide_variable = { everyday_goods_base_price = 1.01 }
						if = {
							limit = {
								multiply_temp_variable = { demand_temp = 1.5 }
								check_variable = { everyday_goods_supply > demand_temp }
							}
							subtract_from_variable = { everyday_goods_base_price = 0.001 }
							divide_variable = { everyday_goods_base_price = 1.01 }
						}
					}
				}
			}
			if = {
				limit = {
					#set_temp_variable = { base_price_catch = global_everyday_goods_base_price }
					#divide_temp_variable = { base_price_catch = 100 }
					check_variable = { everyday_goods_base_price < 0.01 }
				}
				set_variable = { everyday_goods_base_price = 0.01 }
			}
		}
		if = {
			limit = {
				check_variable = { everyday_goods_demand > everyday_goods_supply }
			}
			#add_to_variable = { everyday_goods_base_price = 0.001 }
			#multiply_variable = { everyday_goods_base_price = 1.01 }
			set_temp_variable = { supply_temp = everyday_goods_supply }
			if = {
				limit = {
					multiply_temp_variable = { supply_temp = 1.1 }
					check_variable = { everyday_goods_demand > supply_temp }
				}
				add_to_variable = { everyday_goods_base_price = 0.001 }
				multiply_variable = { everyday_goods_base_price = 1.01 }
				if = {
					limit = {
						multiply_temp_variable = { supply_temp = 1.5 }
						check_variable = { everyday_goods_demand > supply_temp }
					}
					add_to_variable = { everyday_goods_base_price = 0.001 }
					multiply_variable = { everyday_goods_base_price = 1.01 }
					if = {
						limit = {
							multiply_temp_variable = { supply_temp = 1.5 }
							check_variable = { everyday_goods_demand > supply_temp }
						}
						add_to_variable = { everyday_goods_base_price = 0.001 }
						multiply_variable = { everyday_goods_base_price = 1.01 }
						if = {
							limit = {
								multiply_temp_variable = { supply_temp = 1.5 }
								check_variable = { everyday_goods_demand > supply_temp }
							}
							add_to_variable = { everyday_goods_base_price = 0.001 }
							multiply_variable = { everyday_goods_base_price = 1.01 }
						}
					}
				}
			}
			if = {
				#INFLATION CATCH
				#TODO - Change global scope to national scope
				limit = {
					set_temp_variable = { base_price_catch = global.everyday_goods_base_price }
					multiply_temp_variable = { base_price_catch = 100 }
					check_variable = { everyday_goods_base_price > base_price_catch }
				}
				set_variable = { everyday_goods_base_price = base_price_catch }
			}
		}
	}
	calculate_base_price = {

		#life_goods
			if = {
				limit = {
					check_variable = { life_goods_base_price > life_goods_price }
				}
				#set_temp_variable = { life_goods_ff = 1 }
				#subtract_from_variable = { life_goods_base_price = 0.001 }
				#divide_variable = { life_goods_base_price = 1.01 }
				set_temp_variable = { demand_temp = life_goods_price }
				if = {
					limit = {
						multiply_temp_variable = { demand_temp = 1.02 }
						check_variable = { life_goods_base_price > demand_temp }
					}
					subtract_from_variable = { life_goods_base_price = 0.001 }
					divide_variable = { life_goods_base_price = 1.01 }
				}
				if = {
					limit = {
						#set_temp_variable = { base_price_catch = global_life_goods_base_price }
						#divide_temp_variable = { base_price_catch = 100 }
						check_variable = { life_goods_base_price < 0.01 }
					}
					set_variable = { life_goods_base_price = 0.01 }
				}
			}
			else_if = {
				limit = {
					check_variable = { life_goods_price > life_goods_base_price }
				}
				#add_to_variable = { life_goods_base_price = 0.001 }
				#multiply_variable = { life_goods_base_price = 1.01 }
				set_temp_variable = { supply_temp = life_goods_base_price }
				if = {
					limit = {
						multiply_temp_variable = { supply_temp = 1.02 }
						check_variable = { life_goods_price > supply_temp }
					}
					add_to_variable = { life_goods_base_price = 0.001 }
					multiply_variable = { life_goods_base_price = 1.01 }
				}
				if = {
					#INFLATION CATCH
					#TODO - Change global scope to national scope
					limit = {
						set_temp_variable = { base_price_catch = global.life_goods_base_price }
						multiply_temp_variable = { base_price_catch = 100 }
						check_variable = { life_goods_base_price > base_price_catch }
					}
					set_variable = { life_goods_base_price = base_price_catch }
				}
			}

		#everyday_goods
			if = {
				limit = {
					check_variable = { everyday_goods_base_price > everyday_goods_price }
				}
				#set_temp_variable = { everyday_goods_ff = 1 }
				#subtract_from_variable = { everyday_goods_base_price = 0.001 }
				#divide_variable = { everyday_goods_base_price = 1.01 }
				set_temp_variable = { demand_temp = everyday_goods_price }
				if = {
					limit = {
						multiply_temp_variable = { demand_temp = 1.02 }
						check_variable = { everyday_goods_base_price > demand_temp }
					}
					subtract_from_variable = { everyday_goods_base_price = 0.001 }
					divide_variable = { everyday_goods_base_price = 1.01 }
				}
				if = {
					limit = {
						#set_temp_variable = { base_price_catch = global_everyday_goods_base_price }
						#divide_temp_variable = { base_price_catch = 100 }
						check_variable = { everyday_goods_base_price < 0.01 }
					}
					set_variable = { everyday_goods_base_price = 0.01 }
				}
			}
			else_if = {
				limit = {
					check_variable = { everyday_goods_price > everyday_goods_base_price }
				}
				#add_to_variable = { everyday_goods_base_price = 0.001 }
				#multiply_variable = { everyday_goods_base_price = 1.01 }
				set_temp_variable = { supply_temp = everyday_goods_base_price }
				if = {
					limit = {
						multiply_temp_variable = { supply_temp = 1.02 }
						check_variable = { everyday_goods_price > supply_temp }
					}
					add_to_variable = { everyday_goods_base_price = 0.001 }
					multiply_variable = { everyday_goods_base_price = 1.01 }
				}
				if = {
					#INFLATION CATCH
					#TODO - Change global scope to national scope
					limit = {
						set_temp_variable = { base_price_catch = global.everyday_goods_base_price }
						multiply_temp_variable = { base_price_catch = 100 }
						check_variable = { everyday_goods_base_price > base_price_catch }
					}
					set_variable = { everyday_goods_base_price = base_price_catch }
				}
			}

		#luxury_goods
			if = {
				limit = {
					check_variable = { luxury_goods_base_price > luxury_goods_price }
				}
				#set_temp_variable = { luxury_goods_ff = 1 }
				#subtract_from_variable = { luxury_goods_base_price = 0.001 }
				#divide_variable = { luxury_goods_base_price = 1.01 }
				set_temp_variable = { demand_temp = luxury_goods_price }
				if = {
					limit = {
						multiply_temp_variable = { demand_temp = 1.02 }
						check_variable = { luxury_goods_base_price > demand_temp }
					}
					subtract_from_variable = { luxury_goods_base_price = 0.001 }
					divide_variable = { luxury_goods_base_price = 1.01 }
				}
				if = {
					limit = {
						#set_temp_variable = { base_price_catch = global_luxury_goods_base_price }
						#divide_temp_variable = { base_price_catch = 100 }
						check_variable = { luxury_goods_base_price < 0.01 }
					}
					set_variable = { luxury_goods_base_price = 0.01 }
				}
			}
			else_if = {
				limit = {
					check_variable = { luxury_goods_price > luxury_goods_base_price }
				}
				#add_to_variable = { luxury_goods_base_price = 0.001 }
				#multiply_variable = { luxury_goods_base_price = 1.01 }
				set_temp_variable = { supply_temp = luxury_goods_base_price }
				if = {
					limit = {
						multiply_temp_variable = { supply_temp = 1.02 }
						check_variable = { luxury_goods_price > supply_temp }
					}
					add_to_variable = { luxury_goods_base_price = 0.001 }
					multiply_variable = { luxury_goods_base_price = 1.01 }
				}
				if = {
					#INFLATION CATCH
					#TODO - Change global scope to national scope
					limit = {
						set_temp_variable = { base_price_catch = global.luxury_goods_base_price }
						multiply_temp_variable = { base_price_catch = 100 }
						check_variable = { luxury_goods_base_price > base_price_catch }
					}
					set_variable = { luxury_goods_base_price = base_price_catch }
				}
			}

		#services
			if = {
				limit = {
					check_variable = { services_base_price > services_price }
				}
				#set_temp_variable = { services_ff = 1 }
				#subtract_from_variable = { services_base_price = 0.001 }
				#divide_variable = { services_base_price = 1.01 }
				set_temp_variable = { demand_temp = services_price }
				if = {
					limit = {
						multiply_temp_variable = { demand_temp = 1.02 }
						check_variable = { services_base_price > demand_temp }
					}
					subtract_from_variable = { services_base_price = 0.001 }
					divide_variable = { services_base_price = 1.01 }
				}
				if = {
					limit = {
						#set_temp_variable = { base_price_catch = global_services_base_price }
						#divide_temp_variable = { base_price_catch = 100 }
						check_variable = { services_base_price < 0.01 }
					}
					set_variable = { services_base_price = 0.01 }
				}
			}
			else_if = {
				limit = {
					check_variable = { services_price > services_base_price }
				}
				#add_to_variable = { services_base_price = 0.001 }
				#multiply_variable = { services_base_price = 1.01 }
				set_temp_variable = { supply_temp = services_base_price }
				if = {
					limit = {
						multiply_temp_variable = { supply_temp = 1.02 }
						check_variable = { services_price > supply_temp }
					}
					add_to_variable = { services_base_price = 0.001 }
					multiply_variable = { services_base_price = 1.01 }
				}
				if = {
					#INFLATION CATCH
					#TODO - Change global scope to national scope
					limit = {
						set_temp_variable = { base_price_catch = global.services_base_price }
						multiply_temp_variable = { base_price_catch = 100 }
						check_variable = { services_base_price > base_price_catch }
					}
					set_variable = { services_base_price = base_price_catch }
				}
			}

		#raw_goods
			if = {
				limit = {
					check_variable = { raw_goods_base_price > raw_goods_price }
				}
				#set_temp_variable = { raw_goods_ff = 1 }
				#subtract_from_variable = { raw_goods_base_price = 0.001 }
				#divide_variable = { raw_goods_base_price = 1.01 }
				set_temp_variable = { demand_temp = raw_goods_price }
				if = {
					limit = {
						multiply_temp_variable = { demand_temp = 1.02 }
						check_variable = { raw_goods_base_price > demand_temp }
					}
					subtract_from_variable = { raw_goods_base_price = 0.001 }
					divide_variable = { raw_goods_base_price = 1.01 }
				}
				if = {
					limit = {
						#set_temp_variable = { base_price_catch = global_raw_goods_base_price }
						#divide_temp_variable = { base_price_catch = 100 }
						check_variable = { raw_goods_base_price < 0.01 }
					}
					set_variable = { raw_goods_base_price = 0.01 }
				}
			}
			else_if = {
				limit = {
					check_variable = { raw_goods_price > raw_goods_base_price }
				}
				#add_to_variable = { raw_goods_base_price = 0.001 }
				#multiply_variable = { raw_goods_base_price = 1.01 }
				set_temp_variable = { supply_temp = raw_goods_base_price }
				if = {
					limit = {
						multiply_temp_variable = { supply_temp = 1.02 }
						check_variable = { raw_goods_price > supply_temp }
					}
					add_to_variable = { raw_goods_base_price = 0.001 }
					multiply_variable = { raw_goods_base_price = 1.01 }
				}
				if = {
					#INFLATION CATCH
					#TODO - Change global scope to national scope
					limit = {
						set_temp_variable = { base_price_catch = global.raw_goods_base_price }
						multiply_temp_variable = { base_price_catch = 100 }
						check_variable = { raw_goods_base_price > base_price_catch }
					}
					set_variable = { raw_goods_base_price = base_price_catch }
				}
			}

		#industrial_goods
			if = {
				limit = {
					check_variable = { industrial_goods_base_price > industrial_goods_price }
				}
				#set_temp_variable = { industrial_goods_ff = 1 }
				#subtract_from_variable = { industrial_goods_base_price = 0.001 }
				#divide_variable = { industrial_goods_base_price = 1.01 }
				set_temp_variable = { demand_temp = industrial_goods_price }
				if = {
					limit = {
						multiply_temp_variable = { demand_temp = 1.02 }
						check_variable = { industrial_goods_base_price > demand_temp }
					}
					subtract_from_variable = { industrial_goods_base_price = 0.001 }
					divide_variable = { industrial_goods_base_price = 1.01 }
				}
				if = {
					limit = {
						#set_temp_variable = { base_price_catch = global_industrial_goods_base_price }
						#divide_temp_variable = { base_price_catch = 100 }
						check_variable = { industrial_goods_base_price < 0.01 }
					}
					set_variable = { industrial_goods_base_price = 0.01 }
				}
			}
			else_if = {
				limit = {
					check_variable = { industrial_goods_price > industrial_goods_base_price }
				}
				#add_to_variable = { industrial_goods_base_price = 0.001 }
				#multiply_variable = { industrial_goods_base_price = 1.01 }
				set_temp_variable = { supply_temp = industrial_goods_base_price }
				if = {
					limit = {
						multiply_temp_variable = { supply_temp = 1.02 }
						check_variable = { industrial_goods_price > supply_temp }
					}
					add_to_variable = { industrial_goods_base_price = 0.001 }
					multiply_variable = { industrial_goods_base_price = 1.01 }
				}
				if = {
					#INFLATION CATCH
					#TODO - Change global scope to national scope
					limit = {
						set_temp_variable = { base_price_catch = global.industrial_goods_base_price }
						multiply_temp_variable = { base_price_catch = 100 }
						check_variable = { industrial_goods_base_price > base_price_catch }
					}
					set_variable = { industrial_goods_base_price = base_price_catch }
				}
			}

	}
#

#Modifiers
	update_modifiers_state_effects = {
		#State Scope
		#Updates the effects for all the modifiers that apply to the state level
		
		#NOTE: These are not the modifiers themselves. These are the effects that the modifiers have
		#Set to 0
			#General Modifiers
				set_variable = { build_cost_effect = 0 }

				set_variable = { transport_cost_effect = 0 }
				set_variable = { shipping_cost_effect = 0 }

			#RGO Modifiers
				set_variable = { rgo_output_effect = 0 }
				set_variable = { raw_goods_output_effect = 0 }
				set_variable = { life_goods_output_effect = 0 }
				set_variable = { valuable_goods_output_effect = 0 }
			#
			#Factory Modifiers
				set_variable = { factory_size_effect = 0 }
				set_variable = { factory_build_cost_effect = 0 }

				set_variable = { factory_goods_output_effect = 0 }
				set_variable = { factory_everyday_goods_output_effect = 0 }
				set_variable = { factory_luxury_goods_output_effect = 0 }
				set_variable = { factory_industrial_goods_output_effect = 0 }
				
				set_variable = { factory_throughput_effect = 0 }
				set_variable = { factory_everyday_goods_throughput_effect = 0 }
				set_variable = { factory_luxury_goods_throughput_effect = 0 }
				set_variable = { factory_industrial_goods_throughput_effect = 0 }
				
				set_variable = { factory_raw_goods_input_effect = 0 }
				set_variable = { factory_everyday_goods_raw_goods_input_effect = 0 }
				set_variable = { factory_luxury_goods_raw_goods_input_effect = 0 }
				set_variable = { factory_industrial_goods_raw_goods_input_effect = 0 }

				set_variable = { factory_industrial_goods_maintenance_effect = 0 }
			#
			#Service Modifiers
				set_variable = { services_output_effect = 0 }
			#
			#Infrastructure Modifiers
				set_variable = { infrastructure_build_cost_effect = 0 }
				set_variable = { infrastructure_maintenance_cost_effect = 0 }
				set_variable = { infrastructure_transport_cost_reduction_effect = 0 }
				set_variable = { infrastructure_shipping_cost_reduction_effect = 0 }
			#
		#
		#State Level Modifiers
			#General Modifiers
				#Infrastructure
				add_to_variable = { build_cost_effect = infrastructure_build_cost_modifier }
				add_to_variable = { transport_cost_effect = infrastructure_transport_cost_modifier }
				add_to_variable = { shipping_cost_effect = infrastructure_shipping_cost_modifier }
			#
			#RGO Modifiers
				#Pops
				add_to_variable = { rgo_output_effect = aristocrats_rgo_output_modifier }

				#Infrastructure
				add_to_variable = { rgo_output_effect = infrastructure_rgo_output_modifier }
			#
			#Factory Modifiers
				#Pops
				add_to_variable = { factory_raw_goods_input_effect = capitalists_factory_raw_goods_input_modifier }

				#Infrastructure
				add_to_variable = { factory_goods_throughput_effect = infrastructure_factory_throughput_modifier }
			#
			#Services Modifiers
				#Pops
				add_to_variable = { services_output_effect = capitalists_services_output_modifier }

			#
			#Infrastructure Modifiers

			#
		#
		#Country Level Modifiers
			
		#
		#Tech
			controller = {
				#General Modifiers
				add_to_variable = { PREV.build_cost_effect = tech_build_cost }

				add_to_variable = { PREV.transport_cost_effect = tech_transport_cost }

				#RGO modifiers
				add_to_variable = { PREV.rgo_output_effect = tech_rgo_output }
				add_to_variable = { PREV.raw_goods_output_effect = tech_raw_goods_output }
				add_to_variable = { PREV.life_goods_output_effect = tech_life_goods_output }
				add_to_variable = { PREV.valuable_goods_output_effect = tech_valuable_goods_output }

				#Factory Modifiers
				add_to_variable = { PREV.factory_size_effect = tech_factory_size }
				add_to_variable = { PREV.factory_build_cost_effect = tech_factory_build_cost }

				add_to_variable = { PREV.factory_goods_output_effect = tech_factory_goods_output }
				add_to_variable = { PREV.factory_everyday_goods_effect = tech_factory_everyday_goods_output }
				add_to_variable = { PREV.factory_luxury_goods_effect = tech_factory_luxury_goods_output }
				add_to_variable = { PREV.factory_industrial_goods_output_effect = tech_factory_industrial_goods_output }

				add_to_variable = { PREV.factory_throughput_effect = tech_factory_throughput }
				add_to_variable = { PREV.factory_everyday_goods_throughput_effect = tech_factory_everyday_goods_throughput }
				add_to_variable = { PREV.factory_luxury_goods_throughput_effect = tech_factory_luxury_goods_throughput }
				add_to_variable = { PREV.factory_industrial_goods_throughput_effect = tech_factory_industrial_goods_throughput }

				add_to_variable = { PREV.factory_raw_goods_input_effect = tech_factory_raw_goods_input }
				add_to_variable = { PREV.factory_everyday_goods_raw_goods_input_effect = tech_factory_everyday_goods_raw_goods_input }
				add_to_variable = { PREV.factory_luxury_goods_raw_goods_input_effect = tech_factory_luxury_goods_raw_goods_input }
				add_to_variable = { PREV.factory_industrial_goods_raw_goods_input_effect = tech_factory_industrial_goods_raw_goods_input }
				
				add_to_variable = { PREV.factory_industrial_goods_maintenance_effect = tech_factory_industrial_goods_maintenance }

				#Infrastructure Modifiers
				add_to_variable = { PREV.infrastructure_build_cost_effect = tech_infrastructure_build_cost }
				add_to_variable = { PREV.infrastructure_maintenance_cost_effect = tech_infrastructure_maintenance_cost }
				add_to_variable = { PREV.infrastructure_transport_cost_reduction_effect = tech_infrastructure_transport_cost_reduction }
				add_to_variable = { PREV.infrastructure_shipping_cost_reduction_effect = tech_infrastructure_shipping_cost_reduction }
			}
		#
		#Resolve and Clear unneeded vars
			add_to_variable = { factory_build_cost_effect = build_cost_effect }
			add_to_variable = { infrastructure_build_cost_effect = build_cost_effect }
			clear_variable = build_cost_effect

			add_to_variable = { raw_goods_output_effect = rgo_output_effect }
			add_to_variable = { life_goods_output_effect = rgo_output_effect }
			add_to_variable = { valuable_goods_output_effect = rgo_output_effect }
			clear_variable = rgo_output_effect

			add_to_variable = { factory_everyday_goods_output_effect = factory_goods_output_effect }
			add_to_variable = { factory_luxury_goods_output_effect = factory_goods_output_effect }
			add_to_variable = { factory_industrial_goods_output_effect = factory_goods_output_effect }
			clear_variable = factory_goods_output_effect

			add_to_variable = { factory_everyday_goods_throughput_effect = factory_throughput_effect }
			add_to_variable = { factory_luxury_goods_throughput_effect = factory_throughput_effect }
			add_to_variable = { factory_industrial_goods_throughput_effect = factory_throughput_effect }
			clear_variable = factory_throughput_effect

			add_to_variable = { factory_everyday_goods_raw_goods_input_effect = factory_raw_goods_input_effect }
			add_to_variable = { factory_luxury_goods_raw_goods_input_effect = factory_raw_goods_input_effect }
			add_to_variable = { factory_industrial_goods_raw_goods_input_effect = factory_raw_goods_input_effect }
			clear_variable = factory_raw_goods_input_effect
		#
	}
#

#Tech
	calibrate_tech_bonuses = {
		#This will be done on startup and after startup. Sets all bonuses from tech to 0 then checks all techs and adds their bonuses
		
		set_variable = { infrastructure_max_level = 6 } #Flat Value
		
		#General Modifiers
		set_variable = { tech_build_cost = 0 } #Modifier, Negative is good

		set_variable = { tech_transport_cost = 0 } #Modifier, Negative is good

		#RGO modifiers
		set_variable = { tech_rgo_output = 0 } #Modifier, Positive is good
		set_variable = { tech_raw_goods_output = 0 } #Modifier, Positive is good
		set_variable = { tech_life_goods_output = 0 } #Modifier, Positive is good
		set_variable = { tech_valuable_goods_output = 0 } #Modifier, Positive is good

		#Factory Modifiers
		set_variable = { tech_factory_size = 0 } #Modifier, Positive is good
		set_variable = { tech_factory_build_cost = 0 } #Modifier, Negative is good

		set_variable = { tech_factory_goods_output = 0 } #Modifier, Positive is good
		set_variable = { tech_factory_everyday_goods_output = 0 } #Modifier, Positive is good
		set_variable = { tech_factory_luxury_goods_output = 0 } #Modifier, Positive is good
		set_variable = { tech_factory_industrial_goods_output = 0 } #Modifier, Positive is good

		set_variable = { tech_factory_throughput = 0 } #Modifier, Positive is good
		set_variable = { tech_factory_everyday_goods_throughput = 0 } #Modifier, Positive is good
		set_variable = { tech_factory_luxury_goods_throughput = 0 } #Modifier, Positive is good
		set_variable = { tech_factory_industrial_goods_throughput = 0 } #Modifier, Positive is good

		set_variable = { tech_factory_raw_goods_input = 0 } #Modifier, Negative is good
		set_variable = { tech_factory_everyday_goods_raw_goods_input = 0 } #Modifier, Negative is good
		set_variable = { tech_factory_luxury_goods_raw_goods_input = 0 } #Modifier, Negative is good
		set_variable = { tech_factory_industrial_goods_raw_goods_input = 0 } #Modifier, Negative is good
		
		set_variable = { tech_factory_industrial_goods_maintenance = 0 } #Modifier, Negative is good

		#Infrastructure Modifiers
		set_variable = { tech_infrastructure_build_cost = 0 } #Modifier, Negative is good
		set_variable = { tech_infrastructure_maintenance_cost = 0 } #Modifier, Negative is good
		set_variable = { tech_infrastructure_transport_cost_reduction = 0 } #Modifier, Positive is good
		set_variable = { tech_infrastructure_shipping_cost_reduction = 0 } #Modifier, Positive is good



		#Mechanical Engineering
			#Railroad
				if = {
					limit = {
						has_tech = iron_railways
					}
					#Enables Level 9 Infra
					#-20% Infra Build Speed
					#+20% Infra Build Cost
					set_variable = { infrastructure_max_level = 9 }
					add_to_variable = { infrastructure_build_cost = 0.2 }
					
					if = {
						limit = {
							has_tech = steel_railways
						}
 						#Enables Level 10 Infra
						#-10% Infra Build Speed
						#+10% Infra Build Cost
						set_variable = { infrastructure_max_level = 10 }
						add_to_variable = { infrastructure_build_cost = 0.10 }

						if = {
							limit = {
								has_tech = standardized_gauge
							}
							#-5% Infrastructure Maintenance Cost
							#+25% Infrastructure Transport Cost Reduction
							#Adds an idea that lasts for 10 years for standardizing rail guage: +20% Infrastructure Maintenance Cost, -25% Infrastructure Transport Cost Reduction
							add_to_variable = { tech_infrastructure_maintenance_cost = -0.05 }
							add_to_variable = { tech_infrastructure_transport_cost_reduction = 0.25 }
						}
					}
				}
			#
			#Locomotives
				if = {
					limit = {
						has_tech = steam_locomotive
					}
					#+10% Infrastructure Transport Cost Reduction
					add_to_variable = { tech_infrastructure_transport_cost_reduction = 0.10 }
					 
					if = {
						limit = {
							has_tech = early_electric_trains
						}
						#+5% Infrastructure Transport Cost Reduction
						#-2.5% Infrastructure Maintenance Cost
						add_to_variable = { tech_infrastructure_transport_cost_reduction = 0.05 }
						add_to_variable = { tech_infrastructure_maintenance_cost = -0.025 }
						
					}
					if = {
						limit = {
							has_tech = steam_locomotive_2
						}
						#+10% Infrastructure Transport Cost Reduction
						add_to_variable = { tech_infrastructure_transport_cost_reduction = 0.10 }
						
						if = {
							limit = {
								has_tech = traction_engine
							}
							#-5% Transport Cost
							add_to_variable = { tech_transport_cost = -0.05 }

						}
						if = {
							limit = {
								has_tech = steam_locomotive_3
							}
							#+10% Infrastructure Transport Cost Reduction
							add_to_variable = { tech_infrastructure_transport_cost_reduction = 0.10 }
							
							if = {
								limit = {
									has_tech = steam_locomotive_4
								}
								#+10% Infrastructure Transport Cost Reduction
								add_to_variable = { tech_infrastructure_transport_cost_reduction = 0.10 }
								
							}
						}
					}
				}
			#
			#Engines
				if = {
					limit = {
						has_tech = steam_engine
					}
					#+10% Resource Gain Efficiency
					#+15% Raw Goods Output
					#+20% Factory Throughput
					#+50% Factory Industrial Goods Maintenance
					add_to_variable = { tech_raw_goods_output = 0.15 }
					add_to_variable = { tech_factory_throughput = 0.20 }
					add_to_variable = { tech_factory_industrial_goods_maintenance = 0.50 }

					if = {
						limit = {
							has_tech = high_speed_steam_engine #High Pressure Steam Engine
						}
						#+10% Resource Gain Efficiency
						#+15% Raw Goods Output
						#-4% Factory Raw Goods Input
						#-10% Factory Industrial Goods Maintenance 
						add_to_variable = { tech_raw_goods_output = 0.15 }
						add_to_variable = { tech_factory_throughput = 0.08 }
						subtract_from_variable = { tech_factory_raw_goods_input = -0.04 }
						subtract_from_variable = { tech_factory_industrial_goods_maintenance = -0.10 }

						if = {
							limit = {
								has_tech = porter_allen_engine
							}
							#+5% Resource Gain Efficiency
							#+10% Raw Goods Output
							add_to_variable = { tech_raw_goods_output = 0.10 }
							add_to_variable = { tech_factory_throughput = 0.04 }
						}
					}
				}
			#
			#Industrial Production

				if = {
					limit = {
						has_tech = manufactories
					}
					#Enables Level 6 Mils
					#Enables Level 6 Civs
					#+5% Production Efficiency Cap
					#+10% Factory Throughput
					#+10% Factory Industrial Goods Maintenance
					add_to_variable = { tech_factory_throughput = 0.10 }
					add_to_variable = { tech_factory_industrial_goods_maintenance = 0.10 }

					if = {
						limit = {
							has_tech = factory_industry_1
						}
						#Enables Level 8 Mils
						#Enables Level 8 Civs
						#+5% Max Factories in a State
						#+8% Factory Throughput
						#+5% Factory Size
						#+5% Factory Build Cost
						#+12% Factory Industrial Goods Maintenance
						add_to_variable = { tech_factory_throughput = 0.08 }
						add_to_variable = { tech_factory_size = 0.10 }
						add_to_variable = { tech_factory_build_cost = 0.10 }
						add_to_variable = { tech_factory_industrial_goods_maintenance = 0.12 }

						if = {
							limit = {
								has_tech = factory_industry_2
							}
							#Enables Level 9 Mils
							#Enables Level 9 Civs
							#+4% Factory Throughput
							#+5% Max Factories in a State
							#+5% Factory Size
							#+5% Factory Build Cost
							#+8% Factory Industrial Goods Maintenance
							add_to_variable = { tech_factory_throughput = 0.04 }
							add_to_variable = { tech_factory_size = 0.05 }
							add_to_variable = { tech_factory_build_cost = 0.05 }
							add_to_variable = { tech_factory_industrial_goods_maintenance = 0.08 }
							
							if = {
								limit = {
									has_tech = factory_industry_3
								}
								#Enables Level 10 Mils
								#Enables Level 10 Civs
								#+4% Factory Throughput
								#+5% Max Factories in a State
								#+5% Factory Size
								#+5% Factory Build Cost
								#+8% Factory Industrial Goods Maintenance
								add_to_variable = { tech_factory_throughput = 0.04 }
								add_to_variable = { tech_factory_size = 0.05 }
								add_to_variable = { tech_factory_build_cost = 0.05 }
								add_to_variable = { tech_factory_industrial_goods_maintenance = 0.08 }
								
								if = {
									limit = {
										has_tech = factory_industry_4
									}
									#Enables Level 11 Mils
									#Enables Level 11 Civs
									#+4% Factory Throughput
									#+5% Max Factories in a State
									#+5% Factory Size
									#+5% Factory Build Cost
									#+8% Factory Industrial Goods Maintenance
									add_to_variable = { tech_factory_throughput = 0.04 }
									add_to_variable = { tech_factory_size = 0.05 }
									add_to_variable = { tech_factory_build_cost = 0.05 }
									add_to_variable = { tech_factory_industrial_goods_maintenance = 0.08 }
									
									if = {
										limit = {
											has_tech = factory_industry_5
										}
										#Enables Level 12 Mils
										#Enables Level 12 Civs
										#+4% Factory Throughput
										#+5% Max Factories in a State
										#+5% Factory Size
										#+5% Factory Build Cost
										#+8% Factory Industrial Goods Maintenance
										add_to_variable = { tech_factory_throughput = 0.04 }
										add_to_variable = { tech_factory_size = 0.05 }
										add_to_variable = { tech_factory_build_cost = 0.05 }
										add_to_variable = { tech_factory_industrial_goods_maintenance = 0.08 }
										
										if = {
											limit = {
												has_tech = factory_industry_6
											}
											#Enables Level 13 Mils
											#Enables Level 13 Civs
											#+4% Factory Throughput
											#+5% Max Factories in a State
											#+5% Factory Size
											#+5% Factory Build Cost
											#+8% Factory Industrial Goods Maintenance
											add_to_variable = { tech_factory_throughput = 0.04 }
											add_to_variable = { tech_factory_size = 0.05 }
											add_to_variable = { tech_factory_build_cost = 0.05 }
											add_to_variable = { tech_factory_industrial_goods_maintenance = 0.08 }
											
										}
									}
								}
							}
						}
					}
				}

			#
			#Tools
				if = {
					limit = {
						has_tech = industrial_era_tools_1
					}
					#Enables Level 5 Logging Camp
					#+5% Production Efficiency Cap
					#+5% Factory Goods Output
					add_to_variable = { tech_factory_goods_output = 0.04 }

					if = {
						limit = {
							has_tech = industrial_era_tools_2
						}
						#+5% Production Efficiency Cap
						#+5% Factory Goods Output
						add_to_variable = { tech_factory_goods_output = 0.02 }

						if = {
							limit = {
								has_tech = industrial_era_tools_3
							}
							#Enables Level 8 Logging Camp
							#+5% Production Efficiency Cap
							#+5% Factory Goods Output
							add_to_variable = { tech_factory_goods_output = 0.02 }

							if = {
								limit = {
									has_tech = industrial_era_tools_4
								}
								#+5% Production Efficiency Cap
								#+5% Factory Goods Output
								add_to_variable = { tech_factory_goods_output = 0.02 }

								if = {
									limit = {
										has_tech = industrial_era_tools_5
									}
									#Enables Level 10 Logging Camp
									#+5% Production Efficiency Cap
									#+5% Factory Goods Output
									add_to_variable = { tech_factory_goods_output = 0.02 }

									if = {
										limit = {
											has_tech = industrial_era_tools_6
										}
										#+5% Production Efficiency Cap
										#+5% Factory Goods Output
										add_to_variable = { tech_factory_goods_output = 0.02 }

										if = {
											limit = {
												has_tech = industrial_era_tools_7
											}
											#+5% Production Efficiency Cap
											#+5% Factory Goods Output
											add_to_variable = { tech_factory_goods_output = 0.02 }

											if = {
												limit = {
													has_tech = industrial_era_tools_8
												}
												#+5% Production Efficiency Cap
												#+5% Factory Goods Output
												add_to_variable = { tech_factory_goods_output = 0.02 }

											}
										}
									}
								}
							}
						}
					}
				}
			#
			#Construction
				if = {
					limit = {
						has_tech = construction_1
					}
					#Enables Level 9 Naval Dockyard
					#Enables Level 9 Naval Base
					#Enables Level 2 Land Fort
					#Enables Level 2 Coastal Fort
					#+5% Construction Speed
					#-5% Build Cost
					add_to_variable = { tech_build_cost = -0.05 }

					if = {
						limit = {
							has_tech = construction_2
						}
						#Enables Level 4 Land Fort
						#Enables Level 4 Coastal Fort
						#+5% Construction Speed
						#-5% Build Cost
						add_to_variable = { tech_build_cost = -0.05 }

						if = {
							limit = {
								has_tech = construction_3
							}
							#Enables Level 10 Naval Dockyard
							#Enables Level 10 Naval Base
							#Enables Level 6 Land Fort
							#Enables Level 6 Coastal Fort
							#+5% Construction Speed
							#-5% Build Cost
							add_to_variable = { tech_build_cost = -0.05 }

							if = {
								limit = {
									has_tech = construction_4
								}
								#Enables Level 8 Land Fort
								#Enables Level 8 Coastal Fort
								#+5% Construction Speed
								#-5% Build Cost
								add_to_variable = { tech_build_cost = -0.05 }

							}
						}
					}
				}
			#
			#Mechanical Production
				if = {
					limit = {
						has_tech = corliss_steam_engine
					}
					#+5% Factory Output
					#+5% Dockyard Output
					#+8% Factory Throughput
					#+4% Everyday Goods Factory Throughput
					#+8% Factory Industrial Goods Maintenance
					add_to_variable = { tech_factory_throughput = 0.08 }
					add_to_variable = { tech_factory_everyday_goods_throughput = 0.04 }
					add_to_variable = { tech_factory_industrial_goods_maintenance = 0.08 }

					if = {
						limit = {
							has_tech = mechanical_production_1
						}
						#+5% Factory Output
						#+5% Dockyard Output
						#+8% Factory Throughput
						#+4% Everyday Goods Factory Throughput
						#+8% Factory Industrial Goods Maintenance
						add_to_variable = { tech_factory_throughput = 0.08 }
						add_to_variable = { tech_factory_everyday_goods_throughput = 0.04 }
						add_to_variable = { tech_factory_industrial_goods_maintenance = 0.08 }

						if = {
							limit = {
								has_tech = mechanical_production_2
							}
							#+5% Factory Output
							#+5% Dockyard Output
							#+4% Factory Throughput
							#+2% Everyday Goods Factory Throughput
							#+4% Factory Industrial Goods Maintenance
							add_to_variable = { tech_factory_throughput = 0.04 }
							add_to_variable = { tech_factory_everyday_goods_throughput = 0.02 }
							add_to_variable = { tech_factory_industrial_goods_maintenance = 0.04 }

							if = {
								limit = {
									has_tech = mechanical_production_3
								}
								#+5% Factory Output
								#+5% Dockyard Output
								#+4% Factory Throughput
								#+2% Everyday Goods Factory Throughput
								#+4% Factory Industrial Goods Maintenance
								add_to_variable = { tech_factory_throughput = 0.04 }
								add_to_variable = { tech_factory_everyday_goods_throughput = 0.02 }
								add_to_variable = { tech_factory_industrial_goods_maintenance = 0.04 }

							}
						}
					}
				}
			#
			#Machine Tools
				if = {
					limit = {
						has_tech = interchange_parts
					}
					#+5% Industrial Efficiency Growth
					#+4% Factory Throughput
					#+8% Industrial Goods Factory Throughput
					#+4% Factory Industrial Goods Maintenance
					add_to_variable = { tech_factory_throughput = 0.04 }
					add_to_variable = { tech_factory_industrial_goods_throughput = 0.08 }
					add_to_variable = { tech_factory_industrial_goods_maintenance = 0.04 }
					
					if = {
						limit = {
							has_tech = machine_tools_1
						}
						#Enable Level 1 Machine Parts Factory
						#+5% Industrial Efficiency Growth
						#+4% Factory Throughput
						#+8% Industrial Goods Factory Throughput
						#+4% Factory Industrial Goods Maintenance
						add_to_variable = { tech_factory_throughput = 0.04 }
						add_to_variable = { tech_factory_industrial_goods_throughput = 0.08 }
						add_to_variable = { tech_factory_industrial_goods_maintenance = 0.04 }
						
						if = {
							limit = {
								has_tech = machine_tools_2
							}
							#Enable Level 2 Machine Parts Factory
							#+5% Production Efficiency Growth
							#+2% Factory Throughput
							#+4% Industrial Goods Factory Throughput
							#+2% Factory Industrial Goods Maintenance
							add_to_variable = { tech_factory_throughput = 0.02 }
							add_to_variable = { tech_factory_industrial_goods_throughput = 0.04 }
							add_to_variable = { tech_factory_industrial_goods_maintenance = 0.02 }
							
							if = {
								limit = {
									has_tech = machine_tools_3
								}
								#Enable Level 3 Machine Parts Factory
								#+5% Industrial Efficiency Growth
								#+2% Factory Throughput
								#+4% Industrial Goods Factory Throughput
								#+2% Factory Industrial Goods Maintenance
								add_to_variable = { tech_factory_throughput = 0.02 }
								add_to_variable = { tech_factory_industrial_goods_throughput = 0.04 }
								add_to_variable = { tech_factory_industrial_goods_maintenance = 0.02 }
								
								if = {
									limit = {
										has_tech = machine_tools_4
									}
									#Enable Level 4 Machine Parts Factory
									#+5% Production Efficiency Growth
									#+2% Factory Throughput
									#+4% Industrial Goods Factory Throughput
									#+2% Factory Industrial Goods Maintenance
									add_to_variable = { tech_factory_throughput = 0.02 }
									add_to_variable = { tech_factory_industrial_goods_throughput = 0.04 }
									add_to_variable = { tech_factory_industrial_goods_maintenance = 0.02 }
									
									if = {
										limit = {
											has_tech = machine_tools_5
										}
										#Enable Level 5 Machine Parts Factory
										#+5% Industrial Efficiency Growth
										#+2% Factory Throughput
										#+4% Industrial Goods Factory Throughput
										#+2% Factory Industrial Goods Maintenance
										add_to_variable = { tech_factory_throughput = 0.02 }
										add_to_variable = { tech_factory_industrial_goods_throughput = 0.04 }
										add_to_variable = { tech_factory_industrial_goods_maintenance = 0.02 }
										
										if = {
											limit = {
												has_tech = machine_tools_6
											}
											#Enable Level 6 Machine Parts Factory
											#+5% Production Efficiency Growth
											#+2% Factory Throughput
											#+4% Industrial Goods Factory Throughput
											#+2% Factory Industrial Goods Maintenance
											add_to_variable = { tech_factory_throughput = 0.02 }
											add_to_variable = { tech_factory_industrial_goods_throughput = 0.04 }
											add_to_variable = { tech_factory_industrial_goods_maintenance = 0.02 }
											
											if = {
												limit = {
													has_tech = machine_tools_7
												}
												#Enable Level 7 Machine Parts Factory
												#+5% Industrial Efficiency Growth
												#+2% Factory Throughput
												#+4% Industrial Goods Factory Throughput
												#+2% Factory Industrial Goods Maintenance
												add_to_variable = { tech_factory_throughput = 0.02 }
												add_to_variable = { tech_factory_industrial_goods_throughput = 0.04 }
												add_to_variable = { tech_factory_industrial_goods_maintenance = 0.02 }
												
												if = {
													limit = {
														has_tech = machine_tools_8
													}
													#Enable Level 8 Machine Parts Factory
													#+5% Production Efficiency Growth
													#+2% Factory Throughput
													#+4% Industrial Goods Factory Throughput
													#+2% Factory Industrial Goods Maintenance
													add_to_variable = { tech_factory_throughput = 0.02 }
													add_to_variable = { tech_factory_industrial_goods_throughput = 0.04 }
													add_to_variable = { tech_factory_industrial_goods_maintenance = 0.02 }
													
													if = {
														limit = {
															has_tech = machine_tools_9
														}
														#Enable Level 9 Machine Parts Factory
														#+5% Industrial Efficiency Growth
														#+2% Factory Throughput
														#+4% Industrial Goods Factory Throughput
														#+2% Factory Industrial Goods Maintenance
														add_to_variable = { tech_factory_throughput = 0.02 }
														add_to_variable = { tech_factory_industrial_goods_throughput = 0.04 }
														add_to_variable = { tech_factory_industrial_goods_maintenance = 0.02 }
														
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			#
		#
		
		#Process Engineering
			#Chemical Process
				if = {
					limit = {
						has_tech = hot_blast_furnaces
					}
					#+5% Production Efficiency Cap
					#-4% Factory Raw Goods Input
					add_to_variable = { tech_factory_raw_goods_input = -0.04 }
					
					if = {
						limit = {
							has_tech = industrial_blast_furnace
						}
						#Enables Level 1 Steel Mill
						#+10% Production Efficiency Cap
						#+4% Factory Throughput
						#-8% Factory Raw Goods Input
						add_to_variable = { tech_factory_throughput = 0.04 }
						add_to_variable = { tech_factory_raw_goods_input = -0.08 }
						
						if = {
							limit = {
								has_tech = cast_iron_industrialization
							}
							#+5% Production Efficiency Retention
							#+10% Industrial Goods Throughput
							add_to_variable = { tech_factory_industrial_goods_throughput = 0.08 }
							
							if = {
								limit = {
									has_tech = dry_puddling_process
								}
								#+5% Industrial Goods Output
								add_to_variable = { tech_factory_industrial_goods_output = 0.05 }
								
								if = {
									limit = {
										has_tech = bessemer_process
									}
									#Enables Level 3 Steel Mill
									#+10% Factory Output
									#+10% Dockyard Output
									#+16% Industrial Goods Throughput
									add_to_variable = { tech_factory_industrial_goods_throughput = 0.16 }
									
									if = {
										limit = {
											has_tech = industrial_ironworks_1
										}
										#+5% Factory Output
										#+5% Dockyard Output
										#+8% Industrial Goods Throughput
										add_to_variable = { tech_factory_industrial_goods_throughput = 0.08 }
										
										if = {
											limit = {
												has_tech = stainless_steel
											}
											#+5% Construction Speed
											#-5% Build Cost
											add_to_variable = { tech_build_cost = -0.05 }
											
										}
									}
								}
							}
						}
					}
				}
			#
			#Forges/Wrought Iron
				if = {
					limit = {
						has_tech = industrial_finery_forge
					}
					#+5% Industrial Goods Output
					add_to_variable = { tech_factory_industrial_goods_output = 0.05 }
					
					if = {
						limit = {
							has_tech = wrought_iron_industrialization
						}
						#+5% Industrial Goods Output
						add_to_variable = { tech_factory_industrial_goods_output = 0.05 }
						
					}
				}
			#
			#Metallurgy
				if = {
					limit = {
						has_tech = regenerative_furnace
					}
					#+5% Industrial Goods Output
					add_to_variable = { tech_factory_industrial_goods_output = 0.05 }
					
					if = {
						limit = {
							has_tech = siemens_martin_process
						}
						#+5% Industrial Goods Output
						add_to_variable = { tech_factory_industrial_goods_output = 0.05 }
						
					}
				}
			#
			#Oil Refining
				if = {
					limit = {
						has_tech = refining
					}
					#Enables Level 1 Coal Mine
					#+5% Resource Gain Efficiency
					#+10% Raw Goods Output
					#+10% Valuable Goods Output
					add_to_variable = { tech_raw_goods_output = 0.10 }
					add_to_variable = { tech_valuable_goods_output = 0.10 }

					if = {
						limit = {
							has_tech = early_oil_refining
						}
						#+5% Synthetic Oil
						#+2.5% Raw Goods Output
						add_to_variable = { tech_raw_goods_output = 0.025 }

						if = {
							limit = {
								has_tech = oil_refinery_1
							}
							#+10% Synthetic Oil
							#+2.5% Raw Goods Output
							add_to_variable = { tech_raw_goods_output = 0.025 }

							if = {
								limit = {
									has_tech = oil_refinery_2
								}
								#+10% Synthetic Oil
								#+2.5% Raw Goods Output
								add_to_variable = { tech_raw_goods_output = 0.025 }

								if = {
									limit = {
										has_tech = oil_refinery_2
									}
									#+10% Synthetic Oil
									#+2.5% Raw Goods Output
									add_to_variable = { tech_raw_goods_output = 0.025 }

								}
							}
						}
					}
				}
			#
			#Mining Rig
				if = {
					limit = {
						has_tech = mechanized_mining
					}
					#Enables Level 3 Coal Mine
					#+10% Resource Gain Efficiency
					#+10% Raw Goods Output
					#+10% Valuable Goods Output
					add_to_variable = { tech_raw_goods_output = 0.10 }
					add_to_variable = { tech_valuable_goods_output = 0.10 }

					if = {
						limit = {
							has_tech = mining_rig_2
						}
						#Enables Level 4 Coal Mine
						#+10% Raw Goods Output
						#+10% Valuable Goods Output
						add_to_variable = { tech_raw_goods_output = 0.10 }
						add_to_variable = { tech_valuable_goods_output = 0.10 }
						
						if = {
							limit = {
								has_tech = mining_rig_3
							}
							#Enables Level 5 Coal Mine
							#+10% Raw Goods Output
							#+10% Valuable Goods Output
							add_to_variable = { tech_raw_goods_output = 0.10 }
							add_to_variable = { tech_valuable_goods_output = 0.10 }
							
						}
					}
				}

			#
		#
		
		#Biochemistry
		#
		
		#Electrics and Instruments
		#

	}
#

#Misc Scripts

sort = {
	358 = {
		clear_array = buildings
		add_to_array = { buildings = arms_factory_level }
		add_to_array = { buildings = industrial_complex_level  }
		add_to_array = { buildings = building_level@dockyard }
		add_to_array = { buildings = infrastructure_level  }
		
		set_temp_variable = { length_temp = buildings^num }
		for_loop_effect = {
			start = 0
			end = length_temp
			add = 1
			value = v
			break = b
			find_highest_in_array = {
				array = buildings
				value = buildings_highest_value
				index = buildings_highest_index
			}
			remove_from_array = {
				array = buildings
				index = buildings_highest_index
			}
			add_to_temp_array = { 
				array = buildings_temp
				value = buildings_highest_value 
			}
		}
		for_loop_effect = {
			start = 0
			end = length_temp
			add = 1
			value = v
			break = b
			add_to_array = { 
				array = buildings
				value = buildings_temp^v 
			}
		}

	}
}

# HoI4 State Land Connection Indexer by Yard1
# Provides a simple way to check if two states share a land connection
# Call the scripted effect below in on_startup from a country scope (any will do, I suggest random_country)
# In order to check if two states have a land connection to each other, compare their state_land_connection_index variables. If they are the same, then they have a land connection.
mark_land_connected_states = {
	random_country = {
		set_variable = { global.current_state_land_connection_index = 1 }
		every_state = {
			add_to_array = { global.unchecked_land_connection_states = THIS }
		}
		while_loop_effect = {
			limit = {
				check_variable = { global.unchecked_land_connection_states^num > 0 }
			}
			log = "Run land connection loop with index [?global.current_state_land_connection_index|0], [?global.unchecked_land_connection_states^num|0] states left to index"
			var:global.unchecked_land_connection_states^0 = {
				log = "Adding index [?global.current_state_land_connection_index|0] to [?this.GetName]"
				set_variable = { state_land_connection_index = global.current_state_land_connection_index }
				every_neighbor_state = {
					log = "Adding index [?global.current_state_land_connection_index|0] to [?this.GetName], neighbor of [?prev.GetName]"
					set_variable = { state_land_connection_index = global.current_state_land_connection_index }
					if = {
						limit = { is_in_array = { global.unchecked_land_connection_states = THIS } }
						remove_from_array = { global.unchecked_land_connection_states = THIS }
					}
				}
				remove_from_array = { global.unchecked_land_connection_states = THIS }
			}
			set_temp_variable = { temp_lc_state = 0 }
			while_loop_effect = {
				limit = {
					any_of = {
						array = global.unchecked_land_connection_states
						var:v = {
							any_neighbor_state = { has_variable = state_land_connection_index }
						}
						set_temp_variable = { global.temp_lc_state = v }
					}
				}
				if = {
					limit = { NOT = { check_variable = { temp_lc_state = 0 } } }
					log = "Found [?temp_lc_state.GetName] as a neighbor of an indexed state"
					var:temp_lc_state = {
						log = "Adding index [?global.current_state_land_connection_index|0] to [?this.GetName]"
						set_variable = { state_land_connection_index = global.current_state_land_connection_index }
						remove_from_array = { global.unchecked_land_connection_states = THIS }
						every_neighbor_state = {
							log = "Adding index [?global.current_state_land_connection_index|0] to [?this.GetName], neighbor of [?prev.GetName]"
							set_variable = { state_land_connection_index = global.current_state_land_connection_index }
							if = {
								limit = { is_in_array = { global.unchecked_land_connection_states = THIS } }
								remove_from_array = { global.unchecked_land_connection_states = THIS }
							}
						}
					}
				}
			}
			log = "Land connection loop done, [?global.unchecked_land_connection_states^num|0] states left to index"
			log = "----"
			add_to_variable = { global.current_state_land_connection_index = 1 }
		}
		clear_variable = global.current_state_land_connection_index
		clear_array = global.unchecked_land_connection_states
	}
}
#Put in on_startup in a country scope (any, doesn’t matter which, you can use random_country)
#In order to check if two states have a land connection to each other, compare their state_land_connection_index variables. If they are the same, then they have a land connection. Example:
# If this returns true, then the capitals of THIS and FROM share a land connection
	#check_variable = { THIS.capital.state_land_connection_index = FROM.capital.state_land_connection_index }